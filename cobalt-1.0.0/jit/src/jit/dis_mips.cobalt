//--------------------------------------------------------------------------
// LuaJIT MIPS disassembler module.
//
// Copyright (C) 2005-2017 Mike Pall. All rights reserved.
// Released under the MIT/X license. See Copyright Notice in luajit.h
//--------------------------------------------------------------------------
// This is a helper module used by the LuaJIT machine code dumper module.
//
// It disassembles all standard MIPS32R1/R2 instructions.
// Default mode is big-endian, but see: dis_mipsel.lua
//----------------------------------------------------------------------------

var type = type;
var byte, format = string.byte, string.format;
var match, gmatch = string.match, string.gmatch;
var concat = table.concat;
var bit = require("bit");
var band, bor, tohex = bit.band, bit.bor, bit.tohex;
var lshift, rshift, arshift = bit.lshift, bit.rshift, bit.arshift;

//----------------------------------------------------------------------------
// Primary and extended opcode maps
//----------------------------------------------------------------------------

var map_movci = { shift = 16, mask = 1, [0] = "movfDSC", "movtDSC", };
var map_srl = { shift = 21, mask = 1, [0] = "srlDTA", "rotrDTA", };
var map_srlv = { shift = 6, mask = 1, [0] = "srlvDTS", "rotrvDTS", };

var map_special = {
  shift = 0, mask = 63,
  [0] = { shift = 0, mask = -1, [0] = "nop", _ = "sllDTA" },
  map_movci,	map_srl,	"sraDTA",
  "sllvDTS",	false,		map_srlv,	"sravDTS",
  "jrS",	"jalrD1S",	"movzDST",	"movnDST",
  "syscallY",	"breakY",	false,		"sync",
  "mfhiD",	"mthiS",	"mfloD",	"mtloS",
  "dsllvDST",	false,		"dsrlvDST",	"dsravDST",
  "multST",	"multuST",	"divST",	"divuST",
  "dmultST",	"dmultuST",	"ddivST",	"ddivuST",
  "addDST",	"addu|moveDST0", "subDST",	"subu|neguDS0T",
  "andDST",	"or|moveDST0",	"xorDST",	"nor|notDST0",
  false,	false,		"sltDST",	"sltuDST",
  "daddDST",	"dadduDST",	"dsubDST",	"dsubuDST",
  "tgeSTZ",	"tgeuSTZ",	"tltSTZ",	"tltuSTZ",
  "teqSTZ",	false,		"tneSTZ",	false,
  "dsllDTA",	false,		"dsrlDTA",	"dsraDTA",
  "dsll32DTA",	false,		"dsrl32DTA",	"dsra32DTA",
};

var map_special2 = {
  shift = 0, mask = 63,
  [0] = "maddST", "madduST",	"mulDST",	false,
  "msubST",	"msubuST",
  [32] = "clzDS", [33] = "cloDS",
  [63] = "sdbbpY",
};

var map_bshfl = {
  shift = 6, mask = 31,
  [2] = "wsbhDT",
  [16] = "sebDT",
  [24] = "sehDT",
};

var map_dbshfl = {
  shift = 6, mask = 31,
  [2] = "dsbhDT",
  [5] = "dshdDT",
};

var map_special3 = {
  shift = 0, mask = 63,
  [0]  = "extTSAK", [1]  = "dextmTSAP", [3]  = "dextTSAK",
  [4]  = "insTSAL", [6]  = "dinsuTSEQ", [7]  = "dinsTSAL",
  [32] = map_bshfl, [36] = map_dbshfl,  [59] = "rdhwrTD",
};

var map_regimm = {
  shift = 16, mask = 31,
  [0] = "bltzSB",	"bgezSB",	"bltzlSB",	"bgezlSB",
  false,	false,		false,		false,
  "tgeiSI",	"tgeiuSI",	"tltiSI",	"tltiuSI",
  "teqiSI",	false,		"tneiSI",	false,
  "bltzalSB",	"bgezalSB",	"bltzallSB",	"bgezallSB",
  false,	false,		false,		false,
  false,	false,		false,		false,
  false,	false,		false,		"synciSO",
};

var map_cop0 = {
  shift = 25, mask = 1,
  [0] = {
    shift = 21, mask = 15,
    [0] = "mfc0TDW", [4] = "mtc0TDW",
    [10] = "rdpgprDT",
    [11] = { shift = 5, mask = 1, [0] = "diT0", "eiT0", },
    [14] = "wrpgprDT",
  }, {
    shift = 0, mask = 63,
    [1] = "tlbr", [2] = "tlbwi", [6] = "tlbwr", [8] = "tlbp",
    [24] = "eret", [31] = "deret",
    [32] = "wait",
  },
};

var map_cop1s = {
  shift = 0, mask = 63,
  [0] = "add.sFGH",	"sub.sFGH",	"mul.sFGH",	"div.sFGH",
  "sqrt.sFG",		"abs.sFG",	"mov.sFG",	"neg.sFG",
  "round.l.sFG",	"trunc.l.sFG",	"ceil.l.sFG",	"floor.l.sFG",
  "round.w.sFG",	"trunc.w.sFG",	"ceil.w.sFG",	"floor.w.sFG",
  false,
  { shift = 16, mask = 1, [0] = "movf.sFGC", "movt.sFGC" },
  "movz.sFGT",	"movn.sFGT",
  false,	"recip.sFG",	"rsqrt.sFG",	false,
  false,	false,		false,		false,
  false,	false,		false,		false,
  false,	"cvt.d.sFG",	false,		false,
  "cvt.w.sFG",	"cvt.l.sFG",	"cvt.ps.sFGH",	false,
  false,	false,		false,		false,
  false,	false,		false,		false,
  "c.f.sVGH",	"c.un.sVGH",	"c.eq.sVGH",	"c.ueq.sVGH",
  "c.olt.sVGH",	"c.ult.sVGH",	"c.ole.sVGH",	"c.ule.sVGH",
  "c.sf.sVGH",	"c.ngle.sVGH",	"c.seq.sVGH",	"c.ngl.sVGH",
  "c.lt.sVGH",	"c.nge.sVGH",	"c.le.sVGH",	"c.ngt.sVGH",
};

var map_cop1d = {
  shift = 0, mask = 63,
  [0] = "add.dFGH",	"sub.dFGH",	"mul.dFGH",	"div.dFGH",
  "sqrt.dFG",		"abs.dFG",	"mov.dFG",	"neg.dFG",
  "round.l.dFG",	"trunc.l.dFG",	"ceil.l.dFG",	"floor.l.dFG",
  "round.w.dFG",	"trunc.w.dFG",	"ceil.w.dFG",	"floor.w.dFG",
  false,
  { shift = 16, mask = 1, [0] = "movf.dFGC", "movt.dFGC" },
  "movz.dFGT",	"movn.dFGT",
  false,	"recip.dFG",	"rsqrt.dFG",	false,
  false,	false,		false,		false,
  false,	false,		false,		false,
  "cvt.s.dFG",	false,		false,		false,
  "cvt.w.dFG",	"cvt.l.dFG",	false,		false,
  false,	false,		false,		false,
  false,	false,		false,		false,
  "c.f.dVGH",	"c.un.dVGH",	"c.eq.dVGH",	"c.ueq.dVGH",
  "c.olt.dVGH",	"c.ult.dVGH",	"c.ole.dVGH",	"c.ule.dVGH",
  "c.df.dVGH",	"c.ngle.dVGH",	"c.deq.dVGH",	"c.ngl.dVGH",
  "c.lt.dVGH",	"c.nge.dVGH",	"c.le.dVGH",	"c.ngt.dVGH",
};

var map_cop1ps = {
  shift = 0, mask = 63,
  [0] = "add.psFGH",	"sub.psFGH",	"mul.psFGH",	false,
  false,		"abs.psFG",	"mov.psFG",	"neg.psFG",
  false,		false,		false,		false,
  false,		false,		false,		false,
  false,
  { shift = 16, mask = 1, [0] = "movf.psFGC", "movt.psFGC" },
  "movz.psFGT",	"movn.psFGT",
  false,	false,		false,		false,
  false,	false,		false,		false,
  false,	false,		false,		false,
  "cvt.s.puFG",	false,		false,		false,
  false,	false,		false,		false,
  "cvt.s.plFG",	false,		false,		false,
  "pll.psFGH",	"plu.psFGH",	"pul.psFGH",	"puu.psFGH",
  "c.f.psVGH",	"c.un.psVGH",	"c.eq.psVGH",	"c.ueq.psVGH",
  "c.olt.psVGH", "c.ult.psVGH",	"c.ole.psVGH",	"c.ule.psVGH",
  "c.psf.psVGH", "c.ngle.psVGH", "c.pseq.psVGH", "c.ngl.psVGH",
  "c.lt.psVGH",	"c.nge.psVGH",	"c.le.psVGH",	"c.ngt.psVGH",
};

var map_cop1w = {
  shift = 0, mask = 63,
  [32] = "cvt.s.wFG", [33] = "cvt.d.wFG",
};

var map_cop1l = {
  shift = 0, mask = 63,
  [32] = "cvt.s.lFG", [33] = "cvt.d.lFG",
};

var map_cop1bc = {
  shift = 16, mask = 3,
  [0] = "bc1fCB", "bc1tCB",	"bc1flCB",	"bc1tlCB",
};

var map_cop1 = {
  shift = 21, mask = 31,
  [0] = "mfc1TG", "dmfc1TG",	"cfc1TG",	"mfhc1TG",
  "mtc1TG",	"dmtc1TG",	"ctc1TG",	"mthc1TG",
  map_cop1bc,	false,		false,		false,
  false,	false,		false,		false,
  map_cop1s,	map_cop1d,	false,		false,
  map_cop1w,	map_cop1l,	map_cop1ps,
};

var map_cop1x = {
  shift = 0, mask = 63,
  [0] = "lwxc1FSX",	"ldxc1FSX",	false,		false,
  false,	"luxc1FSX",	false,		false,
  "swxc1FSX",	"sdxc1FSX",	false,		false,
  false,	"suxc1FSX",	false,		"prefxMSX",
  false,	false,		false,		false,
  false,	false,		false,		false,
  false,	false,		false,		false,
  false,	false,		"alnv.psFGHS",	false,
  "madd.sFRGH",	"madd.dFRGH",	false,		false,
  false,	false,		"madd.psFRGH",	false,
  "msub.sFRGH",	"msub.dFRGH",	false,		false,
  false,	false,		"msub.psFRGH",	false,
  "nmadd.sFRGH", "nmadd.dFRGH",	false,		false,
  false,	false,		"nmadd.psFRGH",	false,
  "nmsub.sFRGH", "nmsub.dFRGH",	false,		false,
  false,	false,		"nmsub.psFRGH",	false,
};

var map_pri = {
  [0] = map_special,	map_regimm,	"jJ",	"jalJ",
  "beq|beqz|bST00B",	"bne|bnezST0B",		"blezSB",	"bgtzSB",
  "addiTSI",	"addiu|liTS0I",	"sltiTSI",	"sltiuTSI",
  "andiTSU",	"ori|liTS0U",	"xoriTSU",	"luiTU",
  map_cop0,	map_cop1,	false,		map_cop1x,
  "beql|beqzlST0B",	"bnel|bnezlST0B",	"blezlSB",	"bgtzlSB",
  "daddiTSI",	"daddiuTSI",	false,		false,
  map_special2,	"jalxJ",	false,		map_special3,
  "lbTSO",	"lhTSO",	"lwlTSO",	"lwTSO",
  "lbuTSO",	"lhuTSO",	"lwrTSO",	false,
  "sbTSO",	"shTSO",	"swlTSO",	"swTSO",
  false,	false,		"swrTSO",	"cacheNSO",
  "llTSO",	"lwc1HSO",	"lwc2TSO",	"prefNSO",
  false,	"ldc1HSO",	"ldc2TSO",	"ldTSO",
  "scTSO",	"swc1HSO",	"swc2TSO",	false,
  false,	"sdc1HSO",	"sdc2TSO",	"sdTSO",
};

//----------------------------------------------------------------------------

var map_gpr = {
  [0] = "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
  "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
  "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23",
  "r24", "r25", "r26", "r27", "r28", "sp", "r30", "ra",
};

//----------------------------------------------------------------------------

// Output a nicely formatted line with an opcode and operands.
var function putop(ctx, text, operands) {
  var pos = ctx.pos;
  var extra = "";
  if( ctx.rel ) {
    var sym = ctx.symtab[ctx.rel];
    if( sym ) { extra = "\t->"..sym; }
  }
  if( ctx.hexdump > 0 ) {
    ctx.out(format("%08x  %s  %-7s %s%s\n",
	    ctx.addr+pos, tohex(ctx.op), text, concat(operands, ", "), extra));
  } else {
    ctx.out(format("%08x  %-7s %s%s\n",
	    ctx.addr+pos, text, concat(operands, ", "), extra));
  }
  ctx.pos = pos + 4;
}

// Fallback for unknown opcodes.
var function unknown(ctx) {
  return putop(ctx, ".long", { "0x"..tohex(ctx.op) });
}

var function get_be(ctx) {
  var pos = ctx.pos;
  var b0, b1, b2, b3 = byte(ctx.code, pos+1, pos+4);
  return bor(lshift(b0, 24), lshift(b1, 16), lshift(b2, 8), b3);
}

var function get_le(ctx) {
  var pos = ctx.pos;
  var b0, b1, b2, b3 = byte(ctx.code, pos+1, pos+4);
  return bor(lshift(b3, 24), lshift(b2, 16), lshift(b1, 8), b0);
}

// Disassemble a single instruction.
var function disass_ins(ctx) {
  var op = ctx->get();
  var operands = {};
  var last = null;
  ctx.op = op;
  ctx.rel = null;

  var opat = map_pri[rshift(op, 26)];
  while( type(opat) != "string" ) {
    if( ! opat ) { return unknown(ctx); }
    opat = opat[band(rshift(op, opat.shift), opat.mask)] || opat._;
  }
  var name, pat = match(opat, "^([a-z0-9_.]*)(.*)");
  var altname, pat2 = match(pat, "|([a-z0-9_.|]*)(.*)");
  if( altname ) { pat = pat2; }

  for( p in gmatch(pat, ".") ) {
    var x = null;
    if( p == "S" ) {
      x = map_gpr[band(rshift(op, 21), 31)];
    } else if( p == "T" ) {
      x = map_gpr[band(rshift(op, 16), 31)];
    } else if( p == "D" ) {
      x = map_gpr[band(rshift(op, 11), 31)];
    } else if( p == "F" ) {
      x = "f"..band(rshift(op, 6), 31);
    } else if( p == "G" ) {
      x = "f"..band(rshift(op, 11), 31);
    } else if( p == "H" ) {
      x = "f"..band(rshift(op, 16), 31);
    } else if( p == "R" ) {
      x = "f"..band(rshift(op, 21), 31);
    } else if( p == "A" ) {
      x = band(rshift(op, 6), 31);
    } else if( p == "E" ) {
      x = band(rshift(op, 6), 31) + 32;
    } else if( p == "M" ) {
      x = band(rshift(op, 11), 31);
    } else if( p == "N" ) {
      x = band(rshift(op, 16), 31);
    } else if( p == "C" ) {
      x = band(rshift(op, 18), 7);
      if( x == 0 ) { x = null; }
    } else if( p == "K" ) {
      x = band(rshift(op, 11), 31) + 1;
    } else if( p == "P" ) {
      x = band(rshift(op, 11), 31) + 33;
    } else if( p == "L" ) {
      x = band(rshift(op, 11), 31) - last + 1;
    } else if( p == "Q" ) {
      x = band(rshift(op, 11), 31) - last + 33;
    } else if( p == "I" ) {
      x = arshift(lshift(op, 16), 16);
    } else if( p == "U" ) {
      x = band(op, 0xffff);
    } else if( p == "O" ) {
      var disp = arshift(lshift(op, 16), 16);
      operands[#operands] = format("%d(%s)", disp, last);
    } else if( p == "X" ) {
      var index = map_gpr[band(rshift(op, 16), 31)];
      operands[#operands] = format("%s(%s)", index, last);
    } else if( p == "B" ) {
      x = ctx.addr + ctx.pos + arshift(lshift(op, 16), 16)*4 + 4;
      ctx.rel = x;
      x = format("0x%08x", x);
    } else if( p == "J" ) {
      var a = ctx.addr + ctx.pos;
      x = a - band(a, 0x0fffffff) + band(op, 0x03ffffff)*4;
      ctx.rel = x;
      x = format("0x%08x", x);
    } else if( p == "V" ) {
      x = band(rshift(op, 8), 7);
      if( x == 0 ) { x = null; }
    } else if( p == "W" ) {
      x = band(op, 7);
      if( x == 0 ) { x = null; }
    } else if( p == "Y" ) {
      x = band(rshift(op, 6), 0x000fffff);
      if( x == 0 ) { x = null; }
    } else if( p == "Z" ) {
      x = band(rshift(op, 6), 1023);
      if( x == 0 ) { x = null; }
    } else if( p == "0" ) {
      if( last == "r0" || last == 0 ) {
	var n = #operands;
	operands[n] = null;
	last = operands[n-1];
	if( altname ) {
	  var a1, a2 = match(altname, "([^|]*)|(.*)");
	  if( a1 ) { name, altname = a1, a2;
	  } else { name = altname; }
	}
      }
    } else if( p == "1" ) {
      if( last == "ra" ) {
	operands[#operands] = null;
      }
    } else {
      assert(false);
    }
    if( x ) { operands[#operands+1] = x; last = x; }
  }

  return putop(ctx, name, operands);
}

//----------------------------------------------------------------------------

// Disassemble a block of code.
var function disass_block(ctx, ofs, len) {
  if( ! ofs ) { ofs = 0; }
  var stop = len && ofs+len || #ctx.code;
  stop -=   stop % 4;
  ctx.pos = ofs - ofs % 4;
  ctx.rel = null;
  while( ctx.pos < stop ) { disass_ins(ctx); }
}

// Extended API: create a disassembler context. Then call ctx:disass(ofs, len).
var function create(code, addr, out) {
  var ctx = {};
  ctx.code = code;
  ctx.addr = addr || 0;
  ctx.out = out || io.write;
  ctx.symtab = {};
  ctx.disass = disass_block;
  ctx.hexdump = 8;
  ctx.get = get_be;
  return ctx;
}

var function create_el(code, addr, out) {
  var ctx = create(code, addr, out);
  ctx.get = get_le;
  return ctx;
}

// Simple API: disassemble code (a string) at address and output via out.
var function disass(code, addr, out) {
  create(code, addr, out)->disass();
}

var function disass_el(code, addr, out) {
  create_el(code, addr, out)->disass();
}

// Return register name for RID.
var function regname(r) {
  if( r < 32 ) { return map_gpr[r]; }
  return "f"..(r-32);
}

// Public module functions.
return {
  create = create,
  create_el = create_el,
  disass = disass,
  disass_el = disass_el,
  regname = regname
};

