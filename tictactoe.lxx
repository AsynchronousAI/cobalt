// Tic-Tac-Toe Game in lxx

function printRed(str){
    return ("\27[31m" .. str .. "\27[0m")
}
  
function printBlue(str){
    return ("\27[34m" .. str .. "\27[0m")
}

function render(items){
    coloreditems = {}
    for (i, v in pairs(items)){
        if (v == "X") {
            coloreditems[i] = printRed(v)
        }else if (v == "O") {
            coloreditems[i] = printBlue(v)
        }else{
            coloreditems[i] = v
        }
    }
    print(
([[|-----------|
| %s | %s | %s |
|-----------|
| %s | %s | %s |
|-----------|
| %s | %s | %s |
|-----------|]])
    ->format(unpack(coloreditems)))
}

function anaylizewinner(items){
    // Checks for a winner in the board, returns X or O or it just returns false
    // for ties return Y

    // Check for horizontal wins
    for (i in pairs(range(1, 9, 3))){
        if (items[i] == items[i + 1] && items[i + 1] == items[i + 2]) {
            return items[i]
        }
    }

    // Check for vertical wins
    for (i in pairs(range(1, 3))){
        if (items[i] == items[i + 3] && items[i + 3] == items[i + 6]) {
            return items[i]
        }
    }

    // Check for diagonal wins
    if (items[1] == items[5] && items[5] == items[9]) {
        return items[1]
    }
    if (items[3] == items[5] && items[5] == items[7]) {
        return items[3]
    }


    // Check for ties
    for (i in pairs(range(1, 9))){
        if (tonumber(items[i])) {
            return false
        }
    }
    return "Y"
}

function minimax(board, depth, maximizingPlayer){
    var winner = anaylizewinner(board)
    if (winner) {
      if (winner == "X") {
        return 1
      }else if (winner == "O") {
        return -1
      }else{
        return 0
      }
    }
  
    if (maximizingPlayer) {
      var bestScore = -math.huge
      for (i = 1, 9) {
        if (type(board[i]) == "number") {
          board[i] = "X"
          var score = minimax(board, depth - 1, false)
          board[i] = i
          bestScore = math.max(bestScore, score)
        }
      }
      return bestScore
    }else{
      var bestScore = math.huge
      for (i = 1, 9){
        if (type(board[i]) == "number") {
          board[i] = "O"
          var score = minimax(board, depth - 1, true)
          board[i] = i
          bestScore = math.min(bestScore, score)
        }
      }
      return bestScore
    }
  }

function ai(board, diff){
    var bestScore = -math.huge
    var move
    for (i = 1, diff*10){
        if (type(board[i]) == "number") {
            board[i] = "X"
            var score = minimax(board, 0, false)
            board[i] = i
            if (score > bestScore) {
                bestScore = score
                move = i
            }
        }
    }
    return move
}

// GAME LOOP
var board = {1, 2, 3, 4, 5, 6, 7, 8, 9}
var diff = 5
render(board)
while (true) { 
    print("\n")
    info("Select a spot to place your X (1-9):")
    var index = tonumber(inputf("\n"))
    if ((index < 1 || index > 9) || !(tonumber(board[index]))) {
        print("Invalid input!")
    }else if ((board[index] == "X") || (board[index] == "O")) {
            print("That spot is already taken!")
    }else {
        board[index] = "X"
        winner = anaylizewinner(board)
        if (winner) {
            render(board)
            if (winner == "Y") {
                print("Tie!")
                board = {1, 2, 3, 4, 5, 6, 7, 8, 9}
                print("\n\n\nResseting board...")
                render(board)
            } else {
                if (winner == "X") {
                    print(printRed("X won!"))
                }else{
                    print(printBlue("O won!"))
                }
            
                board = {1, 2, 3, 4, 5, 6, 7, 8, 9}
                print("\n\n\nResseting board...")
                render(board)
            }
        }else{
            // Computer's turn
            print("Computer's turn...")
            board[ai(board, diff)] = "O"
            mwait(math.random(200, 1000))
            print("\n\n")
            render(board, diff)
            print("AI placed an O!")
        }
    }
}
