/* ============================================================================== //
// This file is apart of the Cobalt Programming Language. Cobalt is under the MIT //
// License. Read `cobalt.h` for license information.                              //
// ============================================================================== */

#ifndef zcheckDEFINED
#define zcheckDEFINED

/****** DO NOT EDIT THIS FILE (automatically generated by zcheck.lua) ******/

#define znew moonvulkan_znew
void* znew(lua_State *L, VkStructureType sType /* or -1 */, size_t sz, int *err);
#define znewarray moonvulkan_znewarray
void* znewarray(lua_State *L, VkStructureType sType /* or -1 */, size_t sz, uint32_t count, int *err);

/* Untyped structs only: */
#define zfree_untyped moonvulkan_zfree_untyped
void zfree_untyped(lua_State *L, const void *p, int base, void (*clearfunc)(lua_State *L, const void *p));
#define zfreearray_untyped moonvulkan_zfreearray_untyped
void zfreearray_untyped(lua_State *L, const void *p, size_t sz, uint32_t count, int base, void (*clearfunc)(lua_State *L, const void *p));

/* Typed structs only: */
#define zfree moonvulkan_zfree
void zfree(lua_State *L, const void *p, int base);
#define zfreearray moonvulkan_zfreearray
void zfreearray(lua_State *L, const void *p, size_t sz, uint32_t count, int base);

/*------------------------------------------------------------------------------*
 | Typed structs                                                                |
 *------------------------------------------------------------------------------*/

#define znewVkInstanceCreateInfo(L, err) (VkInstanceCreateInfo*)znew((L), VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, sizeof(VkInstanceCreateInfo), (err))
#define znewarrayVkInstanceCreateInfo(L, count, err) (VkInstanceCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, sizeof(VkInstanceCreateInfo), (count), (err))
#define znewchainVkInstanceCreateInfo moonvulkan_znewchainVkInstanceCreateInfo
VkInstanceCreateInfo* znewchainVkInstanceCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkInstanceCreateInfo moonvulkan_znewchainarrayVkInstanceCreateInfo
VkInstanceCreateInfo* znewchainarrayVkInstanceCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkInstanceCreateInfo moonvulkan_zcheckVkInstanceCreateInfo
VkInstanceCreateInfo* zcheckVkInstanceCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkInstanceCreateInfo moonvulkan_zcheckarrayVkInstanceCreateInfo
VkInstanceCreateInfo* zcheckarrayVkInstanceCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkInstanceCreateInfo moonvulkan_zinitVkInstanceCreateInfo
int zinitVkInstanceCreateInfo(lua_State *L, VkInstanceCreateInfo* p, int *err);
#define zfreeVkInstanceCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkInstanceCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkInstanceCreateInfo), (count), (base))
#define zpushVkInstanceCreateInfo moonvulkan_zpushVkInstanceCreateInfo
int zpushVkInstanceCreateInfo(lua_State *L, const VkInstanceCreateInfo *p);

#define znewVkApplicationInfo(L, err) (VkApplicationInfo*)znew((L), VK_STRUCTURE_TYPE_APPLICATION_INFO, sizeof(VkApplicationInfo), (err))
#define znewarrayVkApplicationInfo(L, count, err) (VkApplicationInfo*)znewarray((L), VK_STRUCTURE_TYPE_APPLICATION_INFO, sizeof(VkApplicationInfo), (count), (err))
#define znewchainVkApplicationInfo moonvulkan_znewchainVkApplicationInfo
VkApplicationInfo* znewchainVkApplicationInfo(lua_State *L, int *err);
#define znewchainarrayVkApplicationInfo moonvulkan_znewchainarrayVkApplicationInfo
VkApplicationInfo* znewchainarrayVkApplicationInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkApplicationInfo moonvulkan_zcheckVkApplicationInfo
VkApplicationInfo* zcheckVkApplicationInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkApplicationInfo moonvulkan_zcheckarrayVkApplicationInfo
VkApplicationInfo* zcheckarrayVkApplicationInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkApplicationInfo moonvulkan_zinitVkApplicationInfo
int zinitVkApplicationInfo(lua_State *L, VkApplicationInfo* p, int *err);
#define zfreeVkApplicationInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkApplicationInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkApplicationInfo), (count), (base))
#define zpushVkApplicationInfo moonvulkan_zpushVkApplicationInfo
int zpushVkApplicationInfo(lua_State *L, const VkApplicationInfo *p);

#define znewVkValidationFlagsEXT(L, err) (VkValidationFlagsEXT*)znew((L), VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, sizeof(VkValidationFlagsEXT), (err))
#define znewarrayVkValidationFlagsEXT(L, count, err) (VkValidationFlagsEXT*)znewarray((L), VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, sizeof(VkValidationFlagsEXT), (count), (err))
#define znewchainVkValidationFlagsEXT moonvulkan_znewchainVkValidationFlagsEXT
VkValidationFlagsEXT* znewchainVkValidationFlagsEXT(lua_State *L, int *err);
#define znewchainarrayVkValidationFlagsEXT moonvulkan_znewchainarrayVkValidationFlagsEXT
VkValidationFlagsEXT* znewchainarrayVkValidationFlagsEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkValidationFlagsEXT moonvulkan_zcheckVkValidationFlagsEXT
VkValidationFlagsEXT* zcheckVkValidationFlagsEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkValidationFlagsEXT moonvulkan_zcheckarrayVkValidationFlagsEXT
VkValidationFlagsEXT* zcheckarrayVkValidationFlagsEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkValidationFlagsEXT moonvulkan_zinitVkValidationFlagsEXT
int zinitVkValidationFlagsEXT(lua_State *L, VkValidationFlagsEXT* p, int *err);
#define zfreeVkValidationFlagsEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkValidationFlagsEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkValidationFlagsEXT), (count), (base))
#define zpushVkValidationFlagsEXT moonvulkan_zpushVkValidationFlagsEXT
int zpushVkValidationFlagsEXT(lua_State *L, const VkValidationFlagsEXT *p);

#define znewVkDeviceCreateInfo(L, err) (VkDeviceCreateInfo*)znew((L), VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, sizeof(VkDeviceCreateInfo), (err))
#define znewarrayVkDeviceCreateInfo(L, count, err) (VkDeviceCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, sizeof(VkDeviceCreateInfo), (count), (err))
#define znewchainVkDeviceCreateInfo moonvulkan_znewchainVkDeviceCreateInfo
VkDeviceCreateInfo* znewchainVkDeviceCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkDeviceCreateInfo moonvulkan_znewchainarrayVkDeviceCreateInfo
VkDeviceCreateInfo* znewchainarrayVkDeviceCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceCreateInfo moonvulkan_zcheckVkDeviceCreateInfo
VkDeviceCreateInfo* zcheckVkDeviceCreateInfo(lua_State *L, int arg, int *err, ud_t *ud); //non-standard
#define zcheckarrayVkDeviceCreateInfo moonvulkan_zcheckarrayVkDeviceCreateInfo
VkDeviceCreateInfo* zcheckarrayVkDeviceCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceCreateInfo moonvulkan_zinitVkDeviceCreateInfo
int zinitVkDeviceCreateInfo(lua_State *L, VkDeviceCreateInfo* p, int *err);
#define zfreeVkDeviceCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceCreateInfo), (count), (base))
#define zpushVkDeviceCreateInfo moonvulkan_zpushVkDeviceCreateInfo
int zpushVkDeviceCreateInfo(lua_State *L, const VkDeviceCreateInfo *p);

#define znewVkDeviceQueueCreateInfo(L, err) (VkDeviceQueueCreateInfo*)znew((L), VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, sizeof(VkDeviceQueueCreateInfo), (err))
#define znewarrayVkDeviceQueueCreateInfo(L, count, err) (VkDeviceQueueCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, sizeof(VkDeviceQueueCreateInfo), (count), (err))
#define znewchainVkDeviceQueueCreateInfo moonvulkan_znewchainVkDeviceQueueCreateInfo
VkDeviceQueueCreateInfo* znewchainVkDeviceQueueCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkDeviceQueueCreateInfo moonvulkan_znewchainarrayVkDeviceQueueCreateInfo
VkDeviceQueueCreateInfo* znewchainarrayVkDeviceQueueCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceQueueCreateInfo moonvulkan_zcheckVkDeviceQueueCreateInfo
VkDeviceQueueCreateInfo* zcheckVkDeviceQueueCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceQueueCreateInfo moonvulkan_zcheckarrayVkDeviceQueueCreateInfo
VkDeviceQueueCreateInfo* zcheckarrayVkDeviceQueueCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceQueueCreateInfo moonvulkan_zinitVkDeviceQueueCreateInfo
int zinitVkDeviceQueueCreateInfo(lua_State *L, VkDeviceQueueCreateInfo* p, int *err);
#define zfreeVkDeviceQueueCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceQueueCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceQueueCreateInfo), (count), (base))
#define zpushVkDeviceQueueCreateInfo moonvulkan_zpushVkDeviceQueueCreateInfo
int zpushVkDeviceQueueCreateInfo(lua_State *L, const VkDeviceQueueCreateInfo *p);

#define znewVkCommandPoolCreateInfo(L, err) (VkCommandPoolCreateInfo*)znew((L), VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, sizeof(VkCommandPoolCreateInfo), (err))
#define znewarrayVkCommandPoolCreateInfo(L, count, err) (VkCommandPoolCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, sizeof(VkCommandPoolCreateInfo), (count), (err))
#define znewchainVkCommandPoolCreateInfo moonvulkan_znewchainVkCommandPoolCreateInfo
VkCommandPoolCreateInfo* znewchainVkCommandPoolCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkCommandPoolCreateInfo moonvulkan_znewchainarrayVkCommandPoolCreateInfo
VkCommandPoolCreateInfo* znewchainarrayVkCommandPoolCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandPoolCreateInfo moonvulkan_zcheckVkCommandPoolCreateInfo
VkCommandPoolCreateInfo* zcheckVkCommandPoolCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandPoolCreateInfo moonvulkan_zcheckarrayVkCommandPoolCreateInfo
VkCommandPoolCreateInfo* zcheckarrayVkCommandPoolCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandPoolCreateInfo moonvulkan_zinitVkCommandPoolCreateInfo
int zinitVkCommandPoolCreateInfo(lua_State *L, VkCommandPoolCreateInfo* p, int *err);
#define zfreeVkCommandPoolCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandPoolCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandPoolCreateInfo), (count), (base))
#define zpushVkCommandPoolCreateInfo moonvulkan_zpushVkCommandPoolCreateInfo
int zpushVkCommandPoolCreateInfo(lua_State *L, const VkCommandPoolCreateInfo *p);

#define znewVkCommandBufferAllocateInfo(L, err) (VkCommandBufferAllocateInfo*)znew((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, sizeof(VkCommandBufferAllocateInfo), (err))
#define znewarrayVkCommandBufferAllocateInfo(L, count, err) (VkCommandBufferAllocateInfo*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, sizeof(VkCommandBufferAllocateInfo), (count), (err))
#define znewchainVkCommandBufferAllocateInfo moonvulkan_znewchainVkCommandBufferAllocateInfo
VkCommandBufferAllocateInfo* znewchainVkCommandBufferAllocateInfo(lua_State *L, int *err);
#define znewchainarrayVkCommandBufferAllocateInfo moonvulkan_znewchainarrayVkCommandBufferAllocateInfo
VkCommandBufferAllocateInfo* znewchainarrayVkCommandBufferAllocateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandBufferAllocateInfo moonvulkan_zcheckVkCommandBufferAllocateInfo
VkCommandBufferAllocateInfo* zcheckVkCommandBufferAllocateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandBufferAllocateInfo moonvulkan_zcheckarrayVkCommandBufferAllocateInfo
VkCommandBufferAllocateInfo* zcheckarrayVkCommandBufferAllocateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandBufferAllocateInfo moonvulkan_zinitVkCommandBufferAllocateInfo
int zinitVkCommandBufferAllocateInfo(lua_State *L, VkCommandBufferAllocateInfo* p, int *err);
#define zfreeVkCommandBufferAllocateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandBufferAllocateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandBufferAllocateInfo), (count), (base))
#define zpushVkCommandBufferAllocateInfo moonvulkan_zpushVkCommandBufferAllocateInfo
int zpushVkCommandBufferAllocateInfo(lua_State *L, const VkCommandBufferAllocateInfo *p);

#define znewVkCommandBufferInheritanceInfo(L, err) (VkCommandBufferInheritanceInfo*)znew((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, sizeof(VkCommandBufferInheritanceInfo), (err))
#define znewarrayVkCommandBufferInheritanceInfo(L, count, err) (VkCommandBufferInheritanceInfo*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, sizeof(VkCommandBufferInheritanceInfo), (count), (err))
#define znewchainVkCommandBufferInheritanceInfo moonvulkan_znewchainVkCommandBufferInheritanceInfo
VkCommandBufferInheritanceInfo* znewchainVkCommandBufferInheritanceInfo(lua_State *L, int *err);
#define znewchainarrayVkCommandBufferInheritanceInfo moonvulkan_znewchainarrayVkCommandBufferInheritanceInfo
VkCommandBufferInheritanceInfo* znewchainarrayVkCommandBufferInheritanceInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandBufferInheritanceInfo moonvulkan_zcheckVkCommandBufferInheritanceInfo
VkCommandBufferInheritanceInfo* zcheckVkCommandBufferInheritanceInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandBufferInheritanceInfo moonvulkan_zcheckarrayVkCommandBufferInheritanceInfo
VkCommandBufferInheritanceInfo* zcheckarrayVkCommandBufferInheritanceInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandBufferInheritanceInfo moonvulkan_zinitVkCommandBufferInheritanceInfo
int zinitVkCommandBufferInheritanceInfo(lua_State *L, VkCommandBufferInheritanceInfo* p, int *err);
#define zfreeVkCommandBufferInheritanceInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandBufferInheritanceInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandBufferInheritanceInfo), (count), (base))
#define zpushVkCommandBufferInheritanceInfo moonvulkan_zpushVkCommandBufferInheritanceInfo
int zpushVkCommandBufferInheritanceInfo(lua_State *L, const VkCommandBufferInheritanceInfo *p);

#define znewVkCommandBufferInheritanceConditionalRenderingInfoEXT(L, err) (VkCommandBufferInheritanceConditionalRenderingInfoEXT*)znew((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT), (err))
#define znewarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT(L, count, err) (VkCommandBufferInheritanceConditionalRenderingInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT), (count), (err))
#define znewchainVkCommandBufferInheritanceConditionalRenderingInfoEXT moonvulkan_znewchainVkCommandBufferInheritanceConditionalRenderingInfoEXT
VkCommandBufferInheritanceConditionalRenderingInfoEXT* znewchainVkCommandBufferInheritanceConditionalRenderingInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT moonvulkan_znewchainarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT
VkCommandBufferInheritanceConditionalRenderingInfoEXT* znewchainarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandBufferInheritanceConditionalRenderingInfoEXT moonvulkan_zcheckVkCommandBufferInheritanceConditionalRenderingInfoEXT
VkCommandBufferInheritanceConditionalRenderingInfoEXT* zcheckVkCommandBufferInheritanceConditionalRenderingInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT moonvulkan_zcheckarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT
VkCommandBufferInheritanceConditionalRenderingInfoEXT* zcheckarrayVkCommandBufferInheritanceConditionalRenderingInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandBufferInheritanceConditionalRenderingInfoEXT moonvulkan_zinitVkCommandBufferInheritanceConditionalRenderingInfoEXT
int zinitVkCommandBufferInheritanceConditionalRenderingInfoEXT(lua_State *L, VkCommandBufferInheritanceConditionalRenderingInfoEXT* p, int *err);
#define zfreeVkCommandBufferInheritanceConditionalRenderingInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandBufferInheritanceConditionalRenderingInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT), (count), (base))
#define zpushVkCommandBufferInheritanceConditionalRenderingInfoEXT moonvulkan_zpushVkCommandBufferInheritanceConditionalRenderingInfoEXT
int zpushVkCommandBufferInheritanceConditionalRenderingInfoEXT(lua_State *L, const VkCommandBufferInheritanceConditionalRenderingInfoEXT *p);

#define znewVkExternalMemoryBufferCreateInfo(L, err) (VkExternalMemoryBufferCreateInfo*)znew((L), VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, sizeof(VkExternalMemoryBufferCreateInfo), (err))
#define znewarrayVkExternalMemoryBufferCreateInfo(L, count, err) (VkExternalMemoryBufferCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, sizeof(VkExternalMemoryBufferCreateInfo), (count), (err))
#define znewchainVkExternalMemoryBufferCreateInfo moonvulkan_znewchainVkExternalMemoryBufferCreateInfo
VkExternalMemoryBufferCreateInfo* znewchainVkExternalMemoryBufferCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkExternalMemoryBufferCreateInfo moonvulkan_znewchainarrayVkExternalMemoryBufferCreateInfo
VkExternalMemoryBufferCreateInfo* znewchainarrayVkExternalMemoryBufferCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkExternalMemoryBufferCreateInfo moonvulkan_zcheckVkExternalMemoryBufferCreateInfo
VkExternalMemoryBufferCreateInfo* zcheckVkExternalMemoryBufferCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkExternalMemoryBufferCreateInfo moonvulkan_zcheckarrayVkExternalMemoryBufferCreateInfo
VkExternalMemoryBufferCreateInfo* zcheckarrayVkExternalMemoryBufferCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExternalMemoryBufferCreateInfo moonvulkan_zinitVkExternalMemoryBufferCreateInfo
int zinitVkExternalMemoryBufferCreateInfo(lua_State *L, VkExternalMemoryBufferCreateInfo* p, int *err);
#define zfreeVkExternalMemoryBufferCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExternalMemoryBufferCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkExternalMemoryBufferCreateInfo), (count), (base))
#define zpushVkExternalMemoryBufferCreateInfo moonvulkan_zpushVkExternalMemoryBufferCreateInfo
int zpushVkExternalMemoryBufferCreateInfo(lua_State *L, const VkExternalMemoryBufferCreateInfo *p);

#define znewVkDeviceQueueGlobalPriorityCreateInfoEXT(L, err) (VkDeviceQueueGlobalPriorityCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT), (err))
#define znewarrayVkDeviceQueueGlobalPriorityCreateInfoEXT(L, count, err) (VkDeviceQueueGlobalPriorityCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT), (count), (err))
#define znewchainVkDeviceQueueGlobalPriorityCreateInfoEXT moonvulkan_znewchainVkDeviceQueueGlobalPriorityCreateInfoEXT
VkDeviceQueueGlobalPriorityCreateInfoEXT* znewchainVkDeviceQueueGlobalPriorityCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDeviceQueueGlobalPriorityCreateInfoEXT moonvulkan_znewchainarrayVkDeviceQueueGlobalPriorityCreateInfoEXT
VkDeviceQueueGlobalPriorityCreateInfoEXT* znewchainarrayVkDeviceQueueGlobalPriorityCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceQueueGlobalPriorityCreateInfoEXT moonvulkan_zcheckVkDeviceQueueGlobalPriorityCreateInfoEXT
VkDeviceQueueGlobalPriorityCreateInfoEXT* zcheckVkDeviceQueueGlobalPriorityCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceQueueGlobalPriorityCreateInfoEXT moonvulkan_zcheckarrayVkDeviceQueueGlobalPriorityCreateInfoEXT
VkDeviceQueueGlobalPriorityCreateInfoEXT* zcheckarrayVkDeviceQueueGlobalPriorityCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceQueueGlobalPriorityCreateInfoEXT moonvulkan_zinitVkDeviceQueueGlobalPriorityCreateInfoEXT
int zinitVkDeviceQueueGlobalPriorityCreateInfoEXT(lua_State *L, VkDeviceQueueGlobalPriorityCreateInfoEXT* p, int *err);
#define zfreeVkDeviceQueueGlobalPriorityCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceQueueGlobalPriorityCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT), (count), (base))
#define zpushVkDeviceQueueGlobalPriorityCreateInfoEXT moonvulkan_zpushVkDeviceQueueGlobalPriorityCreateInfoEXT
int zpushVkDeviceQueueGlobalPriorityCreateInfoEXT(lua_State *L, const VkDeviceQueueGlobalPriorityCreateInfoEXT *p);

#define znewVkCommandBufferBeginInfo(L, err) (VkCommandBufferBeginInfo*)znew((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, sizeof(VkCommandBufferBeginInfo), (err))
#define znewarrayVkCommandBufferBeginInfo(L, count, err) (VkCommandBufferBeginInfo*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, sizeof(VkCommandBufferBeginInfo), (count), (err))
#define znewchainVkCommandBufferBeginInfo moonvulkan_znewchainVkCommandBufferBeginInfo
VkCommandBufferBeginInfo* znewchainVkCommandBufferBeginInfo(lua_State *L, int *err);
#define znewchainarrayVkCommandBufferBeginInfo moonvulkan_znewchainarrayVkCommandBufferBeginInfo
VkCommandBufferBeginInfo* znewchainarrayVkCommandBufferBeginInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandBufferBeginInfo moonvulkan_zcheckVkCommandBufferBeginInfo
VkCommandBufferBeginInfo* zcheckVkCommandBufferBeginInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandBufferBeginInfo moonvulkan_zcheckarrayVkCommandBufferBeginInfo
VkCommandBufferBeginInfo* zcheckarrayVkCommandBufferBeginInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandBufferBeginInfo moonvulkan_zinitVkCommandBufferBeginInfo
int zinitVkCommandBufferBeginInfo(lua_State *L, VkCommandBufferBeginInfo* p, int *err);
#define zfreeVkCommandBufferBeginInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandBufferBeginInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandBufferBeginInfo), (count), (base))
#define zpushVkCommandBufferBeginInfo moonvulkan_zpushVkCommandBufferBeginInfo
int zpushVkCommandBufferBeginInfo(lua_State *L, const VkCommandBufferBeginInfo *p);

#define znewVkBufferCreateInfo(L, err) (VkBufferCreateInfo*)znew((L), VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, sizeof(VkBufferCreateInfo), (err))
#define znewarrayVkBufferCreateInfo(L, count, err) (VkBufferCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, sizeof(VkBufferCreateInfo), (count), (err))
#define znewchainVkBufferCreateInfo moonvulkan_znewchainVkBufferCreateInfo
VkBufferCreateInfo* znewchainVkBufferCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkBufferCreateInfo moonvulkan_znewchainarrayVkBufferCreateInfo
VkBufferCreateInfo* znewchainarrayVkBufferCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferCreateInfo moonvulkan_zcheckVkBufferCreateInfo
VkBufferCreateInfo* zcheckVkBufferCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferCreateInfo moonvulkan_zcheckarrayVkBufferCreateInfo
VkBufferCreateInfo* zcheckarrayVkBufferCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferCreateInfo moonvulkan_zinitVkBufferCreateInfo
int zinitVkBufferCreateInfo(lua_State *L, VkBufferCreateInfo* p, int *err);
#define zfreeVkBufferCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferCreateInfo), (count), (base))
#define zpushVkBufferCreateInfo moonvulkan_zpushVkBufferCreateInfo
int zpushVkBufferCreateInfo(lua_State *L, const VkBufferCreateInfo *p);

#define znewVkBufferViewCreateInfo(L, err) (VkBufferViewCreateInfo*)znew((L), VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, sizeof(VkBufferViewCreateInfo), (err))
#define znewarrayVkBufferViewCreateInfo(L, count, err) (VkBufferViewCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, sizeof(VkBufferViewCreateInfo), (count), (err))
#define znewchainVkBufferViewCreateInfo moonvulkan_znewchainVkBufferViewCreateInfo
VkBufferViewCreateInfo* znewchainVkBufferViewCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkBufferViewCreateInfo moonvulkan_znewchainarrayVkBufferViewCreateInfo
VkBufferViewCreateInfo* znewchainarrayVkBufferViewCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferViewCreateInfo moonvulkan_zcheckVkBufferViewCreateInfo
VkBufferViewCreateInfo* zcheckVkBufferViewCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferViewCreateInfo moonvulkan_zcheckarrayVkBufferViewCreateInfo
VkBufferViewCreateInfo* zcheckarrayVkBufferViewCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferViewCreateInfo moonvulkan_zinitVkBufferViewCreateInfo
int zinitVkBufferViewCreateInfo(lua_State *L, VkBufferViewCreateInfo* p, int *err);
#define zfreeVkBufferViewCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferViewCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferViewCreateInfo), (count), (base))
#define zpushVkBufferViewCreateInfo moonvulkan_zpushVkBufferViewCreateInfo
int zpushVkBufferViewCreateInfo(lua_State *L, const VkBufferViewCreateInfo *p);

#define znewVkPhysicalDeviceFeatures2(L, err) (VkPhysicalDeviceFeatures2*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, sizeof(VkPhysicalDeviceFeatures2), (err))
#define znewarrayVkPhysicalDeviceFeatures2(L, count, err) (VkPhysicalDeviceFeatures2*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, sizeof(VkPhysicalDeviceFeatures2), (count), (err))
#define znewchainVkPhysicalDeviceFeatures2 moonvulkan_znewchainVkPhysicalDeviceFeatures2
VkPhysicalDeviceFeatures2* znewchainVkPhysicalDeviceFeatures2(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceFeatures2 moonvulkan_znewchainarrayVkPhysicalDeviceFeatures2
VkPhysicalDeviceFeatures2* znewchainarrayVkPhysicalDeviceFeatures2(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceFeatures2 moonvulkan_zcheckVkPhysicalDeviceFeatures2
VkPhysicalDeviceFeatures2* zcheckVkPhysicalDeviceFeatures2(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceFeatures2 moonvulkan_zcheckarrayVkPhysicalDeviceFeatures2
VkPhysicalDeviceFeatures2* zcheckarrayVkPhysicalDeviceFeatures2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceFeatures2 moonvulkan_zinitVkPhysicalDeviceFeatures2
int zinitVkPhysicalDeviceFeatures2(lua_State *L, VkPhysicalDeviceFeatures2* p, int *err);
#define zfreeVkPhysicalDeviceFeatures2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceFeatures2(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceFeatures2), (count), (base))
#define zpushVkPhysicalDeviceFeatures2 moonvulkan_zpushVkPhysicalDeviceFeatures2
int zpushVkPhysicalDeviceFeatures2(lua_State *L, const VkPhysicalDeviceFeatures2 *p);

#define znewVkPhysicalDeviceProperties2(L, err) (VkPhysicalDeviceProperties2*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, sizeof(VkPhysicalDeviceProperties2), (err))
#define znewarrayVkPhysicalDeviceProperties2(L, count, err) (VkPhysicalDeviceProperties2*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, sizeof(VkPhysicalDeviceProperties2), (count), (err))
#define znewchainVkPhysicalDeviceProperties2 moonvulkan_znewchainVkPhysicalDeviceProperties2
VkPhysicalDeviceProperties2* znewchainVkPhysicalDeviceProperties2(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceProperties2 moonvulkan_znewchainarrayVkPhysicalDeviceProperties2
VkPhysicalDeviceProperties2* znewchainarrayVkPhysicalDeviceProperties2(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceProperties2 moonvulkan_zcheckVkPhysicalDeviceProperties2
VkPhysicalDeviceProperties2* zcheckVkPhysicalDeviceProperties2(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceProperties2 moonvulkan_zcheckarrayVkPhysicalDeviceProperties2
VkPhysicalDeviceProperties2* zcheckarrayVkPhysicalDeviceProperties2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceProperties2 moonvulkan_zinitVkPhysicalDeviceProperties2
int zinitVkPhysicalDeviceProperties2(lua_State *L, VkPhysicalDeviceProperties2* p, int *err);
#define zfreeVkPhysicalDeviceProperties2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceProperties2(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceProperties2), (count), (base))
#define zpushVkPhysicalDeviceProperties2 moonvulkan_zpushVkPhysicalDeviceProperties2
int zpushVkPhysicalDeviceProperties2(lua_State *L, const VkPhysicalDeviceProperties2 *p);

#define znewVkFormatProperties2(L, err) (VkFormatProperties2*)znew((L), VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, sizeof(VkFormatProperties2), (err))
#define znewarrayVkFormatProperties2(L, count, err) (VkFormatProperties2*)znewarray((L), VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, sizeof(VkFormatProperties2), (count), (err))
#define znewchainVkFormatProperties2 moonvulkan_znewchainVkFormatProperties2
VkFormatProperties2* znewchainVkFormatProperties2(lua_State *L, int *err);
#define znewchainarrayVkFormatProperties2 moonvulkan_znewchainarrayVkFormatProperties2
VkFormatProperties2* znewchainarrayVkFormatProperties2(lua_State *L, uint32_t count, int *err);
#define zcheckVkFormatProperties2 moonvulkan_zcheckVkFormatProperties2
VkFormatProperties2* zcheckVkFormatProperties2(lua_State *L, int arg, int *err);
#define zcheckarrayVkFormatProperties2 moonvulkan_zcheckarrayVkFormatProperties2
VkFormatProperties2* zcheckarrayVkFormatProperties2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFormatProperties2 moonvulkan_zinitVkFormatProperties2
int zinitVkFormatProperties2(lua_State *L, VkFormatProperties2* p, int *err);
#define zfreeVkFormatProperties2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFormatProperties2(L, p, count, base) zfreearray((L), (p), sizeof(VkFormatProperties2), (count), (base))
#define zpushVkFormatProperties2 moonvulkan_zpushVkFormatProperties2
int zpushVkFormatProperties2(lua_State *L, const VkFormatProperties2 *p);

#define znewVkImageFormatProperties2(L, err) (VkImageFormatProperties2*)znew((L), VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkImageFormatProperties2), (err))
#define znewarrayVkImageFormatProperties2(L, count, err) (VkImageFormatProperties2*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkImageFormatProperties2), (count), (err))
#define znewchainVkImageFormatProperties2 moonvulkan_znewchainVkImageFormatProperties2
VkImageFormatProperties2* znewchainVkImageFormatProperties2(lua_State *L, int *err);
#define znewchainarrayVkImageFormatProperties2 moonvulkan_znewchainarrayVkImageFormatProperties2
VkImageFormatProperties2* znewchainarrayVkImageFormatProperties2(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageFormatProperties2 moonvulkan_zcheckVkImageFormatProperties2
VkImageFormatProperties2* zcheckVkImageFormatProperties2(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageFormatProperties2 moonvulkan_zcheckarrayVkImageFormatProperties2
VkImageFormatProperties2* zcheckarrayVkImageFormatProperties2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageFormatProperties2 moonvulkan_zinitVkImageFormatProperties2
int zinitVkImageFormatProperties2(lua_State *L, VkImageFormatProperties2* p, int *err);
#define zfreeVkImageFormatProperties2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageFormatProperties2(L, p, count, base) zfreearray((L), (p), sizeof(VkImageFormatProperties2), (count), (base))
#define zpushVkImageFormatProperties2 moonvulkan_zpushVkImageFormatProperties2
int zpushVkImageFormatProperties2(lua_State *L, const VkImageFormatProperties2 *p);

#define znewVkSparseImageFormatProperties2(L, err) (VkSparseImageFormatProperties2*)znew((L), VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkSparseImageFormatProperties2), (err))
#define znewarrayVkSparseImageFormatProperties2(L, count, err) (VkSparseImageFormatProperties2*)znewarray((L), VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkSparseImageFormatProperties2), (count), (err))
#define znewchainVkSparseImageFormatProperties2 moonvulkan_znewchainVkSparseImageFormatProperties2
VkSparseImageFormatProperties2* znewchainVkSparseImageFormatProperties2(lua_State *L, int *err);
#define znewchainarrayVkSparseImageFormatProperties2 moonvulkan_znewchainarrayVkSparseImageFormatProperties2
VkSparseImageFormatProperties2* znewchainarrayVkSparseImageFormatProperties2(lua_State *L, uint32_t count, int *err);
#define zcheckVkSparseImageFormatProperties2 moonvulkan_zcheckVkSparseImageFormatProperties2
VkSparseImageFormatProperties2* zcheckVkSparseImageFormatProperties2(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageFormatProperties2 moonvulkan_zcheckarrayVkSparseImageFormatProperties2
VkSparseImageFormatProperties2* zcheckarrayVkSparseImageFormatProperties2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageFormatProperties2 moonvulkan_zinitVkSparseImageFormatProperties2
int zinitVkSparseImageFormatProperties2(lua_State *L, VkSparseImageFormatProperties2* p, int *err);
#define zfreeVkSparseImageFormatProperties2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSparseImageFormatProperties2(L, p, count, base) zfreearray((L), (p), sizeof(VkSparseImageFormatProperties2), (count), (base))
#define zpushVkSparseImageFormatProperties2 moonvulkan_zpushVkSparseImageFormatProperties2
int zpushVkSparseImageFormatProperties2(lua_State *L, const VkSparseImageFormatProperties2 *p);

#define znewVkPhysicalDeviceMemoryProperties2(L, err) (VkPhysicalDeviceMemoryProperties2*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, sizeof(VkPhysicalDeviceMemoryProperties2), (err))
#define znewarrayVkPhysicalDeviceMemoryProperties2(L, count, err) (VkPhysicalDeviceMemoryProperties2*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, sizeof(VkPhysicalDeviceMemoryProperties2), (count), (err))
#define znewchainVkPhysicalDeviceMemoryProperties2 moonvulkan_znewchainVkPhysicalDeviceMemoryProperties2
VkPhysicalDeviceMemoryProperties2* znewchainVkPhysicalDeviceMemoryProperties2(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceMemoryProperties2 moonvulkan_znewchainarrayVkPhysicalDeviceMemoryProperties2
VkPhysicalDeviceMemoryProperties2* znewchainarrayVkPhysicalDeviceMemoryProperties2(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceMemoryProperties2 moonvulkan_zcheckVkPhysicalDeviceMemoryProperties2
VkPhysicalDeviceMemoryProperties2* zcheckVkPhysicalDeviceMemoryProperties2(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceMemoryProperties2 moonvulkan_zcheckarrayVkPhysicalDeviceMemoryProperties2
VkPhysicalDeviceMemoryProperties2* zcheckarrayVkPhysicalDeviceMemoryProperties2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceMemoryProperties2 moonvulkan_zinitVkPhysicalDeviceMemoryProperties2
int zinitVkPhysicalDeviceMemoryProperties2(lua_State *L, VkPhysicalDeviceMemoryProperties2* p, int *err);
#define zfreeVkPhysicalDeviceMemoryProperties2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceMemoryProperties2(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceMemoryProperties2), (count), (base))
#define zpushVkPhysicalDeviceMemoryProperties2 moonvulkan_zpushVkPhysicalDeviceMemoryProperties2
int zpushVkPhysicalDeviceMemoryProperties2(lua_State *L, const VkPhysicalDeviceMemoryProperties2 *p);

#define znewVkMemoryRequirements2(L, err) (VkMemoryRequirements2*)znew((L), VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, sizeof(VkMemoryRequirements2), (err))
#define znewarrayVkMemoryRequirements2(L, count, err) (VkMemoryRequirements2*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, sizeof(VkMemoryRequirements2), (count), (err))
#define znewchainVkMemoryRequirements2 moonvulkan_znewchainVkMemoryRequirements2
VkMemoryRequirements2* znewchainVkMemoryRequirements2(lua_State *L, int *err);
#define znewchainarrayVkMemoryRequirements2 moonvulkan_znewchainarrayVkMemoryRequirements2
VkMemoryRequirements2* znewchainarrayVkMemoryRequirements2(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryRequirements2 moonvulkan_zcheckVkMemoryRequirements2
VkMemoryRequirements2* zcheckVkMemoryRequirements2(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryRequirements2 moonvulkan_zcheckarrayVkMemoryRequirements2
VkMemoryRequirements2* zcheckarrayVkMemoryRequirements2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryRequirements2 moonvulkan_zinitVkMemoryRequirements2
int zinitVkMemoryRequirements2(lua_State *L, VkMemoryRequirements2* p, int *err);
#define zfreeVkMemoryRequirements2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryRequirements2(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryRequirements2), (count), (base))
#define zpushVkMemoryRequirements2 moonvulkan_zpushVkMemoryRequirements2
int zpushVkMemoryRequirements2(lua_State *L, const VkMemoryRequirements2 *p);

#define znewVkSparseImageMemoryRequirements2(L, err) (VkSparseImageMemoryRequirements2*)znew((L), VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, sizeof(VkSparseImageMemoryRequirements2), (err))
#define znewarrayVkSparseImageMemoryRequirements2(L, count, err) (VkSparseImageMemoryRequirements2*)znewarray((L), VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, sizeof(VkSparseImageMemoryRequirements2), (count), (err))
#define znewchainVkSparseImageMemoryRequirements2 moonvulkan_znewchainVkSparseImageMemoryRequirements2
VkSparseImageMemoryRequirements2* znewchainVkSparseImageMemoryRequirements2(lua_State *L, int *err);
#define znewchainarrayVkSparseImageMemoryRequirements2 moonvulkan_znewchainarrayVkSparseImageMemoryRequirements2
VkSparseImageMemoryRequirements2* znewchainarrayVkSparseImageMemoryRequirements2(lua_State *L, uint32_t count, int *err);
#define zcheckVkSparseImageMemoryRequirements2 moonvulkan_zcheckVkSparseImageMemoryRequirements2
VkSparseImageMemoryRequirements2* zcheckVkSparseImageMemoryRequirements2(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageMemoryRequirements2 moonvulkan_zcheckarrayVkSparseImageMemoryRequirements2
VkSparseImageMemoryRequirements2* zcheckarrayVkSparseImageMemoryRequirements2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageMemoryRequirements2 moonvulkan_zinitVkSparseImageMemoryRequirements2
int zinitVkSparseImageMemoryRequirements2(lua_State *L, VkSparseImageMemoryRequirements2* p, int *err);
#define zfreeVkSparseImageMemoryRequirements2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSparseImageMemoryRequirements2(L, p, count, base) zfreearray((L), (p), sizeof(VkSparseImageMemoryRequirements2), (count), (base))
#define zpushVkSparseImageMemoryRequirements2 moonvulkan_zpushVkSparseImageMemoryRequirements2
int zpushVkSparseImageMemoryRequirements2(lua_State *L, const VkSparseImageMemoryRequirements2 *p);

#define znewVkSurfaceCapabilities2KHR(L, err) (VkSurfaceCapabilities2KHR*)znew((L), VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, sizeof(VkSurfaceCapabilities2KHR), (err))
#define znewarrayVkSurfaceCapabilities2KHR(L, count, err) (VkSurfaceCapabilities2KHR*)znewarray((L), VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, sizeof(VkSurfaceCapabilities2KHR), (count), (err))
#define znewchainVkSurfaceCapabilities2KHR moonvulkan_znewchainVkSurfaceCapabilities2KHR
VkSurfaceCapabilities2KHR* znewchainVkSurfaceCapabilities2KHR(lua_State *L, int *err);
#define znewchainarrayVkSurfaceCapabilities2KHR moonvulkan_znewchainarrayVkSurfaceCapabilities2KHR
VkSurfaceCapabilities2KHR* znewchainarrayVkSurfaceCapabilities2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSurfaceCapabilities2KHR moonvulkan_zcheckVkSurfaceCapabilities2KHR
VkSurfaceCapabilities2KHR* zcheckVkSurfaceCapabilities2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSurfaceCapabilities2KHR moonvulkan_zcheckarrayVkSurfaceCapabilities2KHR
VkSurfaceCapabilities2KHR* zcheckarrayVkSurfaceCapabilities2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSurfaceCapabilities2KHR moonvulkan_zinitVkSurfaceCapabilities2KHR
int zinitVkSurfaceCapabilities2KHR(lua_State *L, VkSurfaceCapabilities2KHR* p, int *err);
#define zfreeVkSurfaceCapabilities2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSurfaceCapabilities2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSurfaceCapabilities2KHR), (count), (base))
#define zpushVkSurfaceCapabilities2KHR moonvulkan_zpushVkSurfaceCapabilities2KHR
int zpushVkSurfaceCapabilities2KHR(lua_State *L, const VkSurfaceCapabilities2KHR *p);

#define znewVkSurfaceFormat2KHR(L, err) (VkSurfaceFormat2KHR*)znew((L), VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, sizeof(VkSurfaceFormat2KHR), (err))
#define znewarrayVkSurfaceFormat2KHR(L, count, err) (VkSurfaceFormat2KHR*)znewarray((L), VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, sizeof(VkSurfaceFormat2KHR), (count), (err))
#define znewchainVkSurfaceFormat2KHR moonvulkan_znewchainVkSurfaceFormat2KHR
VkSurfaceFormat2KHR* znewchainVkSurfaceFormat2KHR(lua_State *L, int *err);
#define znewchainarrayVkSurfaceFormat2KHR moonvulkan_znewchainarrayVkSurfaceFormat2KHR
VkSurfaceFormat2KHR* znewchainarrayVkSurfaceFormat2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSurfaceFormat2KHR moonvulkan_zcheckVkSurfaceFormat2KHR
VkSurfaceFormat2KHR* zcheckVkSurfaceFormat2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSurfaceFormat2KHR moonvulkan_zcheckarrayVkSurfaceFormat2KHR
VkSurfaceFormat2KHR* zcheckarrayVkSurfaceFormat2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSurfaceFormat2KHR moonvulkan_zinitVkSurfaceFormat2KHR
int zinitVkSurfaceFormat2KHR(lua_State *L, VkSurfaceFormat2KHR* p, int *err);
#define zfreeVkSurfaceFormat2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSurfaceFormat2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSurfaceFormat2KHR), (count), (base))
#define zpushVkSurfaceFormat2KHR moonvulkan_zpushVkSurfaceFormat2KHR
int zpushVkSurfaceFormat2KHR(lua_State *L, const VkSurfaceFormat2KHR *p);

#define znewVkQueueFamilyProperties2(L, err) (VkQueueFamilyProperties2*)znew((L), VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, sizeof(VkQueueFamilyProperties2), (err))
#define znewarrayVkQueueFamilyProperties2(L, count, err) (VkQueueFamilyProperties2*)znewarray((L), VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, sizeof(VkQueueFamilyProperties2), (count), (err))
#define znewchainVkQueueFamilyProperties2 moonvulkan_znewchainVkQueueFamilyProperties2
VkQueueFamilyProperties2* znewchainVkQueueFamilyProperties2(lua_State *L, int *err);
#define znewchainarrayVkQueueFamilyProperties2 moonvulkan_znewchainarrayVkQueueFamilyProperties2
VkQueueFamilyProperties2* znewchainarrayVkQueueFamilyProperties2(lua_State *L, uint32_t count, int *err);
#define zcheckVkQueueFamilyProperties2 moonvulkan_zcheckVkQueueFamilyProperties2
VkQueueFamilyProperties2* zcheckVkQueueFamilyProperties2(lua_State *L, int arg, int *err);
#define zcheckarrayVkQueueFamilyProperties2 moonvulkan_zcheckarrayVkQueueFamilyProperties2
VkQueueFamilyProperties2* zcheckarrayVkQueueFamilyProperties2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkQueueFamilyProperties2 moonvulkan_zinitVkQueueFamilyProperties2
int zinitVkQueueFamilyProperties2(lua_State *L, VkQueueFamilyProperties2* p, int *err);
#define zfreeVkQueueFamilyProperties2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkQueueFamilyProperties2(L, p, count, base) zfreearray((L), (p), sizeof(VkQueueFamilyProperties2), (count), (base))
#define zpushVkQueueFamilyProperties2 moonvulkan_zpushVkQueueFamilyProperties2
int zpushVkQueueFamilyProperties2(lua_State *L, const VkQueueFamilyProperties2 *p, uint32_t index); //non-standard

#define znewVkImageFormatListCreateInfo(L, err) (VkImageFormatListCreateInfo*)znew((L), VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, sizeof(VkImageFormatListCreateInfo), (err))
#define znewarrayVkImageFormatListCreateInfo(L, count, err) (VkImageFormatListCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, sizeof(VkImageFormatListCreateInfo), (count), (err))
#define znewchainVkImageFormatListCreateInfo moonvulkan_znewchainVkImageFormatListCreateInfo
VkImageFormatListCreateInfo* znewchainVkImageFormatListCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkImageFormatListCreateInfo moonvulkan_znewchainarrayVkImageFormatListCreateInfo
VkImageFormatListCreateInfo* znewchainarrayVkImageFormatListCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageFormatListCreateInfo moonvulkan_zcheckVkImageFormatListCreateInfo
VkImageFormatListCreateInfo* zcheckVkImageFormatListCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageFormatListCreateInfo moonvulkan_zcheckarrayVkImageFormatListCreateInfo
VkImageFormatListCreateInfo* zcheckarrayVkImageFormatListCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageFormatListCreateInfo moonvulkan_zinitVkImageFormatListCreateInfo
int zinitVkImageFormatListCreateInfo(lua_State *L, VkImageFormatListCreateInfo* p, int *err);
#define zfreeVkImageFormatListCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageFormatListCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkImageFormatListCreateInfo), (count), (base))
#define zpushVkImageFormatListCreateInfo moonvulkan_zpushVkImageFormatListCreateInfo
int zpushVkImageFormatListCreateInfo(lua_State *L, const VkImageFormatListCreateInfo *p);

#define znewVkExternalMemoryImageCreateInfoKHR(L, err) (VkExternalMemoryImageCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR, sizeof(VkExternalMemoryImageCreateInfoKHR), (err))
#define znewarrayVkExternalMemoryImageCreateInfoKHR(L, count, err) (VkExternalMemoryImageCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR, sizeof(VkExternalMemoryImageCreateInfoKHR), (count), (err))
#define znewchainVkExternalMemoryImageCreateInfoKHR moonvulkan_znewchainVkExternalMemoryImageCreateInfoKHR
VkExternalMemoryImageCreateInfoKHR* znewchainVkExternalMemoryImageCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkExternalMemoryImageCreateInfoKHR moonvulkan_znewchainarrayVkExternalMemoryImageCreateInfoKHR
VkExternalMemoryImageCreateInfoKHR* znewchainarrayVkExternalMemoryImageCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExternalMemoryImageCreateInfoKHR moonvulkan_zcheckVkExternalMemoryImageCreateInfoKHR
VkExternalMemoryImageCreateInfoKHR* zcheckVkExternalMemoryImageCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExternalMemoryImageCreateInfoKHR moonvulkan_zcheckarrayVkExternalMemoryImageCreateInfoKHR
VkExternalMemoryImageCreateInfoKHR* zcheckarrayVkExternalMemoryImageCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExternalMemoryImageCreateInfoKHR moonvulkan_zinitVkExternalMemoryImageCreateInfoKHR
int zinitVkExternalMemoryImageCreateInfoKHR(lua_State *L, VkExternalMemoryImageCreateInfoKHR* p, int *err);
#define zfreeVkExternalMemoryImageCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExternalMemoryImageCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExternalMemoryImageCreateInfoKHR), (count), (base))
#define zpushVkExternalMemoryImageCreateInfoKHR moonvulkan_zpushVkExternalMemoryImageCreateInfoKHR
int zpushVkExternalMemoryImageCreateInfoKHR(lua_State *L, const VkExternalMemoryImageCreateInfoKHR *p);

#define znewVkImageCreateInfo(L, err) (VkImageCreateInfo*)znew((L), VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, sizeof(VkImageCreateInfo), (err))
#define znewarrayVkImageCreateInfo(L, count, err) (VkImageCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, sizeof(VkImageCreateInfo), (count), (err))
#define znewchainVkImageCreateInfo moonvulkan_znewchainVkImageCreateInfo
VkImageCreateInfo* znewchainVkImageCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkImageCreateInfo moonvulkan_znewchainarrayVkImageCreateInfo
VkImageCreateInfo* znewchainarrayVkImageCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageCreateInfo moonvulkan_zcheckVkImageCreateInfo
VkImageCreateInfo* zcheckVkImageCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageCreateInfo moonvulkan_zcheckarrayVkImageCreateInfo
VkImageCreateInfo* zcheckarrayVkImageCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageCreateInfo moonvulkan_zinitVkImageCreateInfo
int zinitVkImageCreateInfo(lua_State *L, VkImageCreateInfo* p, int *err);
#define zfreeVkImageCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkImageCreateInfo), (count), (base))
#define zpushVkImageCreateInfo moonvulkan_zpushVkImageCreateInfo
int zpushVkImageCreateInfo(lua_State *L, const VkImageCreateInfo *p);

#define znewVkImageViewUsageCreateInfoKHR(L, err) (VkImageViewUsageCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR, sizeof(VkImageViewUsageCreateInfoKHR), (err))
#define znewarrayVkImageViewUsageCreateInfoKHR(L, count, err) (VkImageViewUsageCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR, sizeof(VkImageViewUsageCreateInfoKHR), (count), (err))
#define znewchainVkImageViewUsageCreateInfoKHR moonvulkan_znewchainVkImageViewUsageCreateInfoKHR
VkImageViewUsageCreateInfoKHR* znewchainVkImageViewUsageCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImageViewUsageCreateInfoKHR moonvulkan_znewchainarrayVkImageViewUsageCreateInfoKHR
VkImageViewUsageCreateInfoKHR* znewchainarrayVkImageViewUsageCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageViewUsageCreateInfoKHR moonvulkan_zcheckVkImageViewUsageCreateInfoKHR
VkImageViewUsageCreateInfoKHR* zcheckVkImageViewUsageCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageViewUsageCreateInfoKHR moonvulkan_zcheckarrayVkImageViewUsageCreateInfoKHR
VkImageViewUsageCreateInfoKHR* zcheckarrayVkImageViewUsageCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageViewUsageCreateInfoKHR moonvulkan_zinitVkImageViewUsageCreateInfoKHR
int zinitVkImageViewUsageCreateInfoKHR(lua_State *L, VkImageViewUsageCreateInfoKHR* p, int *err);
#define zfreeVkImageViewUsageCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageViewUsageCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageViewUsageCreateInfoKHR), (count), (base))
#define zpushVkImageViewUsageCreateInfoKHR moonvulkan_zpushVkImageViewUsageCreateInfoKHR
int zpushVkImageViewUsageCreateInfoKHR(lua_State *L, const VkImageViewUsageCreateInfoKHR *p);

#define znewVkImageViewCreateInfo(L, err) (VkImageViewCreateInfo*)znew((L), VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, sizeof(VkImageViewCreateInfo), (err))
#define znewarrayVkImageViewCreateInfo(L, count, err) (VkImageViewCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, sizeof(VkImageViewCreateInfo), (count), (err))
#define znewchainVkImageViewCreateInfo moonvulkan_znewchainVkImageViewCreateInfo
VkImageViewCreateInfo* znewchainVkImageViewCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkImageViewCreateInfo moonvulkan_znewchainarrayVkImageViewCreateInfo
VkImageViewCreateInfo* znewchainarrayVkImageViewCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageViewCreateInfo moonvulkan_zcheckVkImageViewCreateInfo
VkImageViewCreateInfo* zcheckVkImageViewCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageViewCreateInfo moonvulkan_zcheckarrayVkImageViewCreateInfo
VkImageViewCreateInfo* zcheckarrayVkImageViewCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageViewCreateInfo moonvulkan_zinitVkImageViewCreateInfo
int zinitVkImageViewCreateInfo(lua_State *L, VkImageViewCreateInfo* p, int *err);
#define zfreeVkImageViewCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageViewCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkImageViewCreateInfo), (count), (base))
#define zpushVkImageViewCreateInfo moonvulkan_zpushVkImageViewCreateInfo
int zpushVkImageViewCreateInfo(lua_State *L, const VkImageViewCreateInfo *p);

#define znewVkDescriptorPoolCreateInfo(L, err) (VkDescriptorPoolCreateInfo*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, sizeof(VkDescriptorPoolCreateInfo), (err))
#define znewarrayVkDescriptorPoolCreateInfo(L, count, err) (VkDescriptorPoolCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, sizeof(VkDescriptorPoolCreateInfo), (count), (err))
#define znewchainVkDescriptorPoolCreateInfo moonvulkan_znewchainVkDescriptorPoolCreateInfo
VkDescriptorPoolCreateInfo* znewchainVkDescriptorPoolCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkDescriptorPoolCreateInfo moonvulkan_znewchainarrayVkDescriptorPoolCreateInfo
VkDescriptorPoolCreateInfo* znewchainarrayVkDescriptorPoolCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorPoolCreateInfo moonvulkan_zcheckVkDescriptorPoolCreateInfo
VkDescriptorPoolCreateInfo* zcheckVkDescriptorPoolCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorPoolCreateInfo moonvulkan_zcheckarrayVkDescriptorPoolCreateInfo
VkDescriptorPoolCreateInfo* zcheckarrayVkDescriptorPoolCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorPoolCreateInfo moonvulkan_zinitVkDescriptorPoolCreateInfo
int zinitVkDescriptorPoolCreateInfo(lua_State *L, VkDescriptorPoolCreateInfo* p, int *err);
#define zfreeVkDescriptorPoolCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorPoolCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorPoolCreateInfo), (count), (base))
#define zpushVkDescriptorPoolCreateInfo moonvulkan_zpushVkDescriptorPoolCreateInfo
int zpushVkDescriptorPoolCreateInfo(lua_State *L, const VkDescriptorPoolCreateInfo *p);

#define znewVkDescriptorSetAllocateInfo(L, err) (VkDescriptorSetAllocateInfo*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, sizeof(VkDescriptorSetAllocateInfo), (err))
#define znewarrayVkDescriptorSetAllocateInfo(L, count, err) (VkDescriptorSetAllocateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, sizeof(VkDescriptorSetAllocateInfo), (count), (err))
#define znewchainVkDescriptorSetAllocateInfo moonvulkan_znewchainVkDescriptorSetAllocateInfo
VkDescriptorSetAllocateInfo* znewchainVkDescriptorSetAllocateInfo(lua_State *L, int *err);
#define znewchainarrayVkDescriptorSetAllocateInfo moonvulkan_znewchainarrayVkDescriptorSetAllocateInfo
VkDescriptorSetAllocateInfo* znewchainarrayVkDescriptorSetAllocateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorSetAllocateInfo moonvulkan_zcheckVkDescriptorSetAllocateInfo
VkDescriptorSetAllocateInfo* zcheckVkDescriptorSetAllocateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorSetAllocateInfo moonvulkan_zcheckarrayVkDescriptorSetAllocateInfo
VkDescriptorSetAllocateInfo* zcheckarrayVkDescriptorSetAllocateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorSetAllocateInfo moonvulkan_zinitVkDescriptorSetAllocateInfo
int zinitVkDescriptorSetAllocateInfo(lua_State *L, VkDescriptorSetAllocateInfo* p, int *err);
#define zfreeVkDescriptorSetAllocateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorSetAllocateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorSetAllocateInfo), (count), (base))
#define zpushVkDescriptorSetAllocateInfo moonvulkan_zpushVkDescriptorSetAllocateInfo
int zpushVkDescriptorSetAllocateInfo(lua_State *L, const VkDescriptorSetAllocateInfo *p);

#define znewVkDescriptorSetLayoutCreateInfo(L, err) (VkDescriptorSetLayoutCreateInfo*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, sizeof(VkDescriptorSetLayoutCreateInfo), (err))
#define znewarrayVkDescriptorSetLayoutCreateInfo(L, count, err) (VkDescriptorSetLayoutCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, sizeof(VkDescriptorSetLayoutCreateInfo), (count), (err))
#define znewchainVkDescriptorSetLayoutCreateInfo moonvulkan_znewchainVkDescriptorSetLayoutCreateInfo
VkDescriptorSetLayoutCreateInfo* znewchainVkDescriptorSetLayoutCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkDescriptorSetLayoutCreateInfo moonvulkan_znewchainarrayVkDescriptorSetLayoutCreateInfo
VkDescriptorSetLayoutCreateInfo* znewchainarrayVkDescriptorSetLayoutCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorSetLayoutCreateInfo moonvulkan_zcheckVkDescriptorSetLayoutCreateInfo
VkDescriptorSetLayoutCreateInfo* zcheckVkDescriptorSetLayoutCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorSetLayoutCreateInfo moonvulkan_zcheckarrayVkDescriptorSetLayoutCreateInfo
VkDescriptorSetLayoutCreateInfo* zcheckarrayVkDescriptorSetLayoutCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorSetLayoutCreateInfo moonvulkan_zinitVkDescriptorSetLayoutCreateInfo
int zinitVkDescriptorSetLayoutCreateInfo(lua_State *L, VkDescriptorSetLayoutCreateInfo* p, int *err);
#define zfreeVkDescriptorSetLayoutCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorSetLayoutCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorSetLayoutCreateInfo), (count), (base))
#define zpushVkDescriptorSetLayoutCreateInfo moonvulkan_zpushVkDescriptorSetLayoutCreateInfo
int zpushVkDescriptorSetLayoutCreateInfo(lua_State *L, const VkDescriptorSetLayoutCreateInfo *p);

#define znewVkPipelineLayoutCreateInfo(L, err) (VkPipelineLayoutCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, sizeof(VkPipelineLayoutCreateInfo), (err))
#define znewarrayVkPipelineLayoutCreateInfo(L, count, err) (VkPipelineLayoutCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, sizeof(VkPipelineLayoutCreateInfo), (count), (err))
#define znewchainVkPipelineLayoutCreateInfo moonvulkan_znewchainVkPipelineLayoutCreateInfo
VkPipelineLayoutCreateInfo* znewchainVkPipelineLayoutCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineLayoutCreateInfo moonvulkan_znewchainarrayVkPipelineLayoutCreateInfo
VkPipelineLayoutCreateInfo* znewchainarrayVkPipelineLayoutCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineLayoutCreateInfo moonvulkan_zcheckVkPipelineLayoutCreateInfo
VkPipelineLayoutCreateInfo* zcheckVkPipelineLayoutCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineLayoutCreateInfo moonvulkan_zcheckarrayVkPipelineLayoutCreateInfo
VkPipelineLayoutCreateInfo* zcheckarrayVkPipelineLayoutCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineLayoutCreateInfo moonvulkan_zinitVkPipelineLayoutCreateInfo
int zinitVkPipelineLayoutCreateInfo(lua_State *L, VkPipelineLayoutCreateInfo* p, int *err);
#define zfreeVkPipelineLayoutCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineLayoutCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineLayoutCreateInfo), (count), (base))
#define zpushVkPipelineLayoutCreateInfo moonvulkan_zpushVkPipelineLayoutCreateInfo
int zpushVkPipelineLayoutCreateInfo(lua_State *L, const VkPipelineLayoutCreateInfo *p);

#define znewVkQueryPoolCreateInfo(L, err) (VkQueryPoolCreateInfo*)znew((L), VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, sizeof(VkQueryPoolCreateInfo), (err))
#define znewarrayVkQueryPoolCreateInfo(L, count, err) (VkQueryPoolCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, sizeof(VkQueryPoolCreateInfo), (count), (err))
#define znewchainVkQueryPoolCreateInfo moonvulkan_znewchainVkQueryPoolCreateInfo
VkQueryPoolCreateInfo* znewchainVkQueryPoolCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkQueryPoolCreateInfo moonvulkan_znewchainarrayVkQueryPoolCreateInfo
VkQueryPoolCreateInfo* znewchainarrayVkQueryPoolCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkQueryPoolCreateInfo moonvulkan_zcheckVkQueryPoolCreateInfo
VkQueryPoolCreateInfo* zcheckVkQueryPoolCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkQueryPoolCreateInfo moonvulkan_zcheckarrayVkQueryPoolCreateInfo
VkQueryPoolCreateInfo* zcheckarrayVkQueryPoolCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkQueryPoolCreateInfo moonvulkan_zinitVkQueryPoolCreateInfo
int zinitVkQueryPoolCreateInfo(lua_State *L, VkQueryPoolCreateInfo* p, int *err);
#define zfreeVkQueryPoolCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkQueryPoolCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkQueryPoolCreateInfo), (count), (base))
#define zpushVkQueryPoolCreateInfo moonvulkan_zpushVkQueryPoolCreateInfo
int zpushVkQueryPoolCreateInfo(lua_State *L, const VkQueryPoolCreateInfo *p);

#define znewVkRenderPassInputAttachmentAspectCreateInfoKHR(L, err) (VkRenderPassInputAttachmentAspectCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR), (err))
#define znewarrayVkRenderPassInputAttachmentAspectCreateInfoKHR(L, count, err) (VkRenderPassInputAttachmentAspectCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR, sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR), (count), (err))
#define znewchainVkRenderPassInputAttachmentAspectCreateInfoKHR moonvulkan_znewchainVkRenderPassInputAttachmentAspectCreateInfoKHR
VkRenderPassInputAttachmentAspectCreateInfoKHR* znewchainVkRenderPassInputAttachmentAspectCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRenderPassInputAttachmentAspectCreateInfoKHR moonvulkan_znewchainarrayVkRenderPassInputAttachmentAspectCreateInfoKHR
VkRenderPassInputAttachmentAspectCreateInfoKHR* znewchainarrayVkRenderPassInputAttachmentAspectCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassInputAttachmentAspectCreateInfoKHR moonvulkan_zcheckVkRenderPassInputAttachmentAspectCreateInfoKHR
VkRenderPassInputAttachmentAspectCreateInfoKHR* zcheckVkRenderPassInputAttachmentAspectCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassInputAttachmentAspectCreateInfoKHR moonvulkan_zcheckarrayVkRenderPassInputAttachmentAspectCreateInfoKHR
VkRenderPassInputAttachmentAspectCreateInfoKHR* zcheckarrayVkRenderPassInputAttachmentAspectCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassInputAttachmentAspectCreateInfoKHR moonvulkan_zinitVkRenderPassInputAttachmentAspectCreateInfoKHR
int zinitVkRenderPassInputAttachmentAspectCreateInfoKHR(lua_State *L, VkRenderPassInputAttachmentAspectCreateInfoKHR* p, int *err);
#define zfreeVkRenderPassInputAttachmentAspectCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassInputAttachmentAspectCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR), (count), (base))
#define zpushVkRenderPassInputAttachmentAspectCreateInfoKHR moonvulkan_zpushVkRenderPassInputAttachmentAspectCreateInfoKHR
int zpushVkRenderPassInputAttachmentAspectCreateInfoKHR(lua_State *L, const VkRenderPassInputAttachmentAspectCreateInfoKHR *p);

#define znewVkRenderPassCreateInfo(L, err) (VkRenderPassCreateInfo*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, sizeof(VkRenderPassCreateInfo), (err))
#define znewarrayVkRenderPassCreateInfo(L, count, err) (VkRenderPassCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, sizeof(VkRenderPassCreateInfo), (count), (err))
#define znewchainVkRenderPassCreateInfo moonvulkan_znewchainVkRenderPassCreateInfo
VkRenderPassCreateInfo* znewchainVkRenderPassCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkRenderPassCreateInfo moonvulkan_znewchainarrayVkRenderPassCreateInfo
VkRenderPassCreateInfo* znewchainarrayVkRenderPassCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassCreateInfo moonvulkan_zcheckVkRenderPassCreateInfo
VkRenderPassCreateInfo* zcheckVkRenderPassCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassCreateInfo moonvulkan_zcheckarrayVkRenderPassCreateInfo
VkRenderPassCreateInfo* zcheckarrayVkRenderPassCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassCreateInfo moonvulkan_zinitVkRenderPassCreateInfo
int zinitVkRenderPassCreateInfo(lua_State *L, VkRenderPassCreateInfo* p, int *err);
#define zfreeVkRenderPassCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassCreateInfo), (count), (base))
#define zpushVkRenderPassCreateInfo moonvulkan_zpushVkRenderPassCreateInfo
int zpushVkRenderPassCreateInfo(lua_State *L, const VkRenderPassCreateInfo *p);

#define znewVkFramebufferCreateInfo(L, err) (VkFramebufferCreateInfo*)znew((L), VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, sizeof(VkFramebufferCreateInfo), (err))
#define znewarrayVkFramebufferCreateInfo(L, count, err) (VkFramebufferCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, sizeof(VkFramebufferCreateInfo), (count), (err))
#define znewchainVkFramebufferCreateInfo moonvulkan_znewchainVkFramebufferCreateInfo
VkFramebufferCreateInfo* znewchainVkFramebufferCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkFramebufferCreateInfo moonvulkan_znewchainarrayVkFramebufferCreateInfo
VkFramebufferCreateInfo* znewchainarrayVkFramebufferCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkFramebufferCreateInfo moonvulkan_zcheckVkFramebufferCreateInfo
VkFramebufferCreateInfo* zcheckVkFramebufferCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkFramebufferCreateInfo moonvulkan_zcheckarrayVkFramebufferCreateInfo
VkFramebufferCreateInfo* zcheckarrayVkFramebufferCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFramebufferCreateInfo moonvulkan_zinitVkFramebufferCreateInfo
int zinitVkFramebufferCreateInfo(lua_State *L, VkFramebufferCreateInfo* p, int *err);
#define zfreeVkFramebufferCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFramebufferCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkFramebufferCreateInfo), (count), (base))
#define zpushVkFramebufferCreateInfo moonvulkan_zpushVkFramebufferCreateInfo
int zpushVkFramebufferCreateInfo(lua_State *L, const VkFramebufferCreateInfo *p);

#define znewVkShaderModuleValidationCacheCreateInfoEXT(L, err) (VkShaderModuleValidationCacheCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkShaderModuleValidationCacheCreateInfoEXT), (err))
#define znewarrayVkShaderModuleValidationCacheCreateInfoEXT(L, count, err) (VkShaderModuleValidationCacheCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkShaderModuleValidationCacheCreateInfoEXT), (count), (err))
#define znewchainVkShaderModuleValidationCacheCreateInfoEXT moonvulkan_znewchainVkShaderModuleValidationCacheCreateInfoEXT
VkShaderModuleValidationCacheCreateInfoEXT* znewchainVkShaderModuleValidationCacheCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkShaderModuleValidationCacheCreateInfoEXT moonvulkan_znewchainarrayVkShaderModuleValidationCacheCreateInfoEXT
VkShaderModuleValidationCacheCreateInfoEXT* znewchainarrayVkShaderModuleValidationCacheCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkShaderModuleValidationCacheCreateInfoEXT moonvulkan_zcheckVkShaderModuleValidationCacheCreateInfoEXT
VkShaderModuleValidationCacheCreateInfoEXT* zcheckVkShaderModuleValidationCacheCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkShaderModuleValidationCacheCreateInfoEXT moonvulkan_zcheckarrayVkShaderModuleValidationCacheCreateInfoEXT
VkShaderModuleValidationCacheCreateInfoEXT* zcheckarrayVkShaderModuleValidationCacheCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkShaderModuleValidationCacheCreateInfoEXT moonvulkan_zinitVkShaderModuleValidationCacheCreateInfoEXT
int zinitVkShaderModuleValidationCacheCreateInfoEXT(lua_State *L, VkShaderModuleValidationCacheCreateInfoEXT* p, int *err);
#define zfreeVkShaderModuleValidationCacheCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkShaderModuleValidationCacheCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkShaderModuleValidationCacheCreateInfoEXT), (count), (base))
#define zpushVkShaderModuleValidationCacheCreateInfoEXT moonvulkan_zpushVkShaderModuleValidationCacheCreateInfoEXT
int zpushVkShaderModuleValidationCacheCreateInfoEXT(lua_State *L, const VkShaderModuleValidationCacheCreateInfoEXT *p);

#define znewVkShaderModuleCreateInfo(L, err) (VkShaderModuleCreateInfo*)znew((L), VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, sizeof(VkShaderModuleCreateInfo), (err))
#define znewarrayVkShaderModuleCreateInfo(L, count, err) (VkShaderModuleCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, sizeof(VkShaderModuleCreateInfo), (count), (err))
#define znewchainVkShaderModuleCreateInfo moonvulkan_znewchainVkShaderModuleCreateInfo
VkShaderModuleCreateInfo* znewchainVkShaderModuleCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkShaderModuleCreateInfo moonvulkan_znewchainarrayVkShaderModuleCreateInfo
VkShaderModuleCreateInfo* znewchainarrayVkShaderModuleCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkShaderModuleCreateInfo moonvulkan_zcheckVkShaderModuleCreateInfo
VkShaderModuleCreateInfo* zcheckVkShaderModuleCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkShaderModuleCreateInfo moonvulkan_zcheckarrayVkShaderModuleCreateInfo
VkShaderModuleCreateInfo* zcheckarrayVkShaderModuleCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkShaderModuleCreateInfo moonvulkan_zinitVkShaderModuleCreateInfo
int zinitVkShaderModuleCreateInfo(lua_State *L, VkShaderModuleCreateInfo* p, int *err);
#define zfreeVkShaderModuleCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkShaderModuleCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkShaderModuleCreateInfo), (count), (base))
#define zpushVkShaderModuleCreateInfo moonvulkan_zpushVkShaderModuleCreateInfo
int zpushVkShaderModuleCreateInfo(lua_State *L, const VkShaderModuleCreateInfo *p);

#define znewVkSwapchainCounterCreateInfoEXT(L, err) (VkSwapchainCounterCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, sizeof(VkSwapchainCounterCreateInfoEXT), (err))
#define znewarrayVkSwapchainCounterCreateInfoEXT(L, count, err) (VkSwapchainCounterCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, sizeof(VkSwapchainCounterCreateInfoEXT), (count), (err))
#define znewchainVkSwapchainCounterCreateInfoEXT moonvulkan_znewchainVkSwapchainCounterCreateInfoEXT
VkSwapchainCounterCreateInfoEXT* znewchainVkSwapchainCounterCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkSwapchainCounterCreateInfoEXT moonvulkan_znewchainarrayVkSwapchainCounterCreateInfoEXT
VkSwapchainCounterCreateInfoEXT* znewchainarrayVkSwapchainCounterCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkSwapchainCounterCreateInfoEXT moonvulkan_zcheckVkSwapchainCounterCreateInfoEXT
VkSwapchainCounterCreateInfoEXT* zcheckVkSwapchainCounterCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSwapchainCounterCreateInfoEXT moonvulkan_zcheckarrayVkSwapchainCounterCreateInfoEXT
VkSwapchainCounterCreateInfoEXT* zcheckarrayVkSwapchainCounterCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSwapchainCounterCreateInfoEXT moonvulkan_zinitVkSwapchainCounterCreateInfoEXT
int zinitVkSwapchainCounterCreateInfoEXT(lua_State *L, VkSwapchainCounterCreateInfoEXT* p, int *err);
#define zfreeVkSwapchainCounterCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSwapchainCounterCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkSwapchainCounterCreateInfoEXT), (count), (base))
#define zpushVkSwapchainCounterCreateInfoEXT moonvulkan_zpushVkSwapchainCounterCreateInfoEXT
int zpushVkSwapchainCounterCreateInfoEXT(lua_State *L, const VkSwapchainCounterCreateInfoEXT *p);

#define znewVkSwapchainCreateInfoKHR(L, err) (VkSwapchainCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkSwapchainCreateInfoKHR), (err))
#define znewarrayVkSwapchainCreateInfoKHR(L, count, err) (VkSwapchainCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkSwapchainCreateInfoKHR), (count), (err))
#define znewchainVkSwapchainCreateInfoKHR moonvulkan_znewchainVkSwapchainCreateInfoKHR
VkSwapchainCreateInfoKHR* znewchainVkSwapchainCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkSwapchainCreateInfoKHR moonvulkan_znewchainarrayVkSwapchainCreateInfoKHR
VkSwapchainCreateInfoKHR* znewchainarrayVkSwapchainCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSwapchainCreateInfoKHR moonvulkan_zcheckVkSwapchainCreateInfoKHR
VkSwapchainCreateInfoKHR* zcheckVkSwapchainCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSwapchainCreateInfoKHR moonvulkan_zcheckarrayVkSwapchainCreateInfoKHR
VkSwapchainCreateInfoKHR* zcheckarrayVkSwapchainCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSwapchainCreateInfoKHR moonvulkan_zinitVkSwapchainCreateInfoKHR
int zinitVkSwapchainCreateInfoKHR(lua_State *L, VkSwapchainCreateInfoKHR* p, int *err);
#define zfreeVkSwapchainCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSwapchainCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSwapchainCreateInfoKHR), (count), (base))
#define zpushVkSwapchainCreateInfoKHR moonvulkan_zpushVkSwapchainCreateInfoKHR
int zpushVkSwapchainCreateInfoKHR(lua_State *L, const VkSwapchainCreateInfoKHR *p);

#define znewVkPipelineCacheCreateInfo(L, err) (VkPipelineCacheCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, sizeof(VkPipelineCacheCreateInfo), (err))
#define znewarrayVkPipelineCacheCreateInfo(L, count, err) (VkPipelineCacheCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, sizeof(VkPipelineCacheCreateInfo), (count), (err))
#define znewchainVkPipelineCacheCreateInfo moonvulkan_znewchainVkPipelineCacheCreateInfo
VkPipelineCacheCreateInfo* znewchainVkPipelineCacheCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineCacheCreateInfo moonvulkan_znewchainarrayVkPipelineCacheCreateInfo
VkPipelineCacheCreateInfo* znewchainarrayVkPipelineCacheCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineCacheCreateInfo moonvulkan_zcheckVkPipelineCacheCreateInfo
VkPipelineCacheCreateInfo* zcheckVkPipelineCacheCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineCacheCreateInfo moonvulkan_zcheckarrayVkPipelineCacheCreateInfo
VkPipelineCacheCreateInfo* zcheckarrayVkPipelineCacheCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineCacheCreateInfo moonvulkan_zinitVkPipelineCacheCreateInfo
int zinitVkPipelineCacheCreateInfo(lua_State *L, VkPipelineCacheCreateInfo* p, int *err);
#define zfreeVkPipelineCacheCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineCacheCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineCacheCreateInfo), (count), (base))
#define zpushVkPipelineCacheCreateInfo moonvulkan_zpushVkPipelineCacheCreateInfo
int zpushVkPipelineCacheCreateInfo(lua_State *L, const VkPipelineCacheCreateInfo *p);

#define znewVkValidationCacheCreateInfoEXT(L, err) (VkValidationCacheCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkValidationCacheCreateInfoEXT), (err))
#define znewarrayVkValidationCacheCreateInfoEXT(L, count, err) (VkValidationCacheCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkValidationCacheCreateInfoEXT), (count), (err))
#define znewchainVkValidationCacheCreateInfoEXT moonvulkan_znewchainVkValidationCacheCreateInfoEXT
VkValidationCacheCreateInfoEXT* znewchainVkValidationCacheCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkValidationCacheCreateInfoEXT moonvulkan_znewchainarrayVkValidationCacheCreateInfoEXT
VkValidationCacheCreateInfoEXT* znewchainarrayVkValidationCacheCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkValidationCacheCreateInfoEXT moonvulkan_zcheckVkValidationCacheCreateInfoEXT
VkValidationCacheCreateInfoEXT* zcheckVkValidationCacheCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkValidationCacheCreateInfoEXT moonvulkan_zcheckarrayVkValidationCacheCreateInfoEXT
VkValidationCacheCreateInfoEXT* zcheckarrayVkValidationCacheCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkValidationCacheCreateInfoEXT moonvulkan_zinitVkValidationCacheCreateInfoEXT
int zinitVkValidationCacheCreateInfoEXT(lua_State *L, VkValidationCacheCreateInfoEXT* p, int *err);
#define zfreeVkValidationCacheCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkValidationCacheCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkValidationCacheCreateInfoEXT), (count), (base))
#define zpushVkValidationCacheCreateInfoEXT moonvulkan_zpushVkValidationCacheCreateInfoEXT
int zpushVkValidationCacheCreateInfoEXT(lua_State *L, const VkValidationCacheCreateInfoEXT *p);

#define znewVkSamplerReductionModeCreateInfo(L, err) (VkSamplerReductionModeCreateInfo*)znew((L), VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, sizeof(VkSamplerReductionModeCreateInfo), (err))
#define znewarrayVkSamplerReductionModeCreateInfo(L, count, err) (VkSamplerReductionModeCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, sizeof(VkSamplerReductionModeCreateInfo), (count), (err))
#define znewchainVkSamplerReductionModeCreateInfo moonvulkan_znewchainVkSamplerReductionModeCreateInfo
VkSamplerReductionModeCreateInfo* znewchainVkSamplerReductionModeCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkSamplerReductionModeCreateInfo moonvulkan_znewchainarrayVkSamplerReductionModeCreateInfo
VkSamplerReductionModeCreateInfo* znewchainarrayVkSamplerReductionModeCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSamplerReductionModeCreateInfo moonvulkan_zcheckVkSamplerReductionModeCreateInfo
VkSamplerReductionModeCreateInfo* zcheckVkSamplerReductionModeCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSamplerReductionModeCreateInfo moonvulkan_zcheckarrayVkSamplerReductionModeCreateInfo
VkSamplerReductionModeCreateInfo* zcheckarrayVkSamplerReductionModeCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSamplerReductionModeCreateInfo moonvulkan_zinitVkSamplerReductionModeCreateInfo
int zinitVkSamplerReductionModeCreateInfo(lua_State *L, VkSamplerReductionModeCreateInfo* p, int *err);
#define zfreeVkSamplerReductionModeCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSamplerReductionModeCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSamplerReductionModeCreateInfo), (count), (base))
#define zpushVkSamplerReductionModeCreateInfo moonvulkan_zpushVkSamplerReductionModeCreateInfo
int zpushVkSamplerReductionModeCreateInfo(lua_State *L, const VkSamplerReductionModeCreateInfo *p);

#define znewVkSamplerYcbcrConversionInfoKHR(L, err) (VkSamplerYcbcrConversionInfoKHR*)znew((L), VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR, sizeof(VkSamplerYcbcrConversionInfoKHR), (err))
#define znewarrayVkSamplerYcbcrConversionInfoKHR(L, count, err) (VkSamplerYcbcrConversionInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR, sizeof(VkSamplerYcbcrConversionInfoKHR), (count), (err))
#define znewchainVkSamplerYcbcrConversionInfoKHR moonvulkan_znewchainVkSamplerYcbcrConversionInfoKHR
VkSamplerYcbcrConversionInfoKHR* znewchainVkSamplerYcbcrConversionInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkSamplerYcbcrConversionInfoKHR moonvulkan_znewchainarrayVkSamplerYcbcrConversionInfoKHR
VkSamplerYcbcrConversionInfoKHR* znewchainarrayVkSamplerYcbcrConversionInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSamplerYcbcrConversionInfoKHR moonvulkan_zcheckVkSamplerYcbcrConversionInfoKHR
VkSamplerYcbcrConversionInfoKHR* zcheckVkSamplerYcbcrConversionInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSamplerYcbcrConversionInfoKHR moonvulkan_zcheckarrayVkSamplerYcbcrConversionInfoKHR
VkSamplerYcbcrConversionInfoKHR* zcheckarrayVkSamplerYcbcrConversionInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSamplerYcbcrConversionInfoKHR moonvulkan_zinitVkSamplerYcbcrConversionInfoKHR
int zinitVkSamplerYcbcrConversionInfoKHR(lua_State *L, VkSamplerYcbcrConversionInfoKHR* p, int *err);
#define zfreeVkSamplerYcbcrConversionInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSamplerYcbcrConversionInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSamplerYcbcrConversionInfoKHR), (count), (base))
#define zpushVkSamplerYcbcrConversionInfoKHR moonvulkan_zpushVkSamplerYcbcrConversionInfoKHR
int zpushVkSamplerYcbcrConversionInfoKHR(lua_State *L, const VkSamplerYcbcrConversionInfoKHR *p);

#define znewVkSamplerCreateInfo(L, err) (VkSamplerCreateInfo*)znew((L), VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, sizeof(VkSamplerCreateInfo), (err))
#define znewarrayVkSamplerCreateInfo(L, count, err) (VkSamplerCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, sizeof(VkSamplerCreateInfo), (count), (err))
#define znewchainVkSamplerCreateInfo moonvulkan_znewchainVkSamplerCreateInfo
VkSamplerCreateInfo* znewchainVkSamplerCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkSamplerCreateInfo moonvulkan_znewchainarrayVkSamplerCreateInfo
VkSamplerCreateInfo* znewchainarrayVkSamplerCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSamplerCreateInfo moonvulkan_zcheckVkSamplerCreateInfo
VkSamplerCreateInfo* zcheckVkSamplerCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSamplerCreateInfo moonvulkan_zcheckarrayVkSamplerCreateInfo
VkSamplerCreateInfo* zcheckarrayVkSamplerCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSamplerCreateInfo moonvulkan_zinitVkSamplerCreateInfo
int zinitVkSamplerCreateInfo(lua_State *L, VkSamplerCreateInfo* p, int *err);
#define zfreeVkSamplerCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSamplerCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSamplerCreateInfo), (count), (base))
#define zpushVkSamplerCreateInfo moonvulkan_zpushVkSamplerCreateInfo
int zpushVkSamplerCreateInfo(lua_State *L, const VkSamplerCreateInfo *p);

#define znewVkSamplerYcbcrConversionCreateInfoKHR(L, err) (VkSamplerYcbcrConversionCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR, sizeof(VkSamplerYcbcrConversionCreateInfoKHR), (err))
#define znewarrayVkSamplerYcbcrConversionCreateInfoKHR(L, count, err) (VkSamplerYcbcrConversionCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR, sizeof(VkSamplerYcbcrConversionCreateInfoKHR), (count), (err))
#define znewchainVkSamplerYcbcrConversionCreateInfoKHR moonvulkan_znewchainVkSamplerYcbcrConversionCreateInfoKHR
VkSamplerYcbcrConversionCreateInfoKHR* znewchainVkSamplerYcbcrConversionCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkSamplerYcbcrConversionCreateInfoKHR moonvulkan_znewchainarrayVkSamplerYcbcrConversionCreateInfoKHR
VkSamplerYcbcrConversionCreateInfoKHR* znewchainarrayVkSamplerYcbcrConversionCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSamplerYcbcrConversionCreateInfoKHR moonvulkan_zcheckVkSamplerYcbcrConversionCreateInfoKHR
VkSamplerYcbcrConversionCreateInfoKHR* zcheckVkSamplerYcbcrConversionCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSamplerYcbcrConversionCreateInfoKHR moonvulkan_zcheckarrayVkSamplerYcbcrConversionCreateInfoKHR
VkSamplerYcbcrConversionCreateInfoKHR* zcheckarrayVkSamplerYcbcrConversionCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSamplerYcbcrConversionCreateInfoKHR moonvulkan_zinitVkSamplerYcbcrConversionCreateInfoKHR
int zinitVkSamplerYcbcrConversionCreateInfoKHR(lua_State *L, VkSamplerYcbcrConversionCreateInfoKHR* p, int *err);
#define zfreeVkSamplerYcbcrConversionCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSamplerYcbcrConversionCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSamplerYcbcrConversionCreateInfoKHR), (count), (base))
#define zpushVkSamplerYcbcrConversionCreateInfoKHR moonvulkan_zpushVkSamplerYcbcrConversionCreateInfoKHR
int zpushVkSamplerYcbcrConversionCreateInfoKHR(lua_State *L, const VkSamplerYcbcrConversionCreateInfoKHR *p);

#define znewVkEventCreateInfo(L, err) (VkEventCreateInfo*)znew((L), VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, sizeof(VkEventCreateInfo), (err))
#define znewarrayVkEventCreateInfo(L, count, err) (VkEventCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, sizeof(VkEventCreateInfo), (count), (err))
#define znewchainVkEventCreateInfo moonvulkan_znewchainVkEventCreateInfo
VkEventCreateInfo* znewchainVkEventCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkEventCreateInfo moonvulkan_znewchainarrayVkEventCreateInfo
VkEventCreateInfo* znewchainarrayVkEventCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkEventCreateInfo moonvulkan_zcheckVkEventCreateInfo
VkEventCreateInfo* zcheckVkEventCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkEventCreateInfo moonvulkan_zcheckarrayVkEventCreateInfo
VkEventCreateInfo* zcheckarrayVkEventCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkEventCreateInfo moonvulkan_zinitVkEventCreateInfo
int zinitVkEventCreateInfo(lua_State *L, VkEventCreateInfo* p, int *err);
#define zfreeVkEventCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkEventCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkEventCreateInfo), (count), (base))
#define zpushVkEventCreateInfo moonvulkan_zpushVkEventCreateInfo
int zpushVkEventCreateInfo(lua_State *L, const VkEventCreateInfo *p);

#define znewVkExportFenceCreateInfoKHR(L, err) (VkExportFenceCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR, sizeof(VkExportFenceCreateInfoKHR), (err))
#define znewarrayVkExportFenceCreateInfoKHR(L, count, err) (VkExportFenceCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR, sizeof(VkExportFenceCreateInfoKHR), (count), (err))
#define znewchainVkExportFenceCreateInfoKHR moonvulkan_znewchainVkExportFenceCreateInfoKHR
VkExportFenceCreateInfoKHR* znewchainVkExportFenceCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkExportFenceCreateInfoKHR moonvulkan_znewchainarrayVkExportFenceCreateInfoKHR
VkExportFenceCreateInfoKHR* znewchainarrayVkExportFenceCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExportFenceCreateInfoKHR moonvulkan_zcheckVkExportFenceCreateInfoKHR
VkExportFenceCreateInfoKHR* zcheckVkExportFenceCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExportFenceCreateInfoKHR moonvulkan_zcheckarrayVkExportFenceCreateInfoKHR
VkExportFenceCreateInfoKHR* zcheckarrayVkExportFenceCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExportFenceCreateInfoKHR moonvulkan_zinitVkExportFenceCreateInfoKHR
int zinitVkExportFenceCreateInfoKHR(lua_State *L, VkExportFenceCreateInfoKHR* p, int *err);
#define zfreeVkExportFenceCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExportFenceCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExportFenceCreateInfoKHR), (count), (base))
#define zpushVkExportFenceCreateInfoKHR moonvulkan_zpushVkExportFenceCreateInfoKHR
int zpushVkExportFenceCreateInfoKHR(lua_State *L, const VkExportFenceCreateInfoKHR *p);

#define znewVkFenceCreateInfo(L, err) (VkFenceCreateInfo*)znew((L), VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, sizeof(VkFenceCreateInfo), (err))
#define znewarrayVkFenceCreateInfo(L, count, err) (VkFenceCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, sizeof(VkFenceCreateInfo), (count), (err))
#define znewchainVkFenceCreateInfo moonvulkan_znewchainVkFenceCreateInfo
VkFenceCreateInfo* znewchainVkFenceCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkFenceCreateInfo moonvulkan_znewchainarrayVkFenceCreateInfo
VkFenceCreateInfo* znewchainarrayVkFenceCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkFenceCreateInfo moonvulkan_zcheckVkFenceCreateInfo
VkFenceCreateInfo* zcheckVkFenceCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkFenceCreateInfo moonvulkan_zcheckarrayVkFenceCreateInfo
VkFenceCreateInfo* zcheckarrayVkFenceCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFenceCreateInfo moonvulkan_zinitVkFenceCreateInfo
int zinitVkFenceCreateInfo(lua_State *L, VkFenceCreateInfo* p, int *err);
#define zfreeVkFenceCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFenceCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkFenceCreateInfo), (count), (base))
#define zpushVkFenceCreateInfo moonvulkan_zpushVkFenceCreateInfo
int zpushVkFenceCreateInfo(lua_State *L, const VkFenceCreateInfo *p);

#define znewVkExportSemaphoreCreateInfoKHR(L, err) (VkExportSemaphoreCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR, sizeof(VkExportSemaphoreCreateInfoKHR), (err))
#define znewarrayVkExportSemaphoreCreateInfoKHR(L, count, err) (VkExportSemaphoreCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR, sizeof(VkExportSemaphoreCreateInfoKHR), (count), (err))
#define znewchainVkExportSemaphoreCreateInfoKHR moonvulkan_znewchainVkExportSemaphoreCreateInfoKHR
VkExportSemaphoreCreateInfoKHR* znewchainVkExportSemaphoreCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkExportSemaphoreCreateInfoKHR moonvulkan_znewchainarrayVkExportSemaphoreCreateInfoKHR
VkExportSemaphoreCreateInfoKHR* znewchainarrayVkExportSemaphoreCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExportSemaphoreCreateInfoKHR moonvulkan_zcheckVkExportSemaphoreCreateInfoKHR
VkExportSemaphoreCreateInfoKHR* zcheckVkExportSemaphoreCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExportSemaphoreCreateInfoKHR moonvulkan_zcheckarrayVkExportSemaphoreCreateInfoKHR
VkExportSemaphoreCreateInfoKHR* zcheckarrayVkExportSemaphoreCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExportSemaphoreCreateInfoKHR moonvulkan_zinitVkExportSemaphoreCreateInfoKHR
int zinitVkExportSemaphoreCreateInfoKHR(lua_State *L, VkExportSemaphoreCreateInfoKHR* p, int *err);
#define zfreeVkExportSemaphoreCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExportSemaphoreCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExportSemaphoreCreateInfoKHR), (count), (base))
#define zpushVkExportSemaphoreCreateInfoKHR moonvulkan_zpushVkExportSemaphoreCreateInfoKHR
int zpushVkExportSemaphoreCreateInfoKHR(lua_State *L, const VkExportSemaphoreCreateInfoKHR *p);

#define znewVkSemaphoreCreateInfo(L, err) (VkSemaphoreCreateInfo*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, sizeof(VkSemaphoreCreateInfo), (err))
#define znewarrayVkSemaphoreCreateInfo(L, count, err) (VkSemaphoreCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, sizeof(VkSemaphoreCreateInfo), (count), (err))
#define znewchainVkSemaphoreCreateInfo moonvulkan_znewchainVkSemaphoreCreateInfo
VkSemaphoreCreateInfo* znewchainVkSemaphoreCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreCreateInfo moonvulkan_znewchainarrayVkSemaphoreCreateInfo
VkSemaphoreCreateInfo* znewchainarrayVkSemaphoreCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreCreateInfo moonvulkan_zcheckVkSemaphoreCreateInfo
VkSemaphoreCreateInfo* zcheckVkSemaphoreCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreCreateInfo moonvulkan_zcheckarrayVkSemaphoreCreateInfo
VkSemaphoreCreateInfo* zcheckarrayVkSemaphoreCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreCreateInfo moonvulkan_zinitVkSemaphoreCreateInfo
int zinitVkSemaphoreCreateInfo(lua_State *L, VkSemaphoreCreateInfo* p, int *err);
#define zfreeVkSemaphoreCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreCreateInfo), (count), (base))
#define zpushVkSemaphoreCreateInfo moonvulkan_zpushVkSemaphoreCreateInfo
int zpushVkSemaphoreCreateInfo(lua_State *L, const VkSemaphoreCreateInfo *p);

#define znewVkDisplaySurfaceCreateInfoKHR(L, err) (VkDisplaySurfaceCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, sizeof(VkDisplaySurfaceCreateInfoKHR), (err))
#define znewarrayVkDisplaySurfaceCreateInfoKHR(L, count, err) (VkDisplaySurfaceCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, sizeof(VkDisplaySurfaceCreateInfoKHR), (count), (err))
#define znewchainVkDisplaySurfaceCreateInfoKHR moonvulkan_znewchainVkDisplaySurfaceCreateInfoKHR
VkDisplaySurfaceCreateInfoKHR* znewchainVkDisplaySurfaceCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDisplaySurfaceCreateInfoKHR moonvulkan_znewchainarrayVkDisplaySurfaceCreateInfoKHR
VkDisplaySurfaceCreateInfoKHR* znewchainarrayVkDisplaySurfaceCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplaySurfaceCreateInfoKHR moonvulkan_zcheckVkDisplaySurfaceCreateInfoKHR
VkDisplaySurfaceCreateInfoKHR* zcheckVkDisplaySurfaceCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplaySurfaceCreateInfoKHR moonvulkan_zcheckarrayVkDisplaySurfaceCreateInfoKHR
VkDisplaySurfaceCreateInfoKHR* zcheckarrayVkDisplaySurfaceCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplaySurfaceCreateInfoKHR moonvulkan_zinitVkDisplaySurfaceCreateInfoKHR
int zinitVkDisplaySurfaceCreateInfoKHR(lua_State *L, VkDisplaySurfaceCreateInfoKHR* p, int *err);
#define zfreeVkDisplaySurfaceCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplaySurfaceCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplaySurfaceCreateInfoKHR), (count), (base))
#define zpushVkDisplaySurfaceCreateInfoKHR moonvulkan_zpushVkDisplaySurfaceCreateInfoKHR
int zpushVkDisplaySurfaceCreateInfoKHR(lua_State *L, const VkDisplaySurfaceCreateInfoKHR *p);

#define znewVkDescriptorUpdateTemplateCreateInfoKHR(L, err) (VkDescriptorUpdateTemplateCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR), (err))
#define znewarrayVkDescriptorUpdateTemplateCreateInfoKHR(L, count, err) (VkDescriptorUpdateTemplateCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR, sizeof(VkDescriptorUpdateTemplateCreateInfoKHR), (count), (err))
#define znewchainVkDescriptorUpdateTemplateCreateInfoKHR moonvulkan_znewchainVkDescriptorUpdateTemplateCreateInfoKHR
VkDescriptorUpdateTemplateCreateInfoKHR* znewchainVkDescriptorUpdateTemplateCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDescriptorUpdateTemplateCreateInfoKHR moonvulkan_znewchainarrayVkDescriptorUpdateTemplateCreateInfoKHR
VkDescriptorUpdateTemplateCreateInfoKHR* znewchainarrayVkDescriptorUpdateTemplateCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorUpdateTemplateCreateInfoKHR moonvulkan_zcheckVkDescriptorUpdateTemplateCreateInfoKHR
VkDescriptorUpdateTemplateCreateInfoKHR* zcheckVkDescriptorUpdateTemplateCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorUpdateTemplateCreateInfoKHR moonvulkan_zcheckarrayVkDescriptorUpdateTemplateCreateInfoKHR
VkDescriptorUpdateTemplateCreateInfoKHR* zcheckarrayVkDescriptorUpdateTemplateCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorUpdateTemplateCreateInfoKHR moonvulkan_zinitVkDescriptorUpdateTemplateCreateInfoKHR
int zinitVkDescriptorUpdateTemplateCreateInfoKHR(lua_State *L, VkDescriptorUpdateTemplateCreateInfoKHR* p, int *err);
#define zfreeVkDescriptorUpdateTemplateCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorUpdateTemplateCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorUpdateTemplateCreateInfoKHR), (count), (base))
#define zpushVkDescriptorUpdateTemplateCreateInfoKHR moonvulkan_zpushVkDescriptorUpdateTemplateCreateInfoKHR
int zpushVkDescriptorUpdateTemplateCreateInfoKHR(lua_State *L, const VkDescriptorUpdateTemplateCreateInfoKHR *p);

#define znewVkDebugUtilsMessengerCreateInfoEXT(L, err) (VkDebugUtilsMessengerCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, sizeof(VkDebugUtilsMessengerCreateInfoEXT), (err))
#define znewarrayVkDebugUtilsMessengerCreateInfoEXT(L, count, err) (VkDebugUtilsMessengerCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, sizeof(VkDebugUtilsMessengerCreateInfoEXT), (count), (err))
#define znewchainVkDebugUtilsMessengerCreateInfoEXT moonvulkan_znewchainVkDebugUtilsMessengerCreateInfoEXT
VkDebugUtilsMessengerCreateInfoEXT* znewchainVkDebugUtilsMessengerCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDebugUtilsMessengerCreateInfoEXT moonvulkan_znewchainarrayVkDebugUtilsMessengerCreateInfoEXT
VkDebugUtilsMessengerCreateInfoEXT* znewchainarrayVkDebugUtilsMessengerCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDebugUtilsMessengerCreateInfoEXT moonvulkan_zcheckVkDebugUtilsMessengerCreateInfoEXT
VkDebugUtilsMessengerCreateInfoEXT* zcheckVkDebugUtilsMessengerCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDebugUtilsMessengerCreateInfoEXT moonvulkan_zcheckarrayVkDebugUtilsMessengerCreateInfoEXT
VkDebugUtilsMessengerCreateInfoEXT* zcheckarrayVkDebugUtilsMessengerCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDebugUtilsMessengerCreateInfoEXT moonvulkan_zinitVkDebugUtilsMessengerCreateInfoEXT
int zinitVkDebugUtilsMessengerCreateInfoEXT(lua_State *L, VkDebugUtilsMessengerCreateInfoEXT* p, int *err);
#define zfreeVkDebugUtilsMessengerCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDebugUtilsMessengerCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDebugUtilsMessengerCreateInfoEXT), (count), (base))
#define zpushVkDebugUtilsMessengerCreateInfoEXT moonvulkan_zpushVkDebugUtilsMessengerCreateInfoEXT
int zpushVkDebugUtilsMessengerCreateInfoEXT(lua_State *L, const VkDebugUtilsMessengerCreateInfoEXT *p);

#define znewVkMemoryBarrier(L, err) (VkMemoryBarrier*)znew((L), VK_STRUCTURE_TYPE_MEMORY_BARRIER, sizeof(VkMemoryBarrier), (err))
#define znewarrayVkMemoryBarrier(L, count, err) (VkMemoryBarrier*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_BARRIER, sizeof(VkMemoryBarrier), (count), (err))
#define znewchainVkMemoryBarrier moonvulkan_znewchainVkMemoryBarrier
VkMemoryBarrier* znewchainVkMemoryBarrier(lua_State *L, int *err);
#define znewchainarrayVkMemoryBarrier moonvulkan_znewchainarrayVkMemoryBarrier
VkMemoryBarrier* znewchainarrayVkMemoryBarrier(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryBarrier moonvulkan_zcheckVkMemoryBarrier
VkMemoryBarrier* zcheckVkMemoryBarrier(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryBarrier moonvulkan_zcheckarrayVkMemoryBarrier
VkMemoryBarrier* zcheckarrayVkMemoryBarrier(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryBarrier moonvulkan_zinitVkMemoryBarrier
int zinitVkMemoryBarrier(lua_State *L, VkMemoryBarrier* p, int *err);
#define zfreeVkMemoryBarrier(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryBarrier(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryBarrier), (count), (base))
#define zpushVkMemoryBarrier moonvulkan_zpushVkMemoryBarrier
int zpushVkMemoryBarrier(lua_State *L, const VkMemoryBarrier *p);

#define znewVkBufferMemoryBarrier(L, err) (VkBufferMemoryBarrier*)znew((L), VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, sizeof(VkBufferMemoryBarrier), (err))
#define znewarrayVkBufferMemoryBarrier(L, count, err) (VkBufferMemoryBarrier*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, sizeof(VkBufferMemoryBarrier), (count), (err))
#define znewchainVkBufferMemoryBarrier moonvulkan_znewchainVkBufferMemoryBarrier
VkBufferMemoryBarrier* znewchainVkBufferMemoryBarrier(lua_State *L, int *err);
#define znewchainarrayVkBufferMemoryBarrier moonvulkan_znewchainarrayVkBufferMemoryBarrier
VkBufferMemoryBarrier* znewchainarrayVkBufferMemoryBarrier(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferMemoryBarrier moonvulkan_zcheckVkBufferMemoryBarrier
VkBufferMemoryBarrier* zcheckVkBufferMemoryBarrier(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferMemoryBarrier moonvulkan_zcheckarrayVkBufferMemoryBarrier
VkBufferMemoryBarrier* zcheckarrayVkBufferMemoryBarrier(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferMemoryBarrier moonvulkan_zinitVkBufferMemoryBarrier
int zinitVkBufferMemoryBarrier(lua_State *L, VkBufferMemoryBarrier* p, int *err);
#define zfreeVkBufferMemoryBarrier(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferMemoryBarrier(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferMemoryBarrier), (count), (base))
#define zpushVkBufferMemoryBarrier moonvulkan_zpushVkBufferMemoryBarrier
int zpushVkBufferMemoryBarrier(lua_State *L, const VkBufferMemoryBarrier *p);

#define znewVkImageMemoryBarrier(L, err) (VkImageMemoryBarrier*)znew((L), VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, sizeof(VkImageMemoryBarrier), (err))
#define znewarrayVkImageMemoryBarrier(L, count, err) (VkImageMemoryBarrier*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, sizeof(VkImageMemoryBarrier), (count), (err))
#define znewchainVkImageMemoryBarrier moonvulkan_znewchainVkImageMemoryBarrier
VkImageMemoryBarrier* znewchainVkImageMemoryBarrier(lua_State *L, int *err);
#define znewchainarrayVkImageMemoryBarrier moonvulkan_znewchainarrayVkImageMemoryBarrier
VkImageMemoryBarrier* znewchainarrayVkImageMemoryBarrier(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageMemoryBarrier moonvulkan_zcheckVkImageMemoryBarrier
VkImageMemoryBarrier* zcheckVkImageMemoryBarrier(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageMemoryBarrier moonvulkan_zcheckarrayVkImageMemoryBarrier
VkImageMemoryBarrier* zcheckarrayVkImageMemoryBarrier(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageMemoryBarrier moonvulkan_zinitVkImageMemoryBarrier
int zinitVkImageMemoryBarrier(lua_State *L, VkImageMemoryBarrier* p, int *err);
#define zfreeVkImageMemoryBarrier(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageMemoryBarrier(L, p, count, base) zfreearray((L), (p), sizeof(VkImageMemoryBarrier), (count), (base))
#define zpushVkImageMemoryBarrier moonvulkan_zpushVkImageMemoryBarrier
int zpushVkImageMemoryBarrier(lua_State *L, const VkImageMemoryBarrier *p);

#define znewVkBufferMemoryRequirementsInfo2KHR(L, err) (VkBufferMemoryRequirementsInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR, sizeof(VkBufferMemoryRequirementsInfo2KHR), (err))
#define znewarrayVkBufferMemoryRequirementsInfo2KHR(L, count, err) (VkBufferMemoryRequirementsInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR, sizeof(VkBufferMemoryRequirementsInfo2KHR), (count), (err))
#define znewchainVkBufferMemoryRequirementsInfo2KHR moonvulkan_znewchainVkBufferMemoryRequirementsInfo2KHR
VkBufferMemoryRequirementsInfo2KHR* znewchainVkBufferMemoryRequirementsInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkBufferMemoryRequirementsInfo2KHR moonvulkan_znewchainarrayVkBufferMemoryRequirementsInfo2KHR
VkBufferMemoryRequirementsInfo2KHR* znewchainarrayVkBufferMemoryRequirementsInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferMemoryRequirementsInfo2KHR moonvulkan_zcheckVkBufferMemoryRequirementsInfo2KHR
VkBufferMemoryRequirementsInfo2KHR* zcheckVkBufferMemoryRequirementsInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferMemoryRequirementsInfo2KHR moonvulkan_zcheckarrayVkBufferMemoryRequirementsInfo2KHR
VkBufferMemoryRequirementsInfo2KHR* zcheckarrayVkBufferMemoryRequirementsInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferMemoryRequirementsInfo2KHR moonvulkan_zinitVkBufferMemoryRequirementsInfo2KHR
int zinitVkBufferMemoryRequirementsInfo2KHR(lua_State *L, VkBufferMemoryRequirementsInfo2KHR* p, int *err);
#define zfreeVkBufferMemoryRequirementsInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferMemoryRequirementsInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferMemoryRequirementsInfo2KHR), (count), (base))
#define zpushVkBufferMemoryRequirementsInfo2KHR moonvulkan_zpushVkBufferMemoryRequirementsInfo2KHR
int zpushVkBufferMemoryRequirementsInfo2KHR(lua_State *L, const VkBufferMemoryRequirementsInfo2KHR *p);

#define znewVkImagePlaneMemoryRequirementsInfoKHR(L, err) (VkImagePlaneMemoryRequirementsInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR, sizeof(VkImagePlaneMemoryRequirementsInfoKHR), (err))
#define znewarrayVkImagePlaneMemoryRequirementsInfoKHR(L, count, err) (VkImagePlaneMemoryRequirementsInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR, sizeof(VkImagePlaneMemoryRequirementsInfoKHR), (count), (err))
#define znewchainVkImagePlaneMemoryRequirementsInfoKHR moonvulkan_znewchainVkImagePlaneMemoryRequirementsInfoKHR
VkImagePlaneMemoryRequirementsInfoKHR* znewchainVkImagePlaneMemoryRequirementsInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImagePlaneMemoryRequirementsInfoKHR moonvulkan_znewchainarrayVkImagePlaneMemoryRequirementsInfoKHR
VkImagePlaneMemoryRequirementsInfoKHR* znewchainarrayVkImagePlaneMemoryRequirementsInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImagePlaneMemoryRequirementsInfoKHR moonvulkan_zcheckVkImagePlaneMemoryRequirementsInfoKHR
VkImagePlaneMemoryRequirementsInfoKHR* zcheckVkImagePlaneMemoryRequirementsInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImagePlaneMemoryRequirementsInfoKHR moonvulkan_zcheckarrayVkImagePlaneMemoryRequirementsInfoKHR
VkImagePlaneMemoryRequirementsInfoKHR* zcheckarrayVkImagePlaneMemoryRequirementsInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImagePlaneMemoryRequirementsInfoKHR moonvulkan_zinitVkImagePlaneMemoryRequirementsInfoKHR
int zinitVkImagePlaneMemoryRequirementsInfoKHR(lua_State *L, VkImagePlaneMemoryRequirementsInfoKHR* p, int *err);
#define zfreeVkImagePlaneMemoryRequirementsInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImagePlaneMemoryRequirementsInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImagePlaneMemoryRequirementsInfoKHR), (count), (base))
#define zpushVkImagePlaneMemoryRequirementsInfoKHR moonvulkan_zpushVkImagePlaneMemoryRequirementsInfoKHR
int zpushVkImagePlaneMemoryRequirementsInfoKHR(lua_State *L, const VkImagePlaneMemoryRequirementsInfoKHR *p);

#define znewVkImageMemoryRequirementsInfo2KHR(L, err) (VkImageMemoryRequirementsInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR, sizeof(VkImageMemoryRequirementsInfo2KHR), (err))
#define znewarrayVkImageMemoryRequirementsInfo2KHR(L, count, err) (VkImageMemoryRequirementsInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR, sizeof(VkImageMemoryRequirementsInfo2KHR), (count), (err))
#define znewchainVkImageMemoryRequirementsInfo2KHR moonvulkan_znewchainVkImageMemoryRequirementsInfo2KHR
VkImageMemoryRequirementsInfo2KHR* znewchainVkImageMemoryRequirementsInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkImageMemoryRequirementsInfo2KHR moonvulkan_znewchainarrayVkImageMemoryRequirementsInfo2KHR
VkImageMemoryRequirementsInfo2KHR* znewchainarrayVkImageMemoryRequirementsInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageMemoryRequirementsInfo2KHR moonvulkan_zcheckVkImageMemoryRequirementsInfo2KHR
VkImageMemoryRequirementsInfo2KHR* zcheckVkImageMemoryRequirementsInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageMemoryRequirementsInfo2KHR moonvulkan_zcheckarrayVkImageMemoryRequirementsInfo2KHR
VkImageMemoryRequirementsInfo2KHR* zcheckarrayVkImageMemoryRequirementsInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageMemoryRequirementsInfo2KHR moonvulkan_zinitVkImageMemoryRequirementsInfo2KHR
int zinitVkImageMemoryRequirementsInfo2KHR(lua_State *L, VkImageMemoryRequirementsInfo2KHR* p, int *err);
#define zfreeVkImageMemoryRequirementsInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageMemoryRequirementsInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageMemoryRequirementsInfo2KHR), (count), (base))
#define zpushVkImageMemoryRequirementsInfo2KHR moonvulkan_zpushVkImageMemoryRequirementsInfo2KHR
int zpushVkImageMemoryRequirementsInfo2KHR(lua_State *L, const VkImageMemoryRequirementsInfo2KHR *p);

#define znewVkImageSparseMemoryRequirementsInfo2KHR(L, err) (VkImageSparseMemoryRequirementsInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR, sizeof(VkImageSparseMemoryRequirementsInfo2KHR), (err))
#define znewarrayVkImageSparseMemoryRequirementsInfo2KHR(L, count, err) (VkImageSparseMemoryRequirementsInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR, sizeof(VkImageSparseMemoryRequirementsInfo2KHR), (count), (err))
#define znewchainVkImageSparseMemoryRequirementsInfo2KHR moonvulkan_znewchainVkImageSparseMemoryRequirementsInfo2KHR
VkImageSparseMemoryRequirementsInfo2KHR* znewchainVkImageSparseMemoryRequirementsInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkImageSparseMemoryRequirementsInfo2KHR moonvulkan_znewchainarrayVkImageSparseMemoryRequirementsInfo2KHR
VkImageSparseMemoryRequirementsInfo2KHR* znewchainarrayVkImageSparseMemoryRequirementsInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageSparseMemoryRequirementsInfo2KHR moonvulkan_zcheckVkImageSparseMemoryRequirementsInfo2KHR
VkImageSparseMemoryRequirementsInfo2KHR* zcheckVkImageSparseMemoryRequirementsInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageSparseMemoryRequirementsInfo2KHR moonvulkan_zcheckarrayVkImageSparseMemoryRequirementsInfo2KHR
VkImageSparseMemoryRequirementsInfo2KHR* zcheckarrayVkImageSparseMemoryRequirementsInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageSparseMemoryRequirementsInfo2KHR moonvulkan_zinitVkImageSparseMemoryRequirementsInfo2KHR
int zinitVkImageSparseMemoryRequirementsInfo2KHR(lua_State *L, VkImageSparseMemoryRequirementsInfo2KHR* p, int *err);
#define zfreeVkImageSparseMemoryRequirementsInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageSparseMemoryRequirementsInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageSparseMemoryRequirementsInfo2KHR), (count), (base))
#define zpushVkImageSparseMemoryRequirementsInfo2KHR moonvulkan_zpushVkImageSparseMemoryRequirementsInfo2KHR
int zpushVkImageSparseMemoryRequirementsInfo2KHR(lua_State *L, const VkImageSparseMemoryRequirementsInfo2KHR *p);

#define znewVkDeviceQueueInfo2(L, err) (VkDeviceQueueInfo2*)znew((L), VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, sizeof(VkDeviceQueueInfo2), (err))
#define znewarrayVkDeviceQueueInfo2(L, count, err) (VkDeviceQueueInfo2*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, sizeof(VkDeviceQueueInfo2), (count), (err))
#define znewchainVkDeviceQueueInfo2 moonvulkan_znewchainVkDeviceQueueInfo2
VkDeviceQueueInfo2* znewchainVkDeviceQueueInfo2(lua_State *L, int *err);
#define znewchainarrayVkDeviceQueueInfo2 moonvulkan_znewchainarrayVkDeviceQueueInfo2
VkDeviceQueueInfo2* znewchainarrayVkDeviceQueueInfo2(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceQueueInfo2 moonvulkan_zcheckVkDeviceQueueInfo2
VkDeviceQueueInfo2* zcheckVkDeviceQueueInfo2(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceQueueInfo2 moonvulkan_zcheckarrayVkDeviceQueueInfo2
VkDeviceQueueInfo2* zcheckarrayVkDeviceQueueInfo2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceQueueInfo2 moonvulkan_zinitVkDeviceQueueInfo2
int zinitVkDeviceQueueInfo2(lua_State *L, VkDeviceQueueInfo2* p, int *err);
#define zfreeVkDeviceQueueInfo2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceQueueInfo2(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceQueueInfo2), (count), (base))
#define zpushVkDeviceQueueInfo2 moonvulkan_zpushVkDeviceQueueInfo2
int zpushVkDeviceQueueInfo2(lua_State *L, const VkDeviceQueueInfo2 *p);

#define znewVkMemoryAllocateInfo(L, err) (VkMemoryAllocateInfo*)znew((L), VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, sizeof(VkMemoryAllocateInfo), (err))
#define znewarrayVkMemoryAllocateInfo(L, count, err) (VkMemoryAllocateInfo*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, sizeof(VkMemoryAllocateInfo), (count), (err))
#define znewchainVkMemoryAllocateInfo moonvulkan_znewchainVkMemoryAllocateInfo
VkMemoryAllocateInfo* znewchainVkMemoryAllocateInfo(lua_State *L, int *err);
#define znewchainarrayVkMemoryAllocateInfo moonvulkan_znewchainarrayVkMemoryAllocateInfo
VkMemoryAllocateInfo* znewchainarrayVkMemoryAllocateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryAllocateInfo moonvulkan_zcheckVkMemoryAllocateInfo
VkMemoryAllocateInfo* zcheckVkMemoryAllocateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryAllocateInfo moonvulkan_zcheckarrayVkMemoryAllocateInfo
VkMemoryAllocateInfo* zcheckarrayVkMemoryAllocateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryAllocateInfo moonvulkan_zinitVkMemoryAllocateInfo
int zinitVkMemoryAllocateInfo(lua_State *L, VkMemoryAllocateInfo* p, int *err);
#define zfreeVkMemoryAllocateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryAllocateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryAllocateInfo), (count), (base))
#define zpushVkMemoryAllocateInfo moonvulkan_zpushVkMemoryAllocateInfo
int zpushVkMemoryAllocateInfo(lua_State *L, const VkMemoryAllocateInfo *p);

#define znewVkMemoryDedicatedAllocateInfoKHR(L, err) (VkMemoryDedicatedAllocateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR, sizeof(VkMemoryDedicatedAllocateInfoKHR), (err))
#define znewarrayVkMemoryDedicatedAllocateInfoKHR(L, count, err) (VkMemoryDedicatedAllocateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR, sizeof(VkMemoryDedicatedAllocateInfoKHR), (count), (err))
#define znewchainVkMemoryDedicatedAllocateInfoKHR moonvulkan_znewchainVkMemoryDedicatedAllocateInfoKHR
VkMemoryDedicatedAllocateInfoKHR* znewchainVkMemoryDedicatedAllocateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryDedicatedAllocateInfoKHR moonvulkan_znewchainarrayVkMemoryDedicatedAllocateInfoKHR
VkMemoryDedicatedAllocateInfoKHR* znewchainarrayVkMemoryDedicatedAllocateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryDedicatedAllocateInfoKHR moonvulkan_zcheckVkMemoryDedicatedAllocateInfoKHR
VkMemoryDedicatedAllocateInfoKHR* zcheckVkMemoryDedicatedAllocateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryDedicatedAllocateInfoKHR moonvulkan_zcheckarrayVkMemoryDedicatedAllocateInfoKHR
VkMemoryDedicatedAllocateInfoKHR* zcheckarrayVkMemoryDedicatedAllocateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryDedicatedAllocateInfoKHR moonvulkan_zinitVkMemoryDedicatedAllocateInfoKHR
int zinitVkMemoryDedicatedAllocateInfoKHR(lua_State *L, VkMemoryDedicatedAllocateInfoKHR* p, int *err);
#define zfreeVkMemoryDedicatedAllocateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryDedicatedAllocateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryDedicatedAllocateInfoKHR), (count), (base))
#define zpushVkMemoryDedicatedAllocateInfoKHR moonvulkan_zpushVkMemoryDedicatedAllocateInfoKHR
int zpushVkMemoryDedicatedAllocateInfoKHR(lua_State *L, const VkMemoryDedicatedAllocateInfoKHR *p);

#define znewVkExportMemoryAllocateInfoKHR(L, err) (VkExportMemoryAllocateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR, sizeof(VkExportMemoryAllocateInfoKHR), (err))
#define znewarrayVkExportMemoryAllocateInfoKHR(L, count, err) (VkExportMemoryAllocateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR, sizeof(VkExportMemoryAllocateInfoKHR), (count), (err))
#define znewchainVkExportMemoryAllocateInfoKHR moonvulkan_znewchainVkExportMemoryAllocateInfoKHR
VkExportMemoryAllocateInfoKHR* znewchainVkExportMemoryAllocateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkExportMemoryAllocateInfoKHR moonvulkan_znewchainarrayVkExportMemoryAllocateInfoKHR
VkExportMemoryAllocateInfoKHR* znewchainarrayVkExportMemoryAllocateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExportMemoryAllocateInfoKHR moonvulkan_zcheckVkExportMemoryAllocateInfoKHR
VkExportMemoryAllocateInfoKHR* zcheckVkExportMemoryAllocateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExportMemoryAllocateInfoKHR moonvulkan_zcheckarrayVkExportMemoryAllocateInfoKHR
VkExportMemoryAllocateInfoKHR* zcheckarrayVkExportMemoryAllocateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExportMemoryAllocateInfoKHR moonvulkan_zinitVkExportMemoryAllocateInfoKHR
int zinitVkExportMemoryAllocateInfoKHR(lua_State *L, VkExportMemoryAllocateInfoKHR* p, int *err);
#define zfreeVkExportMemoryAllocateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExportMemoryAllocateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExportMemoryAllocateInfoKHR), (count), (base))
#define zpushVkExportMemoryAllocateInfoKHR moonvulkan_zpushVkExportMemoryAllocateInfoKHR
int zpushVkExportMemoryAllocateInfoKHR(lua_State *L, const VkExportMemoryAllocateInfoKHR *p);

#define znewVkImportMemoryFdInfoKHR(L, err) (VkImportMemoryFdInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, sizeof(VkImportMemoryFdInfoKHR), (err))
#define znewarrayVkImportMemoryFdInfoKHR(L, count, err) (VkImportMemoryFdInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, sizeof(VkImportMemoryFdInfoKHR), (count), (err))
#define znewchainVkImportMemoryFdInfoKHR moonvulkan_znewchainVkImportMemoryFdInfoKHR
VkImportMemoryFdInfoKHR* znewchainVkImportMemoryFdInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImportMemoryFdInfoKHR moonvulkan_znewchainarrayVkImportMemoryFdInfoKHR
VkImportMemoryFdInfoKHR* znewchainarrayVkImportMemoryFdInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportMemoryFdInfoKHR moonvulkan_zcheckVkImportMemoryFdInfoKHR
VkImportMemoryFdInfoKHR* zcheckVkImportMemoryFdInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportMemoryFdInfoKHR moonvulkan_zcheckarrayVkImportMemoryFdInfoKHR
VkImportMemoryFdInfoKHR* zcheckarrayVkImportMemoryFdInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportMemoryFdInfoKHR moonvulkan_zinitVkImportMemoryFdInfoKHR
int zinitVkImportMemoryFdInfoKHR(lua_State *L, VkImportMemoryFdInfoKHR* p, int *err);
#define zfreeVkImportMemoryFdInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportMemoryFdInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImportMemoryFdInfoKHR), (count), (base))
#define zpushVkImportMemoryFdInfoKHR moonvulkan_zpushVkImportMemoryFdInfoKHR
int zpushVkImportMemoryFdInfoKHR(lua_State *L, const VkImportMemoryFdInfoKHR *p);

#define znewVkMappedMemoryRange(L, err) (VkMappedMemoryRange*)znew((L), VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, sizeof(VkMappedMemoryRange), (err))
#define znewarrayVkMappedMemoryRange(L, count, err) (VkMappedMemoryRange*)znewarray((L), VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, sizeof(VkMappedMemoryRange), (count), (err))
#define znewchainVkMappedMemoryRange moonvulkan_znewchainVkMappedMemoryRange
VkMappedMemoryRange* znewchainVkMappedMemoryRange(lua_State *L, int *err);
#define znewchainarrayVkMappedMemoryRange moonvulkan_znewchainarrayVkMappedMemoryRange
VkMappedMemoryRange* znewchainarrayVkMappedMemoryRange(lua_State *L, uint32_t count, int *err);
#define zcheckVkMappedMemoryRange moonvulkan_zcheckVkMappedMemoryRange
VkMappedMemoryRange* zcheckVkMappedMemoryRange(lua_State *L, int arg, int *err);
#define zcheckarrayVkMappedMemoryRange moonvulkan_zcheckarrayVkMappedMemoryRange
VkMappedMemoryRange* zcheckarrayVkMappedMemoryRange(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMappedMemoryRange moonvulkan_zinitVkMappedMemoryRange
int zinitVkMappedMemoryRange(lua_State *L, VkMappedMemoryRange* p, int *err);
#define zfreeVkMappedMemoryRange(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMappedMemoryRange(L, p, count, base) zfreearray((L), (p), sizeof(VkMappedMemoryRange), (count), (base))
#define zpushVkMappedMemoryRange moonvulkan_zpushVkMappedMemoryRange
int zpushVkMappedMemoryRange(lua_State *L, const VkMappedMemoryRange *p);

#define znewVkHdrMetadataEXT(L, err) (VkHdrMetadataEXT*)znew((L), VK_STRUCTURE_TYPE_HDR_METADATA_EXT, sizeof(VkHdrMetadataEXT), (err))
#define znewarrayVkHdrMetadataEXT(L, count, err) (VkHdrMetadataEXT*)znewarray((L), VK_STRUCTURE_TYPE_HDR_METADATA_EXT, sizeof(VkHdrMetadataEXT), (count), (err))
#define znewchainVkHdrMetadataEXT moonvulkan_znewchainVkHdrMetadataEXT
VkHdrMetadataEXT* znewchainVkHdrMetadataEXT(lua_State *L, int *err);
#define znewchainarrayVkHdrMetadataEXT moonvulkan_znewchainarrayVkHdrMetadataEXT
VkHdrMetadataEXT* znewchainarrayVkHdrMetadataEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkHdrMetadataEXT moonvulkan_zcheckVkHdrMetadataEXT
VkHdrMetadataEXT* zcheckVkHdrMetadataEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkHdrMetadataEXT moonvulkan_zcheckarrayVkHdrMetadataEXT
VkHdrMetadataEXT* zcheckarrayVkHdrMetadataEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkHdrMetadataEXT moonvulkan_zinitVkHdrMetadataEXT
int zinitVkHdrMetadataEXT(lua_State *L, VkHdrMetadataEXT* p, int *err);
#define zfreeVkHdrMetadataEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkHdrMetadataEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkHdrMetadataEXT), (count), (base))
#define zpushVkHdrMetadataEXT moonvulkan_zpushVkHdrMetadataEXT
int zpushVkHdrMetadataEXT(lua_State *L, const VkHdrMetadataEXT *p);

#define znewVkSubmitInfo(L, err) (VkSubmitInfo*)znew((L), VK_STRUCTURE_TYPE_SUBMIT_INFO, sizeof(VkSubmitInfo), (err))
#define znewarrayVkSubmitInfo(L, count, err) (VkSubmitInfo*)znewarray((L), VK_STRUCTURE_TYPE_SUBMIT_INFO, sizeof(VkSubmitInfo), (count), (err))
#define znewchainVkSubmitInfo moonvulkan_znewchainVkSubmitInfo
VkSubmitInfo* znewchainVkSubmitInfo(lua_State *L, int *err);
#define znewchainarrayVkSubmitInfo moonvulkan_znewchainarrayVkSubmitInfo
VkSubmitInfo* znewchainarrayVkSubmitInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubmitInfo moonvulkan_zcheckVkSubmitInfo
VkSubmitInfo* zcheckVkSubmitInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubmitInfo moonvulkan_zcheckarrayVkSubmitInfo
VkSubmitInfo* zcheckarrayVkSubmitInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubmitInfo moonvulkan_zinitVkSubmitInfo
int zinitVkSubmitInfo(lua_State *L, VkSubmitInfo* p, int *err);
#define zfreeVkSubmitInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubmitInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSubmitInfo), (count), (base))
#define zpushVkSubmitInfo moonvulkan_zpushVkSubmitInfo
int zpushVkSubmitInfo(lua_State *L, const VkSubmitInfo *p);

#define znewVkPresentRegionsKHR(L, err) (VkPresentRegionsKHR*)znew((L), VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, sizeof(VkPresentRegionsKHR), (err))
#define znewarrayVkPresentRegionsKHR(L, count, err) (VkPresentRegionsKHR*)znewarray((L), VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, sizeof(VkPresentRegionsKHR), (count), (err))
#define znewchainVkPresentRegionsKHR moonvulkan_znewchainVkPresentRegionsKHR
VkPresentRegionsKHR* znewchainVkPresentRegionsKHR(lua_State *L, int *err);
#define znewchainarrayVkPresentRegionsKHR moonvulkan_znewchainarrayVkPresentRegionsKHR
VkPresentRegionsKHR* znewchainarrayVkPresentRegionsKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPresentRegionsKHR moonvulkan_zcheckVkPresentRegionsKHR
VkPresentRegionsKHR* zcheckVkPresentRegionsKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPresentRegionsKHR moonvulkan_zcheckarrayVkPresentRegionsKHR
VkPresentRegionsKHR* zcheckarrayVkPresentRegionsKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPresentRegionsKHR moonvulkan_zinitVkPresentRegionsKHR
int zinitVkPresentRegionsKHR(lua_State *L, VkPresentRegionsKHR* p, int *err);
#define zfreeVkPresentRegionsKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPresentRegionsKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPresentRegionsKHR), (count), (base))
#define zpushVkPresentRegionsKHR moonvulkan_zpushVkPresentRegionsKHR
int zpushVkPresentRegionsKHR(lua_State *L, const VkPresentRegionsKHR *p);

#define znewVkDisplayPresentInfoKHR(L, err) (VkDisplayPresentInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, sizeof(VkDisplayPresentInfoKHR), (err))
#define znewarrayVkDisplayPresentInfoKHR(L, count, err) (VkDisplayPresentInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, sizeof(VkDisplayPresentInfoKHR), (count), (err))
#define znewchainVkDisplayPresentInfoKHR moonvulkan_znewchainVkDisplayPresentInfoKHR
VkDisplayPresentInfoKHR* znewchainVkDisplayPresentInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayPresentInfoKHR moonvulkan_znewchainarrayVkDisplayPresentInfoKHR
VkDisplayPresentInfoKHR* znewchainarrayVkDisplayPresentInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayPresentInfoKHR moonvulkan_zcheckVkDisplayPresentInfoKHR
VkDisplayPresentInfoKHR* zcheckVkDisplayPresentInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPresentInfoKHR moonvulkan_zcheckarrayVkDisplayPresentInfoKHR
VkDisplayPresentInfoKHR* zcheckarrayVkDisplayPresentInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPresentInfoKHR moonvulkan_zinitVkDisplayPresentInfoKHR
int zinitVkDisplayPresentInfoKHR(lua_State *L, VkDisplayPresentInfoKHR* p, int *err);
#define zfreeVkDisplayPresentInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayPresentInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayPresentInfoKHR), (count), (base))
#define zpushVkDisplayPresentInfoKHR moonvulkan_zpushVkDisplayPresentInfoKHR
int zpushVkDisplayPresentInfoKHR(lua_State *L, const VkDisplayPresentInfoKHR *p);

#define znewVkPresentInfoKHR(L, err) (VkPresentInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, sizeof(VkPresentInfoKHR), (err))
#define znewarrayVkPresentInfoKHR(L, count, err) (VkPresentInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, sizeof(VkPresentInfoKHR), (count), (err))
#define znewchainVkPresentInfoKHR moonvulkan_znewchainVkPresentInfoKHR
VkPresentInfoKHR* znewchainVkPresentInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPresentInfoKHR moonvulkan_znewchainarrayVkPresentInfoKHR
VkPresentInfoKHR* znewchainarrayVkPresentInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPresentInfoKHR moonvulkan_zcheckVkPresentInfoKHR
VkPresentInfoKHR* zcheckVkPresentInfoKHR(lua_State *L, int arg, int *err, int results); //non-standard
#define zcheckarrayVkPresentInfoKHR moonvulkan_zcheckarrayVkPresentInfoKHR
VkPresentInfoKHR* zcheckarrayVkPresentInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPresentInfoKHR moonvulkan_zinitVkPresentInfoKHR
int zinitVkPresentInfoKHR(lua_State *L, VkPresentInfoKHR* p, int *err);
#define zfreeVkPresentInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPresentInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPresentInfoKHR), (count), (base))
#define zpushVkPresentInfoKHR moonvulkan_zpushVkPresentInfoKHR
int zpushVkPresentInfoKHR(lua_State *L, const VkPresentInfoKHR *p);

#define znewVkBindSparseInfo(L, err) (VkBindSparseInfo*)znew((L), VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, sizeof(VkBindSparseInfo), (err))
#define znewarrayVkBindSparseInfo(L, count, err) (VkBindSparseInfo*)znewarray((L), VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, sizeof(VkBindSparseInfo), (count), (err))
#define znewchainVkBindSparseInfo moonvulkan_znewchainVkBindSparseInfo
VkBindSparseInfo* znewchainVkBindSparseInfo(lua_State *L, int *err);
#define znewchainarrayVkBindSparseInfo moonvulkan_znewchainarrayVkBindSparseInfo
VkBindSparseInfo* znewchainarrayVkBindSparseInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindSparseInfo moonvulkan_zcheckVkBindSparseInfo
VkBindSparseInfo* zcheckVkBindSparseInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindSparseInfo moonvulkan_zcheckarrayVkBindSparseInfo
VkBindSparseInfo* zcheckarrayVkBindSparseInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindSparseInfo moonvulkan_zinitVkBindSparseInfo
int zinitVkBindSparseInfo(lua_State *L, VkBindSparseInfo* p, int *err);
#define zfreeVkBindSparseInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindSparseInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBindSparseInfo), (count), (base))
#define zpushVkBindSparseInfo moonvulkan_zpushVkBindSparseInfo
int zpushVkBindSparseInfo(lua_State *L, const VkBindSparseInfo *p);

#define znewVkBindBufferMemoryInfo(L, err) (VkBindBufferMemoryInfo*)znew((L), VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, sizeof(VkBindBufferMemoryInfo), (err))
#define znewarrayVkBindBufferMemoryInfo(L, count, err) (VkBindBufferMemoryInfo*)znewarray((L), VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, sizeof(VkBindBufferMemoryInfo), (count), (err))
#define znewchainVkBindBufferMemoryInfo moonvulkan_znewchainVkBindBufferMemoryInfo
VkBindBufferMemoryInfo* znewchainVkBindBufferMemoryInfo(lua_State *L, int *err);
#define znewchainarrayVkBindBufferMemoryInfo moonvulkan_znewchainarrayVkBindBufferMemoryInfo
VkBindBufferMemoryInfo* znewchainarrayVkBindBufferMemoryInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindBufferMemoryInfo moonvulkan_zcheckVkBindBufferMemoryInfo
VkBindBufferMemoryInfo* zcheckVkBindBufferMemoryInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindBufferMemoryInfo moonvulkan_zcheckarrayVkBindBufferMemoryInfo
VkBindBufferMemoryInfo* zcheckarrayVkBindBufferMemoryInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindBufferMemoryInfo moonvulkan_zinitVkBindBufferMemoryInfo
int zinitVkBindBufferMemoryInfo(lua_State *L, VkBindBufferMemoryInfo* p, int *err);
#define zfreeVkBindBufferMemoryInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindBufferMemoryInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBindBufferMemoryInfo), (count), (base))
#define zpushVkBindBufferMemoryInfo moonvulkan_zpushVkBindBufferMemoryInfo
int zpushVkBindBufferMemoryInfo(lua_State *L, const VkBindBufferMemoryInfo *p);

#define znewVkBindImagePlaneMemoryInfoKHR(L, err) (VkBindImagePlaneMemoryInfoKHR*)znew((L), VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR, sizeof(VkBindImagePlaneMemoryInfoKHR), (err))
#define znewarrayVkBindImagePlaneMemoryInfoKHR(L, count, err) (VkBindImagePlaneMemoryInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR, sizeof(VkBindImagePlaneMemoryInfoKHR), (count), (err))
#define znewchainVkBindImagePlaneMemoryInfoKHR moonvulkan_znewchainVkBindImagePlaneMemoryInfoKHR
VkBindImagePlaneMemoryInfoKHR* znewchainVkBindImagePlaneMemoryInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkBindImagePlaneMemoryInfoKHR moonvulkan_znewchainarrayVkBindImagePlaneMemoryInfoKHR
VkBindImagePlaneMemoryInfoKHR* znewchainarrayVkBindImagePlaneMemoryInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindImagePlaneMemoryInfoKHR moonvulkan_zcheckVkBindImagePlaneMemoryInfoKHR
VkBindImagePlaneMemoryInfoKHR* zcheckVkBindImagePlaneMemoryInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindImagePlaneMemoryInfoKHR moonvulkan_zcheckarrayVkBindImagePlaneMemoryInfoKHR
VkBindImagePlaneMemoryInfoKHR* zcheckarrayVkBindImagePlaneMemoryInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindImagePlaneMemoryInfoKHR moonvulkan_zinitVkBindImagePlaneMemoryInfoKHR
int zinitVkBindImagePlaneMemoryInfoKHR(lua_State *L, VkBindImagePlaneMemoryInfoKHR* p, int *err);
#define zfreeVkBindImagePlaneMemoryInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindImagePlaneMemoryInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBindImagePlaneMemoryInfoKHR), (count), (base))
#define zpushVkBindImagePlaneMemoryInfoKHR moonvulkan_zpushVkBindImagePlaneMemoryInfoKHR
int zpushVkBindImagePlaneMemoryInfoKHR(lua_State *L, const VkBindImagePlaneMemoryInfoKHR *p);

#define znewVkBindImageMemoryInfo(L, err) (VkBindImageMemoryInfo*)znew((L), VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, sizeof(VkBindImageMemoryInfo), (err))
#define znewarrayVkBindImageMemoryInfo(L, count, err) (VkBindImageMemoryInfo*)znewarray((L), VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, sizeof(VkBindImageMemoryInfo), (count), (err))
#define znewchainVkBindImageMemoryInfo moonvulkan_znewchainVkBindImageMemoryInfo
VkBindImageMemoryInfo* znewchainVkBindImageMemoryInfo(lua_State *L, int *err);
#define znewchainarrayVkBindImageMemoryInfo moonvulkan_znewchainarrayVkBindImageMemoryInfo
VkBindImageMemoryInfo* znewchainarrayVkBindImageMemoryInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindImageMemoryInfo moonvulkan_zcheckVkBindImageMemoryInfo
VkBindImageMemoryInfo* zcheckVkBindImageMemoryInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindImageMemoryInfo moonvulkan_zcheckarrayVkBindImageMemoryInfo
VkBindImageMemoryInfo* zcheckarrayVkBindImageMemoryInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindImageMemoryInfo moonvulkan_zinitVkBindImageMemoryInfo
int zinitVkBindImageMemoryInfo(lua_State *L, VkBindImageMemoryInfo* p, int *err);
#define zfreeVkBindImageMemoryInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindImageMemoryInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBindImageMemoryInfo), (count), (base))
#define zpushVkBindImageMemoryInfo moonvulkan_zpushVkBindImageMemoryInfo
int zpushVkBindImageMemoryInfo(lua_State *L, const VkBindImageMemoryInfo *p);

#define znewVkWriteDescriptorSet(L, err) (VkWriteDescriptorSet*)znew((L), VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, sizeof(VkWriteDescriptorSet), (err))
#define znewarrayVkWriteDescriptorSet(L, count, err) (VkWriteDescriptorSet*)znewarray((L), VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, sizeof(VkWriteDescriptorSet), (count), (err))
#define znewchainVkWriteDescriptorSet moonvulkan_znewchainVkWriteDescriptorSet
VkWriteDescriptorSet* znewchainVkWriteDescriptorSet(lua_State *L, int *err);
#define znewchainarrayVkWriteDescriptorSet moonvulkan_znewchainarrayVkWriteDescriptorSet
VkWriteDescriptorSet* znewchainarrayVkWriteDescriptorSet(lua_State *L, uint32_t count, int *err);
#define zcheckVkWriteDescriptorSet moonvulkan_zcheckVkWriteDescriptorSet
VkWriteDescriptorSet* zcheckVkWriteDescriptorSet(lua_State *L, int arg, int *err);
#define zcheckarrayVkWriteDescriptorSet moonvulkan_zcheckarrayVkWriteDescriptorSet
VkWriteDescriptorSet* zcheckarrayVkWriteDescriptorSet(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkWriteDescriptorSet moonvulkan_zinitVkWriteDescriptorSet
int zinitVkWriteDescriptorSet(lua_State *L, VkWriteDescriptorSet* p, int *err);
#define zfreeVkWriteDescriptorSet(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkWriteDescriptorSet(L, p, count, base) zfreearray((L), (p), sizeof(VkWriteDescriptorSet), (count), (base))
#define zpushVkWriteDescriptorSet moonvulkan_zpushVkWriteDescriptorSet
int zpushVkWriteDescriptorSet(lua_State *L, const VkWriteDescriptorSet *p);

#define znewVkCopyDescriptorSet(L, err) (VkCopyDescriptorSet*)znew((L), VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, sizeof(VkCopyDescriptorSet), (err))
#define znewarrayVkCopyDescriptorSet(L, count, err) (VkCopyDescriptorSet*)znewarray((L), VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, sizeof(VkCopyDescriptorSet), (count), (err))
#define znewchainVkCopyDescriptorSet moonvulkan_znewchainVkCopyDescriptorSet
VkCopyDescriptorSet* znewchainVkCopyDescriptorSet(lua_State *L, int *err);
#define znewchainarrayVkCopyDescriptorSet moonvulkan_znewchainarrayVkCopyDescriptorSet
VkCopyDescriptorSet* znewchainarrayVkCopyDescriptorSet(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyDescriptorSet moonvulkan_zcheckVkCopyDescriptorSet
VkCopyDescriptorSet* zcheckVkCopyDescriptorSet(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyDescriptorSet moonvulkan_zcheckarrayVkCopyDescriptorSet
VkCopyDescriptorSet* zcheckarrayVkCopyDescriptorSet(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyDescriptorSet moonvulkan_zinitVkCopyDescriptorSet
int zinitVkCopyDescriptorSet(lua_State *L, VkCopyDescriptorSet* p, int *err);
#define zfreeVkCopyDescriptorSet(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyDescriptorSet(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyDescriptorSet), (count), (base))
#define zpushVkCopyDescriptorSet moonvulkan_zpushVkCopyDescriptorSet
int zpushVkCopyDescriptorSet(lua_State *L, const VkCopyDescriptorSet *p);

#define znewVkDebugUtilsObjectNameInfoEXT(L, err) (VkDebugUtilsObjectNameInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, sizeof(VkDebugUtilsObjectNameInfoEXT), (err))
#define znewarrayVkDebugUtilsObjectNameInfoEXT(L, count, err) (VkDebugUtilsObjectNameInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, sizeof(VkDebugUtilsObjectNameInfoEXT), (count), (err))
#define znewchainVkDebugUtilsObjectNameInfoEXT moonvulkan_znewchainVkDebugUtilsObjectNameInfoEXT
VkDebugUtilsObjectNameInfoEXT* znewchainVkDebugUtilsObjectNameInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDebugUtilsObjectNameInfoEXT moonvulkan_znewchainarrayVkDebugUtilsObjectNameInfoEXT
VkDebugUtilsObjectNameInfoEXT* znewchainarrayVkDebugUtilsObjectNameInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDebugUtilsObjectNameInfoEXT moonvulkan_zcheckVkDebugUtilsObjectNameInfoEXT
VkDebugUtilsObjectNameInfoEXT* zcheckVkDebugUtilsObjectNameInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDebugUtilsObjectNameInfoEXT moonvulkan_zcheckarrayVkDebugUtilsObjectNameInfoEXT
VkDebugUtilsObjectNameInfoEXT* zcheckarrayVkDebugUtilsObjectNameInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDebugUtilsObjectNameInfoEXT moonvulkan_zinitVkDebugUtilsObjectNameInfoEXT
int zinitVkDebugUtilsObjectNameInfoEXT(lua_State *L, VkDebugUtilsObjectNameInfoEXT* p, int *err);
#define zfreeVkDebugUtilsObjectNameInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDebugUtilsObjectNameInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDebugUtilsObjectNameInfoEXT), (count), (base))
#define zpushVkDebugUtilsObjectNameInfoEXT moonvulkan_zpushVkDebugUtilsObjectNameInfoEXT
int zpushVkDebugUtilsObjectNameInfoEXT(lua_State *L, const VkDebugUtilsObjectNameInfoEXT *p);

#define znewVkDebugUtilsObjectTagInfoEXT(L, err) (VkDebugUtilsObjectTagInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, sizeof(VkDebugUtilsObjectTagInfoEXT), (err))
#define znewarrayVkDebugUtilsObjectTagInfoEXT(L, count, err) (VkDebugUtilsObjectTagInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, sizeof(VkDebugUtilsObjectTagInfoEXT), (count), (err))
#define znewchainVkDebugUtilsObjectTagInfoEXT moonvulkan_znewchainVkDebugUtilsObjectTagInfoEXT
VkDebugUtilsObjectTagInfoEXT* znewchainVkDebugUtilsObjectTagInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDebugUtilsObjectTagInfoEXT moonvulkan_znewchainarrayVkDebugUtilsObjectTagInfoEXT
VkDebugUtilsObjectTagInfoEXT* znewchainarrayVkDebugUtilsObjectTagInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDebugUtilsObjectTagInfoEXT moonvulkan_zcheckVkDebugUtilsObjectTagInfoEXT
VkDebugUtilsObjectTagInfoEXT* zcheckVkDebugUtilsObjectTagInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDebugUtilsObjectTagInfoEXT moonvulkan_zcheckarrayVkDebugUtilsObjectTagInfoEXT
VkDebugUtilsObjectTagInfoEXT* zcheckarrayVkDebugUtilsObjectTagInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDebugUtilsObjectTagInfoEXT moonvulkan_zinitVkDebugUtilsObjectTagInfoEXT
int zinitVkDebugUtilsObjectTagInfoEXT(lua_State *L, VkDebugUtilsObjectTagInfoEXT* p, int *err);
#define zfreeVkDebugUtilsObjectTagInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDebugUtilsObjectTagInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDebugUtilsObjectTagInfoEXT), (count), (base))
#define zpushVkDebugUtilsObjectTagInfoEXT moonvulkan_zpushVkDebugUtilsObjectTagInfoEXT
int zpushVkDebugUtilsObjectTagInfoEXT(lua_State *L, const VkDebugUtilsObjectTagInfoEXT *p);

#define znewVkDebugUtilsLabelEXT(L, err) (VkDebugUtilsLabelEXT*)znew((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, sizeof(VkDebugUtilsLabelEXT), (err))
#define znewarrayVkDebugUtilsLabelEXT(L, count, err) (VkDebugUtilsLabelEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, sizeof(VkDebugUtilsLabelEXT), (count), (err))
#define znewchainVkDebugUtilsLabelEXT moonvulkan_znewchainVkDebugUtilsLabelEXT
VkDebugUtilsLabelEXT* znewchainVkDebugUtilsLabelEXT(lua_State *L, int *err);
#define znewchainarrayVkDebugUtilsLabelEXT moonvulkan_znewchainarrayVkDebugUtilsLabelEXT
VkDebugUtilsLabelEXT* znewchainarrayVkDebugUtilsLabelEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDebugUtilsLabelEXT moonvulkan_zcheckVkDebugUtilsLabelEXT
VkDebugUtilsLabelEXT* zcheckVkDebugUtilsLabelEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDebugUtilsLabelEXT moonvulkan_zcheckarrayVkDebugUtilsLabelEXT
VkDebugUtilsLabelEXT* zcheckarrayVkDebugUtilsLabelEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDebugUtilsLabelEXT moonvulkan_zinitVkDebugUtilsLabelEXT
int zinitVkDebugUtilsLabelEXT(lua_State *L, VkDebugUtilsLabelEXT* p, int *err);
#define zfreeVkDebugUtilsLabelEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDebugUtilsLabelEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDebugUtilsLabelEXT), (count), (base))
#define zpushVkDebugUtilsLabelEXT moonvulkan_zpushVkDebugUtilsLabelEXT
int zpushVkDebugUtilsLabelEXT(lua_State *L, const VkDebugUtilsLabelEXT *p);

#define znewVkDebugUtilsMessengerCallbackDataEXT(L, err) (VkDebugUtilsMessengerCallbackDataEXT*)znew((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, sizeof(VkDebugUtilsMessengerCallbackDataEXT), (err))
#define znewarrayVkDebugUtilsMessengerCallbackDataEXT(L, count, err) (VkDebugUtilsMessengerCallbackDataEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, sizeof(VkDebugUtilsMessengerCallbackDataEXT), (count), (err))
#define znewchainVkDebugUtilsMessengerCallbackDataEXT moonvulkan_znewchainVkDebugUtilsMessengerCallbackDataEXT
VkDebugUtilsMessengerCallbackDataEXT* znewchainVkDebugUtilsMessengerCallbackDataEXT(lua_State *L, int *err);
#define znewchainarrayVkDebugUtilsMessengerCallbackDataEXT moonvulkan_znewchainarrayVkDebugUtilsMessengerCallbackDataEXT
VkDebugUtilsMessengerCallbackDataEXT* znewchainarrayVkDebugUtilsMessengerCallbackDataEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDebugUtilsMessengerCallbackDataEXT moonvulkan_zcheckVkDebugUtilsMessengerCallbackDataEXT
VkDebugUtilsMessengerCallbackDataEXT* zcheckVkDebugUtilsMessengerCallbackDataEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDebugUtilsMessengerCallbackDataEXT moonvulkan_zcheckarrayVkDebugUtilsMessengerCallbackDataEXT
VkDebugUtilsMessengerCallbackDataEXT* zcheckarrayVkDebugUtilsMessengerCallbackDataEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDebugUtilsMessengerCallbackDataEXT moonvulkan_zinitVkDebugUtilsMessengerCallbackDataEXT
int zinitVkDebugUtilsMessengerCallbackDataEXT(lua_State *L, VkDebugUtilsMessengerCallbackDataEXT* p, int *err);
#define zfreeVkDebugUtilsMessengerCallbackDataEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDebugUtilsMessengerCallbackDataEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDebugUtilsMessengerCallbackDataEXT), (count), (base))
#define zpushVkDebugUtilsMessengerCallbackDataEXT moonvulkan_zpushVkDebugUtilsMessengerCallbackDataEXT
int zpushVkDebugUtilsMessengerCallbackDataEXT(lua_State *L, const VkDebugUtilsMessengerCallbackDataEXT *p);

#define znewVkDisplayPowerInfoEXT(L, err) (VkDisplayPowerInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, sizeof(VkDisplayPowerInfoEXT), (err))
#define znewarrayVkDisplayPowerInfoEXT(L, count, err) (VkDisplayPowerInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, sizeof(VkDisplayPowerInfoEXT), (count), (err))
#define znewchainVkDisplayPowerInfoEXT moonvulkan_znewchainVkDisplayPowerInfoEXT
VkDisplayPowerInfoEXT* znewchainVkDisplayPowerInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDisplayPowerInfoEXT moonvulkan_znewchainarrayVkDisplayPowerInfoEXT
VkDisplayPowerInfoEXT* znewchainarrayVkDisplayPowerInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayPowerInfoEXT moonvulkan_zcheckVkDisplayPowerInfoEXT
VkDisplayPowerInfoEXT* zcheckVkDisplayPowerInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPowerInfoEXT moonvulkan_zcheckarrayVkDisplayPowerInfoEXT
VkDisplayPowerInfoEXT* zcheckarrayVkDisplayPowerInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPowerInfoEXT moonvulkan_zinitVkDisplayPowerInfoEXT
int zinitVkDisplayPowerInfoEXT(lua_State *L, VkDisplayPowerInfoEXT* p, int *err);
#define zfreeVkDisplayPowerInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayPowerInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayPowerInfoEXT), (count), (base))
#define zpushVkDisplayPowerInfoEXT moonvulkan_zpushVkDisplayPowerInfoEXT
int zpushVkDisplayPowerInfoEXT(lua_State *L, const VkDisplayPowerInfoEXT *p);

#define znewVkMultisamplePropertiesEXT(L, err) (VkMultisamplePropertiesEXT*)znew((L), VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, sizeof(VkMultisamplePropertiesEXT), (err))
#define znewarrayVkMultisamplePropertiesEXT(L, count, err) (VkMultisamplePropertiesEXT*)znewarray((L), VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, sizeof(VkMultisamplePropertiesEXT), (count), (err))
#define znewchainVkMultisamplePropertiesEXT moonvulkan_znewchainVkMultisamplePropertiesEXT
VkMultisamplePropertiesEXT* znewchainVkMultisamplePropertiesEXT(lua_State *L, int *err);
#define znewchainarrayVkMultisamplePropertiesEXT moonvulkan_znewchainarrayVkMultisamplePropertiesEXT
VkMultisamplePropertiesEXT* znewchainarrayVkMultisamplePropertiesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkMultisamplePropertiesEXT moonvulkan_zcheckVkMultisamplePropertiesEXT
VkMultisamplePropertiesEXT* zcheckVkMultisamplePropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkMultisamplePropertiesEXT moonvulkan_zcheckarrayVkMultisamplePropertiesEXT
VkMultisamplePropertiesEXT* zcheckarrayVkMultisamplePropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMultisamplePropertiesEXT moonvulkan_zinitVkMultisamplePropertiesEXT
int zinitVkMultisamplePropertiesEXT(lua_State *L, VkMultisamplePropertiesEXT* p, int *err);
#define zfreeVkMultisamplePropertiesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMultisamplePropertiesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkMultisamplePropertiesEXT), (count), (base))
#define zpushVkMultisamplePropertiesEXT moonvulkan_zpushVkMultisamplePropertiesEXT
int zpushVkMultisamplePropertiesEXT(lua_State *L, const VkMultisamplePropertiesEXT *p);

#define znewVkConditionalRenderingBeginInfoEXT(L, err) (VkConditionalRenderingBeginInfoEXT*)znew((L), VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, sizeof(VkConditionalRenderingBeginInfoEXT), (err))
#define znewarrayVkConditionalRenderingBeginInfoEXT(L, count, err) (VkConditionalRenderingBeginInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, sizeof(VkConditionalRenderingBeginInfoEXT), (count), (err))
#define znewchainVkConditionalRenderingBeginInfoEXT moonvulkan_znewchainVkConditionalRenderingBeginInfoEXT
VkConditionalRenderingBeginInfoEXT* znewchainVkConditionalRenderingBeginInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkConditionalRenderingBeginInfoEXT moonvulkan_znewchainarrayVkConditionalRenderingBeginInfoEXT
VkConditionalRenderingBeginInfoEXT* znewchainarrayVkConditionalRenderingBeginInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkConditionalRenderingBeginInfoEXT moonvulkan_zcheckVkConditionalRenderingBeginInfoEXT
VkConditionalRenderingBeginInfoEXT* zcheckVkConditionalRenderingBeginInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkConditionalRenderingBeginInfoEXT moonvulkan_zcheckarrayVkConditionalRenderingBeginInfoEXT
VkConditionalRenderingBeginInfoEXT* zcheckarrayVkConditionalRenderingBeginInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkConditionalRenderingBeginInfoEXT moonvulkan_zinitVkConditionalRenderingBeginInfoEXT
int zinitVkConditionalRenderingBeginInfoEXT(lua_State *L, VkConditionalRenderingBeginInfoEXT* p, int *err);
#define zfreeVkConditionalRenderingBeginInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkConditionalRenderingBeginInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkConditionalRenderingBeginInfoEXT), (count), (base))
#define zpushVkConditionalRenderingBeginInfoEXT moonvulkan_zpushVkConditionalRenderingBeginInfoEXT
int zpushVkConditionalRenderingBeginInfoEXT(lua_State *L, const VkConditionalRenderingBeginInfoEXT *p);

#define znewVkDescriptorSetLayoutSupport(L, err) (VkDescriptorSetLayoutSupport*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, sizeof(VkDescriptorSetLayoutSupport), (err))
#define znewarrayVkDescriptorSetLayoutSupport(L, count, err) (VkDescriptorSetLayoutSupport*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, sizeof(VkDescriptorSetLayoutSupport), (count), (err))
#define znewchainVkDescriptorSetLayoutSupport moonvulkan_znewchainVkDescriptorSetLayoutSupport
VkDescriptorSetLayoutSupport* znewchainVkDescriptorSetLayoutSupport(lua_State *L, int *err);
#define znewchainarrayVkDescriptorSetLayoutSupport moonvulkan_znewchainarrayVkDescriptorSetLayoutSupport
VkDescriptorSetLayoutSupport* znewchainarrayVkDescriptorSetLayoutSupport(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorSetLayoutSupport moonvulkan_zcheckVkDescriptorSetLayoutSupport
VkDescriptorSetLayoutSupport* zcheckVkDescriptorSetLayoutSupport(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorSetLayoutSupport moonvulkan_zcheckarrayVkDescriptorSetLayoutSupport
VkDescriptorSetLayoutSupport* zcheckarrayVkDescriptorSetLayoutSupport(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorSetLayoutSupport moonvulkan_zinitVkDescriptorSetLayoutSupport
int zinitVkDescriptorSetLayoutSupport(lua_State *L, VkDescriptorSetLayoutSupport* p, int *err);
#define zfreeVkDescriptorSetLayoutSupport(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorSetLayoutSupport(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorSetLayoutSupport), (count), (base))
#define zpushVkDescriptorSetLayoutSupport moonvulkan_zpushVkDescriptorSetLayoutSupport
int zpushVkDescriptorSetLayoutSupport(lua_State *L, const VkDescriptorSetLayoutSupport *p);

#define znewVkPipelineShaderStageCreateInfo(L, err) (VkPipelineShaderStageCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, sizeof(VkPipelineShaderStageCreateInfo), (err))
#define znewarrayVkPipelineShaderStageCreateInfo(L, count, err) (VkPipelineShaderStageCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, sizeof(VkPipelineShaderStageCreateInfo), (count), (err))
#define znewchainVkPipelineShaderStageCreateInfo moonvulkan_znewchainVkPipelineShaderStageCreateInfo
VkPipelineShaderStageCreateInfo* znewchainVkPipelineShaderStageCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineShaderStageCreateInfo moonvulkan_znewchainarrayVkPipelineShaderStageCreateInfo
VkPipelineShaderStageCreateInfo* znewchainarrayVkPipelineShaderStageCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineShaderStageCreateInfo moonvulkan_zcheckVkPipelineShaderStageCreateInfo
VkPipelineShaderStageCreateInfo* zcheckVkPipelineShaderStageCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineShaderStageCreateInfo moonvulkan_zcheckarrayVkPipelineShaderStageCreateInfo
VkPipelineShaderStageCreateInfo* zcheckarrayVkPipelineShaderStageCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineShaderStageCreateInfo moonvulkan_zinitVkPipelineShaderStageCreateInfo
int zinitVkPipelineShaderStageCreateInfo(lua_State *L, VkPipelineShaderStageCreateInfo* p, int *err);
#define zfreeVkPipelineShaderStageCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineShaderStageCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineShaderStageCreateInfo), (count), (base))
#define zpushVkPipelineShaderStageCreateInfo moonvulkan_zpushVkPipelineShaderStageCreateInfo
int zpushVkPipelineShaderStageCreateInfo(lua_State *L, const VkPipelineShaderStageCreateInfo *p);

#define znewVkComputePipelineCreateInfo(L, err) (VkComputePipelineCreateInfo*)znew((L), VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, sizeof(VkComputePipelineCreateInfo), (err))
#define znewarrayVkComputePipelineCreateInfo(L, count, err) (VkComputePipelineCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, sizeof(VkComputePipelineCreateInfo), (count), (err))
#define znewchainVkComputePipelineCreateInfo moonvulkan_znewchainVkComputePipelineCreateInfo
VkComputePipelineCreateInfo* znewchainVkComputePipelineCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkComputePipelineCreateInfo moonvulkan_znewchainarrayVkComputePipelineCreateInfo
VkComputePipelineCreateInfo* znewchainarrayVkComputePipelineCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkComputePipelineCreateInfo moonvulkan_zcheckVkComputePipelineCreateInfo
VkComputePipelineCreateInfo* zcheckVkComputePipelineCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkComputePipelineCreateInfo moonvulkan_zcheckarrayVkComputePipelineCreateInfo
VkComputePipelineCreateInfo* zcheckarrayVkComputePipelineCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkComputePipelineCreateInfo moonvulkan_zinitVkComputePipelineCreateInfo
int zinitVkComputePipelineCreateInfo(lua_State *L, VkComputePipelineCreateInfo* p, int *err);
#define zfreeVkComputePipelineCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkComputePipelineCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkComputePipelineCreateInfo), (count), (base))
#define zpushVkComputePipelineCreateInfo moonvulkan_zpushVkComputePipelineCreateInfo
int zpushVkComputePipelineCreateInfo(lua_State *L, const VkComputePipelineCreateInfo *p);

#define znewVkPipelineInputAssemblyStateCreateInfo(L, err) (VkPipelineInputAssemblyStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, sizeof(VkPipelineInputAssemblyStateCreateInfo), (err))
#define znewarrayVkPipelineInputAssemblyStateCreateInfo(L, count, err) (VkPipelineInputAssemblyStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, sizeof(VkPipelineInputAssemblyStateCreateInfo), (count), (err))
#define znewchainVkPipelineInputAssemblyStateCreateInfo moonvulkan_znewchainVkPipelineInputAssemblyStateCreateInfo
VkPipelineInputAssemblyStateCreateInfo* znewchainVkPipelineInputAssemblyStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineInputAssemblyStateCreateInfo moonvulkan_znewchainarrayVkPipelineInputAssemblyStateCreateInfo
VkPipelineInputAssemblyStateCreateInfo* znewchainarrayVkPipelineInputAssemblyStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineInputAssemblyStateCreateInfo moonvulkan_zcheckVkPipelineInputAssemblyStateCreateInfo
VkPipelineInputAssemblyStateCreateInfo* zcheckVkPipelineInputAssemblyStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineInputAssemblyStateCreateInfo moonvulkan_zcheckarrayVkPipelineInputAssemblyStateCreateInfo
VkPipelineInputAssemblyStateCreateInfo* zcheckarrayVkPipelineInputAssemblyStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineInputAssemblyStateCreateInfo moonvulkan_zinitVkPipelineInputAssemblyStateCreateInfo
int zinitVkPipelineInputAssemblyStateCreateInfo(lua_State *L, VkPipelineInputAssemblyStateCreateInfo* p, int *err);
#define zfreeVkPipelineInputAssemblyStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineInputAssemblyStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineInputAssemblyStateCreateInfo), (count), (base))
#define zpushVkPipelineInputAssemblyStateCreateInfo moonvulkan_zpushVkPipelineInputAssemblyStateCreateInfo
int zpushVkPipelineInputAssemblyStateCreateInfo(lua_State *L, const VkPipelineInputAssemblyStateCreateInfo *p);

#define znewVkPipelineTessellationDomainOriginStateCreateInfoKHR(L, err) (VkPipelineTessellationDomainOriginStateCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR), (err))
#define znewarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR(L, count, err) (VkPipelineTessellationDomainOriginStateCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR, sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR), (count), (err))
#define znewchainVkPipelineTessellationDomainOriginStateCreateInfoKHR moonvulkan_znewchainVkPipelineTessellationDomainOriginStateCreateInfoKHR
VkPipelineTessellationDomainOriginStateCreateInfoKHR* znewchainVkPipelineTessellationDomainOriginStateCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR moonvulkan_znewchainarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR
VkPipelineTessellationDomainOriginStateCreateInfoKHR* znewchainarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineTessellationDomainOriginStateCreateInfoKHR moonvulkan_zcheckVkPipelineTessellationDomainOriginStateCreateInfoKHR
VkPipelineTessellationDomainOriginStateCreateInfoKHR* zcheckVkPipelineTessellationDomainOriginStateCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR moonvulkan_zcheckarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR
VkPipelineTessellationDomainOriginStateCreateInfoKHR* zcheckarrayVkPipelineTessellationDomainOriginStateCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineTessellationDomainOriginStateCreateInfoKHR moonvulkan_zinitVkPipelineTessellationDomainOriginStateCreateInfoKHR
int zinitVkPipelineTessellationDomainOriginStateCreateInfoKHR(lua_State *L, VkPipelineTessellationDomainOriginStateCreateInfoKHR* p, int *err);
#define zfreeVkPipelineTessellationDomainOriginStateCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineTessellationDomainOriginStateCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR), (count), (base))
#define zpushVkPipelineTessellationDomainOriginStateCreateInfoKHR moonvulkan_zpushVkPipelineTessellationDomainOriginStateCreateInfoKHR
int zpushVkPipelineTessellationDomainOriginStateCreateInfoKHR(lua_State *L, const VkPipelineTessellationDomainOriginStateCreateInfoKHR *p);

#define znewVkPipelineTessellationStateCreateInfo(L, err) (VkPipelineTessellationStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, sizeof(VkPipelineTessellationStateCreateInfo), (err))
#define znewarrayVkPipelineTessellationStateCreateInfo(L, count, err) (VkPipelineTessellationStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, sizeof(VkPipelineTessellationStateCreateInfo), (count), (err))
#define znewchainVkPipelineTessellationStateCreateInfo moonvulkan_znewchainVkPipelineTessellationStateCreateInfo
VkPipelineTessellationStateCreateInfo* znewchainVkPipelineTessellationStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineTessellationStateCreateInfo moonvulkan_znewchainarrayVkPipelineTessellationStateCreateInfo
VkPipelineTessellationStateCreateInfo* znewchainarrayVkPipelineTessellationStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineTessellationStateCreateInfo moonvulkan_zcheckVkPipelineTessellationStateCreateInfo
VkPipelineTessellationStateCreateInfo* zcheckVkPipelineTessellationStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineTessellationStateCreateInfo moonvulkan_zcheckarrayVkPipelineTessellationStateCreateInfo
VkPipelineTessellationStateCreateInfo* zcheckarrayVkPipelineTessellationStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineTessellationStateCreateInfo moonvulkan_zinitVkPipelineTessellationStateCreateInfo
int zinitVkPipelineTessellationStateCreateInfo(lua_State *L, VkPipelineTessellationStateCreateInfo* p, int *err);
#define zfreeVkPipelineTessellationStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineTessellationStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineTessellationStateCreateInfo), (count), (base))
#define zpushVkPipelineTessellationStateCreateInfo moonvulkan_zpushVkPipelineTessellationStateCreateInfo
int zpushVkPipelineTessellationStateCreateInfo(lua_State *L, const VkPipelineTessellationStateCreateInfo *p);

#define znewVkPipelineViewportStateCreateInfo(L, err) (VkPipelineViewportStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, sizeof(VkPipelineViewportStateCreateInfo), (err))
#define znewarrayVkPipelineViewportStateCreateInfo(L, count, err) (VkPipelineViewportStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, sizeof(VkPipelineViewportStateCreateInfo), (count), (err))
#define znewchainVkPipelineViewportStateCreateInfo moonvulkan_znewchainVkPipelineViewportStateCreateInfo
VkPipelineViewportStateCreateInfo* znewchainVkPipelineViewportStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineViewportStateCreateInfo moonvulkan_znewchainarrayVkPipelineViewportStateCreateInfo
VkPipelineViewportStateCreateInfo* znewchainarrayVkPipelineViewportStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineViewportStateCreateInfo moonvulkan_zcheckVkPipelineViewportStateCreateInfo
VkPipelineViewportStateCreateInfo* zcheckVkPipelineViewportStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineViewportStateCreateInfo moonvulkan_zcheckarrayVkPipelineViewportStateCreateInfo
VkPipelineViewportStateCreateInfo* zcheckarrayVkPipelineViewportStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineViewportStateCreateInfo moonvulkan_zinitVkPipelineViewportStateCreateInfo
int zinitVkPipelineViewportStateCreateInfo(lua_State *L, VkPipelineViewportStateCreateInfo* p, int *err);
#define zfreeVkPipelineViewportStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineViewportStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineViewportStateCreateInfo), (count), (base))
#define zpushVkPipelineViewportStateCreateInfo moonvulkan_zpushVkPipelineViewportStateCreateInfo
int zpushVkPipelineViewportStateCreateInfo(lua_State *L, const VkPipelineViewportStateCreateInfo *p);

#define znewVkPipelineRasterizationStateCreateInfo(L, err) (VkPipelineRasterizationStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, sizeof(VkPipelineRasterizationStateCreateInfo), (err))
#define znewarrayVkPipelineRasterizationStateCreateInfo(L, count, err) (VkPipelineRasterizationStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, sizeof(VkPipelineRasterizationStateCreateInfo), (count), (err))
#define znewchainVkPipelineRasterizationStateCreateInfo moonvulkan_znewchainVkPipelineRasterizationStateCreateInfo
VkPipelineRasterizationStateCreateInfo* znewchainVkPipelineRasterizationStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineRasterizationStateCreateInfo moonvulkan_znewchainarrayVkPipelineRasterizationStateCreateInfo
VkPipelineRasterizationStateCreateInfo* znewchainarrayVkPipelineRasterizationStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRasterizationStateCreateInfo moonvulkan_zcheckVkPipelineRasterizationStateCreateInfo
VkPipelineRasterizationStateCreateInfo* zcheckVkPipelineRasterizationStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRasterizationStateCreateInfo moonvulkan_zcheckarrayVkPipelineRasterizationStateCreateInfo
VkPipelineRasterizationStateCreateInfo* zcheckarrayVkPipelineRasterizationStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRasterizationStateCreateInfo moonvulkan_zinitVkPipelineRasterizationStateCreateInfo
int zinitVkPipelineRasterizationStateCreateInfo(lua_State *L, VkPipelineRasterizationStateCreateInfo* p, int *err);
#define zfreeVkPipelineRasterizationStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRasterizationStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRasterizationStateCreateInfo), (count), (base))
#define zpushVkPipelineRasterizationStateCreateInfo moonvulkan_zpushVkPipelineRasterizationStateCreateInfo
int zpushVkPipelineRasterizationStateCreateInfo(lua_State *L, const VkPipelineRasterizationStateCreateInfo *p);

#define znewVkPipelineSampleLocationsStateCreateInfoEXT(L, err) (VkPipelineSampleLocationsStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT), (err))
#define znewarrayVkPipelineSampleLocationsStateCreateInfoEXT(L, count, err) (VkPipelineSampleLocationsStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineSampleLocationsStateCreateInfoEXT moonvulkan_znewchainVkPipelineSampleLocationsStateCreateInfoEXT
VkPipelineSampleLocationsStateCreateInfoEXT* znewchainVkPipelineSampleLocationsStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineSampleLocationsStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineSampleLocationsStateCreateInfoEXT
VkPipelineSampleLocationsStateCreateInfoEXT* znewchainarrayVkPipelineSampleLocationsStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineSampleLocationsStateCreateInfoEXT moonvulkan_zcheckVkPipelineSampleLocationsStateCreateInfoEXT
VkPipelineSampleLocationsStateCreateInfoEXT* zcheckVkPipelineSampleLocationsStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineSampleLocationsStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineSampleLocationsStateCreateInfoEXT
VkPipelineSampleLocationsStateCreateInfoEXT* zcheckarrayVkPipelineSampleLocationsStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineSampleLocationsStateCreateInfoEXT moonvulkan_zinitVkPipelineSampleLocationsStateCreateInfoEXT
int zinitVkPipelineSampleLocationsStateCreateInfoEXT(lua_State *L, VkPipelineSampleLocationsStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineSampleLocationsStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineSampleLocationsStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineSampleLocationsStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineSampleLocationsStateCreateInfoEXT moonvulkan_zpushVkPipelineSampleLocationsStateCreateInfoEXT
int zpushVkPipelineSampleLocationsStateCreateInfoEXT(lua_State *L, const VkPipelineSampleLocationsStateCreateInfoEXT *p);

#define znewVkSampleLocationsInfoEXT(L, err) (VkSampleLocationsInfoEXT*)znew((L), VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, sizeof(VkSampleLocationsInfoEXT), (err))
#define znewarrayVkSampleLocationsInfoEXT(L, count, err) (VkSampleLocationsInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, sizeof(VkSampleLocationsInfoEXT), (count), (err))
#define znewchainVkSampleLocationsInfoEXT moonvulkan_znewchainVkSampleLocationsInfoEXT
VkSampleLocationsInfoEXT* znewchainVkSampleLocationsInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkSampleLocationsInfoEXT moonvulkan_znewchainarrayVkSampleLocationsInfoEXT
VkSampleLocationsInfoEXT* znewchainarrayVkSampleLocationsInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkSampleLocationsInfoEXT moonvulkan_zcheckVkSampleLocationsInfoEXT
VkSampleLocationsInfoEXT* zcheckVkSampleLocationsInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSampleLocationsInfoEXT moonvulkan_zcheckarrayVkSampleLocationsInfoEXT
VkSampleLocationsInfoEXT* zcheckarrayVkSampleLocationsInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSampleLocationsInfoEXT moonvulkan_zinitVkSampleLocationsInfoEXT
int zinitVkSampleLocationsInfoEXT(lua_State *L, VkSampleLocationsInfoEXT* p, int *err);
#define zfreeVkSampleLocationsInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSampleLocationsInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkSampleLocationsInfoEXT), (count), (base))
#define zpushVkSampleLocationsInfoEXT moonvulkan_zpushVkSampleLocationsInfoEXT
int zpushVkSampleLocationsInfoEXT(lua_State *L, const VkSampleLocationsInfoEXT *p);

#define znewVkPipelineMultisampleStateCreateInfo(L, err) (VkPipelineMultisampleStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, sizeof(VkPipelineMultisampleStateCreateInfo), (err))
#define znewarrayVkPipelineMultisampleStateCreateInfo(L, count, err) (VkPipelineMultisampleStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, sizeof(VkPipelineMultisampleStateCreateInfo), (count), (err))
#define znewchainVkPipelineMultisampleStateCreateInfo moonvulkan_znewchainVkPipelineMultisampleStateCreateInfo
VkPipelineMultisampleStateCreateInfo* znewchainVkPipelineMultisampleStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineMultisampleStateCreateInfo moonvulkan_znewchainarrayVkPipelineMultisampleStateCreateInfo
VkPipelineMultisampleStateCreateInfo* znewchainarrayVkPipelineMultisampleStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineMultisampleStateCreateInfo moonvulkan_zcheckVkPipelineMultisampleStateCreateInfo
VkPipelineMultisampleStateCreateInfo* zcheckVkPipelineMultisampleStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineMultisampleStateCreateInfo moonvulkan_zcheckarrayVkPipelineMultisampleStateCreateInfo
VkPipelineMultisampleStateCreateInfo* zcheckarrayVkPipelineMultisampleStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineMultisampleStateCreateInfo moonvulkan_zinitVkPipelineMultisampleStateCreateInfo
int zinitVkPipelineMultisampleStateCreateInfo(lua_State *L, VkPipelineMultisampleStateCreateInfo* p, int *err);
#define zfreeVkPipelineMultisampleStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineMultisampleStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineMultisampleStateCreateInfo), (count), (base))
#define zpushVkPipelineMultisampleStateCreateInfo moonvulkan_zpushVkPipelineMultisampleStateCreateInfo
int zpushVkPipelineMultisampleStateCreateInfo(lua_State *L, const VkPipelineMultisampleStateCreateInfo *p);

#define znewVkPipelineVertexInputStateCreateInfo(L, err) (VkPipelineVertexInputStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, sizeof(VkPipelineVertexInputStateCreateInfo), (err))
#define znewarrayVkPipelineVertexInputStateCreateInfo(L, count, err) (VkPipelineVertexInputStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, sizeof(VkPipelineVertexInputStateCreateInfo), (count), (err))
#define znewchainVkPipelineVertexInputStateCreateInfo moonvulkan_znewchainVkPipelineVertexInputStateCreateInfo
VkPipelineVertexInputStateCreateInfo* znewchainVkPipelineVertexInputStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineVertexInputStateCreateInfo moonvulkan_znewchainarrayVkPipelineVertexInputStateCreateInfo
VkPipelineVertexInputStateCreateInfo* znewchainarrayVkPipelineVertexInputStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineVertexInputStateCreateInfo moonvulkan_zcheckVkPipelineVertexInputStateCreateInfo
VkPipelineVertexInputStateCreateInfo* zcheckVkPipelineVertexInputStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineVertexInputStateCreateInfo moonvulkan_zcheckarrayVkPipelineVertexInputStateCreateInfo
VkPipelineVertexInputStateCreateInfo* zcheckarrayVkPipelineVertexInputStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineVertexInputStateCreateInfo moonvulkan_zinitVkPipelineVertexInputStateCreateInfo
int zinitVkPipelineVertexInputStateCreateInfo(lua_State *L, VkPipelineVertexInputStateCreateInfo* p, int *err);
#define zfreeVkPipelineVertexInputStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineVertexInputStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineVertexInputStateCreateInfo), (count), (base))
#define zpushVkPipelineVertexInputStateCreateInfo moonvulkan_zpushVkPipelineVertexInputStateCreateInfo
int zpushVkPipelineVertexInputStateCreateInfo(lua_State *L, const VkPipelineVertexInputStateCreateInfo *p);

#define znewVkPipelineDepthStencilStateCreateInfo(L, err) (VkPipelineDepthStencilStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, sizeof(VkPipelineDepthStencilStateCreateInfo), (err))
#define znewarrayVkPipelineDepthStencilStateCreateInfo(L, count, err) (VkPipelineDepthStencilStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, sizeof(VkPipelineDepthStencilStateCreateInfo), (count), (err))
#define znewchainVkPipelineDepthStencilStateCreateInfo moonvulkan_znewchainVkPipelineDepthStencilStateCreateInfo
VkPipelineDepthStencilStateCreateInfo* znewchainVkPipelineDepthStencilStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineDepthStencilStateCreateInfo moonvulkan_znewchainarrayVkPipelineDepthStencilStateCreateInfo
VkPipelineDepthStencilStateCreateInfo* znewchainarrayVkPipelineDepthStencilStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineDepthStencilStateCreateInfo moonvulkan_zcheckVkPipelineDepthStencilStateCreateInfo
VkPipelineDepthStencilStateCreateInfo* zcheckVkPipelineDepthStencilStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineDepthStencilStateCreateInfo moonvulkan_zcheckarrayVkPipelineDepthStencilStateCreateInfo
VkPipelineDepthStencilStateCreateInfo* zcheckarrayVkPipelineDepthStencilStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineDepthStencilStateCreateInfo moonvulkan_zinitVkPipelineDepthStencilStateCreateInfo
int zinitVkPipelineDepthStencilStateCreateInfo(lua_State *L, VkPipelineDepthStencilStateCreateInfo* p, int *err);
#define zfreeVkPipelineDepthStencilStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineDepthStencilStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineDepthStencilStateCreateInfo), (count), (base))
#define zpushVkPipelineDepthStencilStateCreateInfo moonvulkan_zpushVkPipelineDepthStencilStateCreateInfo
int zpushVkPipelineDepthStencilStateCreateInfo(lua_State *L, const VkPipelineDepthStencilStateCreateInfo *p);

#define znewVkPipelineColorBlendAdvancedStateCreateInfoEXT(L, err) (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT), (err))
#define znewarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT(L, count, err) (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineColorBlendAdvancedStateCreateInfoEXT moonvulkan_znewchainVkPipelineColorBlendAdvancedStateCreateInfoEXT
VkPipelineColorBlendAdvancedStateCreateInfoEXT* znewchainVkPipelineColorBlendAdvancedStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT
VkPipelineColorBlendAdvancedStateCreateInfoEXT* znewchainarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineColorBlendAdvancedStateCreateInfoEXT moonvulkan_zcheckVkPipelineColorBlendAdvancedStateCreateInfoEXT
VkPipelineColorBlendAdvancedStateCreateInfoEXT* zcheckVkPipelineColorBlendAdvancedStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT
VkPipelineColorBlendAdvancedStateCreateInfoEXT* zcheckarrayVkPipelineColorBlendAdvancedStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineColorBlendAdvancedStateCreateInfoEXT moonvulkan_zinitVkPipelineColorBlendAdvancedStateCreateInfoEXT
int zinitVkPipelineColorBlendAdvancedStateCreateInfoEXT(lua_State *L, VkPipelineColorBlendAdvancedStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineColorBlendAdvancedStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineColorBlendAdvancedStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineColorBlendAdvancedStateCreateInfoEXT moonvulkan_zpushVkPipelineColorBlendAdvancedStateCreateInfoEXT
int zpushVkPipelineColorBlendAdvancedStateCreateInfoEXT(lua_State *L, const VkPipelineColorBlendAdvancedStateCreateInfoEXT *p);

#define znewVkPipelineColorBlendStateCreateInfo(L, err) (VkPipelineColorBlendStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, sizeof(VkPipelineColorBlendStateCreateInfo), (err))
#define znewarrayVkPipelineColorBlendStateCreateInfo(L, count, err) (VkPipelineColorBlendStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, sizeof(VkPipelineColorBlendStateCreateInfo), (count), (err))
#define znewchainVkPipelineColorBlendStateCreateInfo moonvulkan_znewchainVkPipelineColorBlendStateCreateInfo
VkPipelineColorBlendStateCreateInfo* znewchainVkPipelineColorBlendStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineColorBlendStateCreateInfo moonvulkan_znewchainarrayVkPipelineColorBlendStateCreateInfo
VkPipelineColorBlendStateCreateInfo* znewchainarrayVkPipelineColorBlendStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineColorBlendStateCreateInfo moonvulkan_zcheckVkPipelineColorBlendStateCreateInfo
VkPipelineColorBlendStateCreateInfo* zcheckVkPipelineColorBlendStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineColorBlendStateCreateInfo moonvulkan_zcheckarrayVkPipelineColorBlendStateCreateInfo
VkPipelineColorBlendStateCreateInfo* zcheckarrayVkPipelineColorBlendStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineColorBlendStateCreateInfo moonvulkan_zinitVkPipelineColorBlendStateCreateInfo
int zinitVkPipelineColorBlendStateCreateInfo(lua_State *L, VkPipelineColorBlendStateCreateInfo* p, int *err);
#define zfreeVkPipelineColorBlendStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineColorBlendStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineColorBlendStateCreateInfo), (count), (base))
#define zpushVkPipelineColorBlendStateCreateInfo moonvulkan_zpushVkPipelineColorBlendStateCreateInfo
int zpushVkPipelineColorBlendStateCreateInfo(lua_State *L, const VkPipelineColorBlendStateCreateInfo *p);

#define znewVkPipelineDynamicStateCreateInfo(L, err) (VkPipelineDynamicStateCreateInfo*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, sizeof(VkPipelineDynamicStateCreateInfo), (err))
#define znewarrayVkPipelineDynamicStateCreateInfo(L, count, err) (VkPipelineDynamicStateCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, sizeof(VkPipelineDynamicStateCreateInfo), (count), (err))
#define znewchainVkPipelineDynamicStateCreateInfo moonvulkan_znewchainVkPipelineDynamicStateCreateInfo
VkPipelineDynamicStateCreateInfo* znewchainVkPipelineDynamicStateCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkPipelineDynamicStateCreateInfo moonvulkan_znewchainarrayVkPipelineDynamicStateCreateInfo
VkPipelineDynamicStateCreateInfo* znewchainarrayVkPipelineDynamicStateCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineDynamicStateCreateInfo moonvulkan_zcheckVkPipelineDynamicStateCreateInfo
VkPipelineDynamicStateCreateInfo* zcheckVkPipelineDynamicStateCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineDynamicStateCreateInfo moonvulkan_zcheckarrayVkPipelineDynamicStateCreateInfo
VkPipelineDynamicStateCreateInfo* zcheckarrayVkPipelineDynamicStateCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineDynamicStateCreateInfo moonvulkan_zinitVkPipelineDynamicStateCreateInfo
int zinitVkPipelineDynamicStateCreateInfo(lua_State *L, VkPipelineDynamicStateCreateInfo* p, int *err);
#define zfreeVkPipelineDynamicStateCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineDynamicStateCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineDynamicStateCreateInfo), (count), (base))
#define zpushVkPipelineDynamicStateCreateInfo moonvulkan_zpushVkPipelineDynamicStateCreateInfo
int zpushVkPipelineDynamicStateCreateInfo(lua_State *L, const VkPipelineDynamicStateCreateInfo *p);

#define znewVkPipelineDiscardRectangleStateCreateInfoEXT(L, err) (VkPipelineDiscardRectangleStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT), (err))
#define znewarrayVkPipelineDiscardRectangleStateCreateInfoEXT(L, count, err) (VkPipelineDiscardRectangleStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineDiscardRectangleStateCreateInfoEXT moonvulkan_znewchainVkPipelineDiscardRectangleStateCreateInfoEXT
VkPipelineDiscardRectangleStateCreateInfoEXT* znewchainVkPipelineDiscardRectangleStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineDiscardRectangleStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineDiscardRectangleStateCreateInfoEXT
VkPipelineDiscardRectangleStateCreateInfoEXT* znewchainarrayVkPipelineDiscardRectangleStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineDiscardRectangleStateCreateInfoEXT moonvulkan_zcheckVkPipelineDiscardRectangleStateCreateInfoEXT
VkPipelineDiscardRectangleStateCreateInfoEXT* zcheckVkPipelineDiscardRectangleStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineDiscardRectangleStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineDiscardRectangleStateCreateInfoEXT
VkPipelineDiscardRectangleStateCreateInfoEXT* zcheckarrayVkPipelineDiscardRectangleStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineDiscardRectangleStateCreateInfoEXT moonvulkan_zinitVkPipelineDiscardRectangleStateCreateInfoEXT
int zinitVkPipelineDiscardRectangleStateCreateInfoEXT(lua_State *L, VkPipelineDiscardRectangleStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineDiscardRectangleStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineDiscardRectangleStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineDiscardRectangleStateCreateInfoEXT moonvulkan_zpushVkPipelineDiscardRectangleStateCreateInfoEXT
int zpushVkPipelineDiscardRectangleStateCreateInfoEXT(lua_State *L, const VkPipelineDiscardRectangleStateCreateInfoEXT *p);

#define znewVkGraphicsPipelineCreateInfo(L, err) (VkGraphicsPipelineCreateInfo*)znew((L), VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, sizeof(VkGraphicsPipelineCreateInfo), (err))
#define znewarrayVkGraphicsPipelineCreateInfo(L, count, err) (VkGraphicsPipelineCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, sizeof(VkGraphicsPipelineCreateInfo), (count), (err))
#define znewchainVkGraphicsPipelineCreateInfo moonvulkan_znewchainVkGraphicsPipelineCreateInfo
VkGraphicsPipelineCreateInfo* znewchainVkGraphicsPipelineCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkGraphicsPipelineCreateInfo moonvulkan_znewchainarrayVkGraphicsPipelineCreateInfo
VkGraphicsPipelineCreateInfo* znewchainarrayVkGraphicsPipelineCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkGraphicsPipelineCreateInfo moonvulkan_zcheckVkGraphicsPipelineCreateInfo
VkGraphicsPipelineCreateInfo* zcheckVkGraphicsPipelineCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkGraphicsPipelineCreateInfo moonvulkan_zcheckarrayVkGraphicsPipelineCreateInfo
VkGraphicsPipelineCreateInfo* zcheckarrayVkGraphicsPipelineCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkGraphicsPipelineCreateInfo moonvulkan_zinitVkGraphicsPipelineCreateInfo
int zinitVkGraphicsPipelineCreateInfo(lua_State *L, VkGraphicsPipelineCreateInfo* p, int *err);
#define zfreeVkGraphicsPipelineCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkGraphicsPipelineCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkGraphicsPipelineCreateInfo), (count), (base))
#define zpushVkGraphicsPipelineCreateInfo moonvulkan_zpushVkGraphicsPipelineCreateInfo
int zpushVkGraphicsPipelineCreateInfo(lua_State *L, const VkGraphicsPipelineCreateInfo *p);

#define znewVkMemoryFdPropertiesKHR(L, err) (VkMemoryFdPropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, sizeof(VkMemoryFdPropertiesKHR), (err))
#define znewarrayVkMemoryFdPropertiesKHR(L, count, err) (VkMemoryFdPropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, sizeof(VkMemoryFdPropertiesKHR), (count), (err))
#define znewchainVkMemoryFdPropertiesKHR moonvulkan_znewchainVkMemoryFdPropertiesKHR
VkMemoryFdPropertiesKHR* znewchainVkMemoryFdPropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryFdPropertiesKHR moonvulkan_znewchainarrayVkMemoryFdPropertiesKHR
VkMemoryFdPropertiesKHR* znewchainarrayVkMemoryFdPropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryFdPropertiesKHR moonvulkan_zcheckVkMemoryFdPropertiesKHR
VkMemoryFdPropertiesKHR* zcheckVkMemoryFdPropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryFdPropertiesKHR moonvulkan_zcheckarrayVkMemoryFdPropertiesKHR
VkMemoryFdPropertiesKHR* zcheckarrayVkMemoryFdPropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryFdPropertiesKHR moonvulkan_zinitVkMemoryFdPropertiesKHR
int zinitVkMemoryFdPropertiesKHR(lua_State *L, VkMemoryFdPropertiesKHR* p, int *err);
#define zfreeVkMemoryFdPropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryFdPropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryFdPropertiesKHR), (count), (base))
#define zpushVkMemoryFdPropertiesKHR moonvulkan_zpushVkMemoryFdPropertiesKHR
int zpushVkMemoryFdPropertiesKHR(lua_State *L, const VkMemoryFdPropertiesKHR *p);

#define znewVkMemoryHostPointerPropertiesEXT(L, err) (VkMemoryHostPointerPropertiesEXT*)znew((L), VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, sizeof(VkMemoryHostPointerPropertiesEXT), (err))
#define znewarrayVkMemoryHostPointerPropertiesEXT(L, count, err) (VkMemoryHostPointerPropertiesEXT*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, sizeof(VkMemoryHostPointerPropertiesEXT), (count), (err))
#define znewchainVkMemoryHostPointerPropertiesEXT moonvulkan_znewchainVkMemoryHostPointerPropertiesEXT
VkMemoryHostPointerPropertiesEXT* znewchainVkMemoryHostPointerPropertiesEXT(lua_State *L, int *err);
#define znewchainarrayVkMemoryHostPointerPropertiesEXT moonvulkan_znewchainarrayVkMemoryHostPointerPropertiesEXT
VkMemoryHostPointerPropertiesEXT* znewchainarrayVkMemoryHostPointerPropertiesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryHostPointerPropertiesEXT moonvulkan_zcheckVkMemoryHostPointerPropertiesEXT
VkMemoryHostPointerPropertiesEXT* zcheckVkMemoryHostPointerPropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryHostPointerPropertiesEXT moonvulkan_zcheckarrayVkMemoryHostPointerPropertiesEXT
VkMemoryHostPointerPropertiesEXT* zcheckarrayVkMemoryHostPointerPropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryHostPointerPropertiesEXT moonvulkan_zinitVkMemoryHostPointerPropertiesEXT
int zinitVkMemoryHostPointerPropertiesEXT(lua_State *L, VkMemoryHostPointerPropertiesEXT* p, int *err);
#define zfreeVkMemoryHostPointerPropertiesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryHostPointerPropertiesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryHostPointerPropertiesEXT), (count), (base))
#define zpushVkMemoryHostPointerPropertiesEXT moonvulkan_zpushVkMemoryHostPointerPropertiesEXT
int zpushVkMemoryHostPointerPropertiesEXT(lua_State *L, const VkMemoryHostPointerPropertiesEXT *p);

#define znewVkMemoryGetFdInfoKHR(L, err) (VkMemoryGetFdInfoKHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, sizeof(VkMemoryGetFdInfoKHR), (err))
#define znewarrayVkMemoryGetFdInfoKHR(L, count, err) (VkMemoryGetFdInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, sizeof(VkMemoryGetFdInfoKHR), (count), (err))
#define znewchainVkMemoryGetFdInfoKHR moonvulkan_znewchainVkMemoryGetFdInfoKHR
VkMemoryGetFdInfoKHR* znewchainVkMemoryGetFdInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryGetFdInfoKHR moonvulkan_znewchainarrayVkMemoryGetFdInfoKHR
VkMemoryGetFdInfoKHR* znewchainarrayVkMemoryGetFdInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryGetFdInfoKHR moonvulkan_zcheckVkMemoryGetFdInfoKHR
VkMemoryGetFdInfoKHR* zcheckVkMemoryGetFdInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryGetFdInfoKHR moonvulkan_zcheckarrayVkMemoryGetFdInfoKHR
VkMemoryGetFdInfoKHR* zcheckarrayVkMemoryGetFdInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryGetFdInfoKHR moonvulkan_zinitVkMemoryGetFdInfoKHR
int zinitVkMemoryGetFdInfoKHR(lua_State *L, VkMemoryGetFdInfoKHR* p, int *err);
#define zfreeVkMemoryGetFdInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryGetFdInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryGetFdInfoKHR), (count), (base))
#define zpushVkMemoryGetFdInfoKHR moonvulkan_zpushVkMemoryGetFdInfoKHR
int zpushVkMemoryGetFdInfoKHR(lua_State *L, const VkMemoryGetFdInfoKHR *p);

#define znewVkDeviceEventInfoEXT(L, err) (VkDeviceEventInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, sizeof(VkDeviceEventInfoEXT), (err))
#define znewarrayVkDeviceEventInfoEXT(L, count, err) (VkDeviceEventInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, sizeof(VkDeviceEventInfoEXT), (count), (err))
#define znewchainVkDeviceEventInfoEXT moonvulkan_znewchainVkDeviceEventInfoEXT
VkDeviceEventInfoEXT* znewchainVkDeviceEventInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDeviceEventInfoEXT moonvulkan_znewchainarrayVkDeviceEventInfoEXT
VkDeviceEventInfoEXT* znewchainarrayVkDeviceEventInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceEventInfoEXT moonvulkan_zcheckVkDeviceEventInfoEXT
VkDeviceEventInfoEXT* zcheckVkDeviceEventInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceEventInfoEXT moonvulkan_zcheckarrayVkDeviceEventInfoEXT
VkDeviceEventInfoEXT* zcheckarrayVkDeviceEventInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceEventInfoEXT moonvulkan_zinitVkDeviceEventInfoEXT
int zinitVkDeviceEventInfoEXT(lua_State *L, VkDeviceEventInfoEXT* p, int *err);
#define zfreeVkDeviceEventInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceEventInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceEventInfoEXT), (count), (base))
#define zpushVkDeviceEventInfoEXT moonvulkan_zpushVkDeviceEventInfoEXT
int zpushVkDeviceEventInfoEXT(lua_State *L, const VkDeviceEventInfoEXT *p);

#define znewVkDisplayEventInfoEXT(L, err) (VkDisplayEventInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, sizeof(VkDisplayEventInfoEXT), (err))
#define znewarrayVkDisplayEventInfoEXT(L, count, err) (VkDisplayEventInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, sizeof(VkDisplayEventInfoEXT), (count), (err))
#define znewchainVkDisplayEventInfoEXT moonvulkan_znewchainVkDisplayEventInfoEXT
VkDisplayEventInfoEXT* znewchainVkDisplayEventInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDisplayEventInfoEXT moonvulkan_znewchainarrayVkDisplayEventInfoEXT
VkDisplayEventInfoEXT* znewchainarrayVkDisplayEventInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayEventInfoEXT moonvulkan_zcheckVkDisplayEventInfoEXT
VkDisplayEventInfoEXT* zcheckVkDisplayEventInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayEventInfoEXT moonvulkan_zcheckarrayVkDisplayEventInfoEXT
VkDisplayEventInfoEXT* zcheckarrayVkDisplayEventInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayEventInfoEXT moonvulkan_zinitVkDisplayEventInfoEXT
int zinitVkDisplayEventInfoEXT(lua_State *L, VkDisplayEventInfoEXT* p, int *err);
#define zfreeVkDisplayEventInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayEventInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayEventInfoEXT), (count), (base))
#define zpushVkDisplayEventInfoEXT moonvulkan_zpushVkDisplayEventInfoEXT
int zpushVkDisplayEventInfoEXT(lua_State *L, const VkDisplayEventInfoEXT *p);

#define znewVkImportFenceFdInfoKHR(L, err) (VkImportFenceFdInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, sizeof(VkImportFenceFdInfoKHR), (err))
#define znewarrayVkImportFenceFdInfoKHR(L, count, err) (VkImportFenceFdInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, sizeof(VkImportFenceFdInfoKHR), (count), (err))
#define znewchainVkImportFenceFdInfoKHR moonvulkan_znewchainVkImportFenceFdInfoKHR
VkImportFenceFdInfoKHR* znewchainVkImportFenceFdInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImportFenceFdInfoKHR moonvulkan_znewchainarrayVkImportFenceFdInfoKHR
VkImportFenceFdInfoKHR* znewchainarrayVkImportFenceFdInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportFenceFdInfoKHR moonvulkan_zcheckVkImportFenceFdInfoKHR
VkImportFenceFdInfoKHR* zcheckVkImportFenceFdInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportFenceFdInfoKHR moonvulkan_zcheckarrayVkImportFenceFdInfoKHR
VkImportFenceFdInfoKHR* zcheckarrayVkImportFenceFdInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportFenceFdInfoKHR moonvulkan_zinitVkImportFenceFdInfoKHR
int zinitVkImportFenceFdInfoKHR(lua_State *L, VkImportFenceFdInfoKHR* p, int *err);
#define zfreeVkImportFenceFdInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportFenceFdInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImportFenceFdInfoKHR), (count), (base))
#define zpushVkImportFenceFdInfoKHR moonvulkan_zpushVkImportFenceFdInfoKHR
int zpushVkImportFenceFdInfoKHR(lua_State *L, const VkImportFenceFdInfoKHR *p);

#define znewVkFenceGetFdInfoKHR(L, err) (VkFenceGetFdInfoKHR*)znew((L), VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, sizeof(VkFenceGetFdInfoKHR), (err))
#define znewarrayVkFenceGetFdInfoKHR(L, count, err) (VkFenceGetFdInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, sizeof(VkFenceGetFdInfoKHR), (count), (err))
#define znewchainVkFenceGetFdInfoKHR moonvulkan_znewchainVkFenceGetFdInfoKHR
VkFenceGetFdInfoKHR* znewchainVkFenceGetFdInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkFenceGetFdInfoKHR moonvulkan_znewchainarrayVkFenceGetFdInfoKHR
VkFenceGetFdInfoKHR* znewchainarrayVkFenceGetFdInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkFenceGetFdInfoKHR moonvulkan_zcheckVkFenceGetFdInfoKHR
VkFenceGetFdInfoKHR* zcheckVkFenceGetFdInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkFenceGetFdInfoKHR moonvulkan_zcheckarrayVkFenceGetFdInfoKHR
VkFenceGetFdInfoKHR* zcheckarrayVkFenceGetFdInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFenceGetFdInfoKHR moonvulkan_zinitVkFenceGetFdInfoKHR
int zinitVkFenceGetFdInfoKHR(lua_State *L, VkFenceGetFdInfoKHR* p, int *err);
#define zfreeVkFenceGetFdInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFenceGetFdInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkFenceGetFdInfoKHR), (count), (base))
#define zpushVkFenceGetFdInfoKHR moonvulkan_zpushVkFenceGetFdInfoKHR
int zpushVkFenceGetFdInfoKHR(lua_State *L, const VkFenceGetFdInfoKHR *p);

#define znewVkImportSemaphoreFdInfoKHR(L, err) (VkImportSemaphoreFdInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, sizeof(VkImportSemaphoreFdInfoKHR), (err))
#define znewarrayVkImportSemaphoreFdInfoKHR(L, count, err) (VkImportSemaphoreFdInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, sizeof(VkImportSemaphoreFdInfoKHR), (count), (err))
#define znewchainVkImportSemaphoreFdInfoKHR moonvulkan_znewchainVkImportSemaphoreFdInfoKHR
VkImportSemaphoreFdInfoKHR* znewchainVkImportSemaphoreFdInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImportSemaphoreFdInfoKHR moonvulkan_znewchainarrayVkImportSemaphoreFdInfoKHR
VkImportSemaphoreFdInfoKHR* znewchainarrayVkImportSemaphoreFdInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportSemaphoreFdInfoKHR moonvulkan_zcheckVkImportSemaphoreFdInfoKHR
VkImportSemaphoreFdInfoKHR* zcheckVkImportSemaphoreFdInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportSemaphoreFdInfoKHR moonvulkan_zcheckarrayVkImportSemaphoreFdInfoKHR
VkImportSemaphoreFdInfoKHR* zcheckarrayVkImportSemaphoreFdInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportSemaphoreFdInfoKHR moonvulkan_zinitVkImportSemaphoreFdInfoKHR
int zinitVkImportSemaphoreFdInfoKHR(lua_State *L, VkImportSemaphoreFdInfoKHR* p, int *err);
#define zfreeVkImportSemaphoreFdInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportSemaphoreFdInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImportSemaphoreFdInfoKHR), (count), (base))
#define zpushVkImportSemaphoreFdInfoKHR moonvulkan_zpushVkImportSemaphoreFdInfoKHR
int zpushVkImportSemaphoreFdInfoKHR(lua_State *L, const VkImportSemaphoreFdInfoKHR *p);

#define znewVkSemaphoreGetFdInfoKHR(L, err) (VkSemaphoreGetFdInfoKHR*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, sizeof(VkSemaphoreGetFdInfoKHR), (err))
#define znewarrayVkSemaphoreGetFdInfoKHR(L, count, err) (VkSemaphoreGetFdInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, sizeof(VkSemaphoreGetFdInfoKHR), (count), (err))
#define znewchainVkSemaphoreGetFdInfoKHR moonvulkan_znewchainVkSemaphoreGetFdInfoKHR
VkSemaphoreGetFdInfoKHR* znewchainVkSemaphoreGetFdInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreGetFdInfoKHR moonvulkan_znewchainarrayVkSemaphoreGetFdInfoKHR
VkSemaphoreGetFdInfoKHR* znewchainarrayVkSemaphoreGetFdInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreGetFdInfoKHR moonvulkan_zcheckVkSemaphoreGetFdInfoKHR
VkSemaphoreGetFdInfoKHR* zcheckVkSemaphoreGetFdInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreGetFdInfoKHR moonvulkan_zcheckarrayVkSemaphoreGetFdInfoKHR
VkSemaphoreGetFdInfoKHR* zcheckarrayVkSemaphoreGetFdInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreGetFdInfoKHR moonvulkan_zinitVkSemaphoreGetFdInfoKHR
int zinitVkSemaphoreGetFdInfoKHR(lua_State *L, VkSemaphoreGetFdInfoKHR* p, int *err);
#define zfreeVkSemaphoreGetFdInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreGetFdInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreGetFdInfoKHR), (count), (base))
#define zpushVkSemaphoreGetFdInfoKHR moonvulkan_zpushVkSemaphoreGetFdInfoKHR
int zpushVkSemaphoreGetFdInfoKHR(lua_State *L, const VkSemaphoreGetFdInfoKHR *p);

#define znewVkExternalBufferPropertiesKHR(L, err) (VkExternalBufferPropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR, sizeof(VkExternalBufferPropertiesKHR), (err))
#define znewarrayVkExternalBufferPropertiesKHR(L, count, err) (VkExternalBufferPropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR, sizeof(VkExternalBufferPropertiesKHR), (count), (err))
#define znewchainVkExternalBufferPropertiesKHR moonvulkan_znewchainVkExternalBufferPropertiesKHR
VkExternalBufferPropertiesKHR* znewchainVkExternalBufferPropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkExternalBufferPropertiesKHR moonvulkan_znewchainarrayVkExternalBufferPropertiesKHR
VkExternalBufferPropertiesKHR* znewchainarrayVkExternalBufferPropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExternalBufferPropertiesKHR moonvulkan_zcheckVkExternalBufferPropertiesKHR
VkExternalBufferPropertiesKHR* zcheckVkExternalBufferPropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExternalBufferPropertiesKHR moonvulkan_zcheckarrayVkExternalBufferPropertiesKHR
VkExternalBufferPropertiesKHR* zcheckarrayVkExternalBufferPropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExternalBufferPropertiesKHR moonvulkan_zinitVkExternalBufferPropertiesKHR
int zinitVkExternalBufferPropertiesKHR(lua_State *L, VkExternalBufferPropertiesKHR* p, int *err);
#define zfreeVkExternalBufferPropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExternalBufferPropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExternalBufferPropertiesKHR), (count), (base))
#define zpushVkExternalBufferPropertiesKHR moonvulkan_zpushVkExternalBufferPropertiesKHR
int zpushVkExternalBufferPropertiesKHR(lua_State *L, const VkExternalBufferPropertiesKHR *p);

#define znewVkPhysicalDeviceExternalBufferInfoKHR(L, err) (VkPhysicalDeviceExternalBufferInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR, sizeof(VkPhysicalDeviceExternalBufferInfoKHR), (err))
#define znewarrayVkPhysicalDeviceExternalBufferInfoKHR(L, count, err) (VkPhysicalDeviceExternalBufferInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR, sizeof(VkPhysicalDeviceExternalBufferInfoKHR), (count), (err))
#define znewchainVkPhysicalDeviceExternalBufferInfoKHR moonvulkan_znewchainVkPhysicalDeviceExternalBufferInfoKHR
VkPhysicalDeviceExternalBufferInfoKHR* znewchainVkPhysicalDeviceExternalBufferInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceExternalBufferInfoKHR moonvulkan_znewchainarrayVkPhysicalDeviceExternalBufferInfoKHR
VkPhysicalDeviceExternalBufferInfoKHR* znewchainarrayVkPhysicalDeviceExternalBufferInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceExternalBufferInfoKHR moonvulkan_zcheckVkPhysicalDeviceExternalBufferInfoKHR
VkPhysicalDeviceExternalBufferInfoKHR* zcheckVkPhysicalDeviceExternalBufferInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceExternalBufferInfoKHR moonvulkan_zcheckarrayVkPhysicalDeviceExternalBufferInfoKHR
VkPhysicalDeviceExternalBufferInfoKHR* zcheckarrayVkPhysicalDeviceExternalBufferInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceExternalBufferInfoKHR moonvulkan_zinitVkPhysicalDeviceExternalBufferInfoKHR
int zinitVkPhysicalDeviceExternalBufferInfoKHR(lua_State *L, VkPhysicalDeviceExternalBufferInfoKHR* p, int *err);
#define zfreeVkPhysicalDeviceExternalBufferInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceExternalBufferInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceExternalBufferInfoKHR), (count), (base))
#define zpushVkPhysicalDeviceExternalBufferInfoKHR moonvulkan_zpushVkPhysicalDeviceExternalBufferInfoKHR
int zpushVkPhysicalDeviceExternalBufferInfoKHR(lua_State *L, const VkPhysicalDeviceExternalBufferInfoKHR *p);

#define znewVkExternalFencePropertiesKHR(L, err) (VkExternalFencePropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR, sizeof(VkExternalFencePropertiesKHR), (err))
#define znewarrayVkExternalFencePropertiesKHR(L, count, err) (VkExternalFencePropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR, sizeof(VkExternalFencePropertiesKHR), (count), (err))
#define znewchainVkExternalFencePropertiesKHR moonvulkan_znewchainVkExternalFencePropertiesKHR
VkExternalFencePropertiesKHR* znewchainVkExternalFencePropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkExternalFencePropertiesKHR moonvulkan_znewchainarrayVkExternalFencePropertiesKHR
VkExternalFencePropertiesKHR* znewchainarrayVkExternalFencePropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExternalFencePropertiesKHR moonvulkan_zcheckVkExternalFencePropertiesKHR
VkExternalFencePropertiesKHR* zcheckVkExternalFencePropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExternalFencePropertiesKHR moonvulkan_zcheckarrayVkExternalFencePropertiesKHR
VkExternalFencePropertiesKHR* zcheckarrayVkExternalFencePropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExternalFencePropertiesKHR moonvulkan_zinitVkExternalFencePropertiesKHR
int zinitVkExternalFencePropertiesKHR(lua_State *L, VkExternalFencePropertiesKHR* p, int *err);
#define zfreeVkExternalFencePropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExternalFencePropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExternalFencePropertiesKHR), (count), (base))
#define zpushVkExternalFencePropertiesKHR moonvulkan_zpushVkExternalFencePropertiesKHR
int zpushVkExternalFencePropertiesKHR(lua_State *L, const VkExternalFencePropertiesKHR *p);

#define znewVkPhysicalDeviceExternalFenceInfoKHR(L, err) (VkPhysicalDeviceExternalFenceInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR, sizeof(VkPhysicalDeviceExternalFenceInfoKHR), (err))
#define znewarrayVkPhysicalDeviceExternalFenceInfoKHR(L, count, err) (VkPhysicalDeviceExternalFenceInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR, sizeof(VkPhysicalDeviceExternalFenceInfoKHR), (count), (err))
#define znewchainVkPhysicalDeviceExternalFenceInfoKHR moonvulkan_znewchainVkPhysicalDeviceExternalFenceInfoKHR
VkPhysicalDeviceExternalFenceInfoKHR* znewchainVkPhysicalDeviceExternalFenceInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceExternalFenceInfoKHR moonvulkan_znewchainarrayVkPhysicalDeviceExternalFenceInfoKHR
VkPhysicalDeviceExternalFenceInfoKHR* znewchainarrayVkPhysicalDeviceExternalFenceInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceExternalFenceInfoKHR moonvulkan_zcheckVkPhysicalDeviceExternalFenceInfoKHR
VkPhysicalDeviceExternalFenceInfoKHR* zcheckVkPhysicalDeviceExternalFenceInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceExternalFenceInfoKHR moonvulkan_zcheckarrayVkPhysicalDeviceExternalFenceInfoKHR
VkPhysicalDeviceExternalFenceInfoKHR* zcheckarrayVkPhysicalDeviceExternalFenceInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceExternalFenceInfoKHR moonvulkan_zinitVkPhysicalDeviceExternalFenceInfoKHR
int zinitVkPhysicalDeviceExternalFenceInfoKHR(lua_State *L, VkPhysicalDeviceExternalFenceInfoKHR* p, int *err);
#define zfreeVkPhysicalDeviceExternalFenceInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceExternalFenceInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceExternalFenceInfoKHR), (count), (base))
#define zpushVkPhysicalDeviceExternalFenceInfoKHR moonvulkan_zpushVkPhysicalDeviceExternalFenceInfoKHR
int zpushVkPhysicalDeviceExternalFenceInfoKHR(lua_State *L, const VkPhysicalDeviceExternalFenceInfoKHR *p);

#define znewVkExternalSemaphorePropertiesKHR(L, err) (VkExternalSemaphorePropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR, sizeof(VkExternalSemaphorePropertiesKHR), (err))
#define znewarrayVkExternalSemaphorePropertiesKHR(L, count, err) (VkExternalSemaphorePropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR, sizeof(VkExternalSemaphorePropertiesKHR), (count), (err))
#define znewchainVkExternalSemaphorePropertiesKHR moonvulkan_znewchainVkExternalSemaphorePropertiesKHR
VkExternalSemaphorePropertiesKHR* znewchainVkExternalSemaphorePropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkExternalSemaphorePropertiesKHR moonvulkan_znewchainarrayVkExternalSemaphorePropertiesKHR
VkExternalSemaphorePropertiesKHR* znewchainarrayVkExternalSemaphorePropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExternalSemaphorePropertiesKHR moonvulkan_zcheckVkExternalSemaphorePropertiesKHR
VkExternalSemaphorePropertiesKHR* zcheckVkExternalSemaphorePropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExternalSemaphorePropertiesKHR moonvulkan_zcheckarrayVkExternalSemaphorePropertiesKHR
VkExternalSemaphorePropertiesKHR* zcheckarrayVkExternalSemaphorePropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExternalSemaphorePropertiesKHR moonvulkan_zinitVkExternalSemaphorePropertiesKHR
int zinitVkExternalSemaphorePropertiesKHR(lua_State *L, VkExternalSemaphorePropertiesKHR* p, int *err);
#define zfreeVkExternalSemaphorePropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExternalSemaphorePropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExternalSemaphorePropertiesKHR), (count), (base))
#define zpushVkExternalSemaphorePropertiesKHR moonvulkan_zpushVkExternalSemaphorePropertiesKHR
int zpushVkExternalSemaphorePropertiesKHR(lua_State *L, const VkExternalSemaphorePropertiesKHR *p);

#define znewVkPhysicalDeviceExternalSemaphoreInfo(L, err) (VkPhysicalDeviceExternalSemaphoreInfo*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, sizeof(VkPhysicalDeviceExternalSemaphoreInfo), (err))
#define znewarrayVkPhysicalDeviceExternalSemaphoreInfo(L, count, err) (VkPhysicalDeviceExternalSemaphoreInfo*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, sizeof(VkPhysicalDeviceExternalSemaphoreInfo), (count), (err))
#define znewchainVkPhysicalDeviceExternalSemaphoreInfo moonvulkan_znewchainVkPhysicalDeviceExternalSemaphoreInfo
VkPhysicalDeviceExternalSemaphoreInfo* znewchainVkPhysicalDeviceExternalSemaphoreInfo(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceExternalSemaphoreInfo moonvulkan_znewchainarrayVkPhysicalDeviceExternalSemaphoreInfo
VkPhysicalDeviceExternalSemaphoreInfo* znewchainarrayVkPhysicalDeviceExternalSemaphoreInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceExternalSemaphoreInfo moonvulkan_zcheckVkPhysicalDeviceExternalSemaphoreInfo
VkPhysicalDeviceExternalSemaphoreInfo* zcheckVkPhysicalDeviceExternalSemaphoreInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceExternalSemaphoreInfo moonvulkan_zcheckarrayVkPhysicalDeviceExternalSemaphoreInfo
VkPhysicalDeviceExternalSemaphoreInfo* zcheckarrayVkPhysicalDeviceExternalSemaphoreInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceExternalSemaphoreInfo moonvulkan_zinitVkPhysicalDeviceExternalSemaphoreInfo
int zinitVkPhysicalDeviceExternalSemaphoreInfo(lua_State *L, VkPhysicalDeviceExternalSemaphoreInfo* p, int *err);
#define zfreeVkPhysicalDeviceExternalSemaphoreInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceExternalSemaphoreInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceExternalSemaphoreInfo), (count), (base))
#define zpushVkPhysicalDeviceExternalSemaphoreInfo moonvulkan_zpushVkPhysicalDeviceExternalSemaphoreInfo
int zpushVkPhysicalDeviceExternalSemaphoreInfo(lua_State *L, const VkPhysicalDeviceExternalSemaphoreInfo *p);

#define znewVkPhysicalDeviceSparseImageFormatInfo2(L, err) (VkPhysicalDeviceSparseImageFormatInfo2*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceSparseImageFormatInfo2), (err))
#define znewarrayVkPhysicalDeviceSparseImageFormatInfo2(L, count, err) (VkPhysicalDeviceSparseImageFormatInfo2*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceSparseImageFormatInfo2), (count), (err))
#define znewchainVkPhysicalDeviceSparseImageFormatInfo2 moonvulkan_znewchainVkPhysicalDeviceSparseImageFormatInfo2
VkPhysicalDeviceSparseImageFormatInfo2* znewchainVkPhysicalDeviceSparseImageFormatInfo2(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceSparseImageFormatInfo2 moonvulkan_znewchainarrayVkPhysicalDeviceSparseImageFormatInfo2
VkPhysicalDeviceSparseImageFormatInfo2* znewchainarrayVkPhysicalDeviceSparseImageFormatInfo2(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceSparseImageFormatInfo2 moonvulkan_zcheckVkPhysicalDeviceSparseImageFormatInfo2
VkPhysicalDeviceSparseImageFormatInfo2* zcheckVkPhysicalDeviceSparseImageFormatInfo2(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceSparseImageFormatInfo2 moonvulkan_zcheckarrayVkPhysicalDeviceSparseImageFormatInfo2
VkPhysicalDeviceSparseImageFormatInfo2* zcheckarrayVkPhysicalDeviceSparseImageFormatInfo2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceSparseImageFormatInfo2 moonvulkan_zinitVkPhysicalDeviceSparseImageFormatInfo2
int zinitVkPhysicalDeviceSparseImageFormatInfo2(lua_State *L, VkPhysicalDeviceSparseImageFormatInfo2* p, int *err);
#define zfreeVkPhysicalDeviceSparseImageFormatInfo2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceSparseImageFormatInfo2(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceSparseImageFormatInfo2), (count), (base))
#define zpushVkPhysicalDeviceSparseImageFormatInfo2 moonvulkan_zpushVkPhysicalDeviceSparseImageFormatInfo2
int zpushVkPhysicalDeviceSparseImageFormatInfo2(lua_State *L, const VkPhysicalDeviceSparseImageFormatInfo2 *p);

#define znewVkRenderPassSampleLocationsBeginInfoEXT(L, err) (VkRenderPassSampleLocationsBeginInfoEXT*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, sizeof(VkRenderPassSampleLocationsBeginInfoEXT), (err))
#define znewarrayVkRenderPassSampleLocationsBeginInfoEXT(L, count, err) (VkRenderPassSampleLocationsBeginInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, sizeof(VkRenderPassSampleLocationsBeginInfoEXT), (count), (err))
#define znewchainVkRenderPassSampleLocationsBeginInfoEXT moonvulkan_znewchainVkRenderPassSampleLocationsBeginInfoEXT
VkRenderPassSampleLocationsBeginInfoEXT* znewchainVkRenderPassSampleLocationsBeginInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkRenderPassSampleLocationsBeginInfoEXT moonvulkan_znewchainarrayVkRenderPassSampleLocationsBeginInfoEXT
VkRenderPassSampleLocationsBeginInfoEXT* znewchainarrayVkRenderPassSampleLocationsBeginInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassSampleLocationsBeginInfoEXT moonvulkan_zcheckVkRenderPassSampleLocationsBeginInfoEXT
VkRenderPassSampleLocationsBeginInfoEXT* zcheckVkRenderPassSampleLocationsBeginInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassSampleLocationsBeginInfoEXT moonvulkan_zcheckarrayVkRenderPassSampleLocationsBeginInfoEXT
VkRenderPassSampleLocationsBeginInfoEXT* zcheckarrayVkRenderPassSampleLocationsBeginInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassSampleLocationsBeginInfoEXT moonvulkan_zinitVkRenderPassSampleLocationsBeginInfoEXT
int zinitVkRenderPassSampleLocationsBeginInfoEXT(lua_State *L, VkRenderPassSampleLocationsBeginInfoEXT* p, int *err);
#define zfreeVkRenderPassSampleLocationsBeginInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassSampleLocationsBeginInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassSampleLocationsBeginInfoEXT), (count), (base))
#define zpushVkRenderPassSampleLocationsBeginInfoEXT moonvulkan_zpushVkRenderPassSampleLocationsBeginInfoEXT
int zpushVkRenderPassSampleLocationsBeginInfoEXT(lua_State *L, const VkRenderPassSampleLocationsBeginInfoEXT *p);

#define znewVkRenderPassBeginInfo(L, err) (VkRenderPassBeginInfo*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, sizeof(VkRenderPassBeginInfo), (err))
#define znewarrayVkRenderPassBeginInfo(L, count, err) (VkRenderPassBeginInfo*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, sizeof(VkRenderPassBeginInfo), (count), (err))
#define znewchainVkRenderPassBeginInfo moonvulkan_znewchainVkRenderPassBeginInfo
VkRenderPassBeginInfo* znewchainVkRenderPassBeginInfo(lua_State *L, int *err);
#define znewchainarrayVkRenderPassBeginInfo moonvulkan_znewchainarrayVkRenderPassBeginInfo
VkRenderPassBeginInfo* znewchainarrayVkRenderPassBeginInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassBeginInfo moonvulkan_zcheckVkRenderPassBeginInfo
VkRenderPassBeginInfo* zcheckVkRenderPassBeginInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassBeginInfo moonvulkan_zcheckarrayVkRenderPassBeginInfo
VkRenderPassBeginInfo* zcheckarrayVkRenderPassBeginInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassBeginInfo moonvulkan_zinitVkRenderPassBeginInfo
int zinitVkRenderPassBeginInfo(lua_State *L, VkRenderPassBeginInfo* p, int *err);
#define zfreeVkRenderPassBeginInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassBeginInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassBeginInfo), (count), (base))
#define zpushVkRenderPassBeginInfo moonvulkan_zpushVkRenderPassBeginInfo
int zpushVkRenderPassBeginInfo(lua_State *L, const VkRenderPassBeginInfo *p);

#define znewVkPhysicalDeviceExternalImageFormatInfoKHR(L, err) (VkPhysicalDeviceExternalImageFormatInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR), (err))
#define znewarrayVkPhysicalDeviceExternalImageFormatInfoKHR(L, count, err) (VkPhysicalDeviceExternalImageFormatInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR, sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR), (count), (err))
#define znewchainVkPhysicalDeviceExternalImageFormatInfoKHR moonvulkan_znewchainVkPhysicalDeviceExternalImageFormatInfoKHR
VkPhysicalDeviceExternalImageFormatInfoKHR* znewchainVkPhysicalDeviceExternalImageFormatInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceExternalImageFormatInfoKHR moonvulkan_znewchainarrayVkPhysicalDeviceExternalImageFormatInfoKHR
VkPhysicalDeviceExternalImageFormatInfoKHR* znewchainarrayVkPhysicalDeviceExternalImageFormatInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceExternalImageFormatInfoKHR moonvulkan_zcheckVkPhysicalDeviceExternalImageFormatInfoKHR
VkPhysicalDeviceExternalImageFormatInfoKHR* zcheckVkPhysicalDeviceExternalImageFormatInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceExternalImageFormatInfoKHR moonvulkan_zcheckarrayVkPhysicalDeviceExternalImageFormatInfoKHR
VkPhysicalDeviceExternalImageFormatInfoKHR* zcheckarrayVkPhysicalDeviceExternalImageFormatInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceExternalImageFormatInfoKHR moonvulkan_zinitVkPhysicalDeviceExternalImageFormatInfoKHR
int zinitVkPhysicalDeviceExternalImageFormatInfoKHR(lua_State *L, VkPhysicalDeviceExternalImageFormatInfoKHR* p, int *err);
#define zfreeVkPhysicalDeviceExternalImageFormatInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceExternalImageFormatInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR), (count), (base))
#define zpushVkPhysicalDeviceExternalImageFormatInfoKHR moonvulkan_zpushVkPhysicalDeviceExternalImageFormatInfoKHR
int zpushVkPhysicalDeviceExternalImageFormatInfoKHR(lua_State *L, const VkPhysicalDeviceExternalImageFormatInfoKHR *p);

#define znewVkPhysicalDeviceImageFormatInfo2(L, err) (VkPhysicalDeviceImageFormatInfo2*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceImageFormatInfo2), (err))
#define znewarrayVkPhysicalDeviceImageFormatInfo2(L, count, err) (VkPhysicalDeviceImageFormatInfo2*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceImageFormatInfo2), (count), (err))
#define znewchainVkPhysicalDeviceImageFormatInfo2 moonvulkan_znewchainVkPhysicalDeviceImageFormatInfo2
VkPhysicalDeviceImageFormatInfo2* znewchainVkPhysicalDeviceImageFormatInfo2(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceImageFormatInfo2 moonvulkan_znewchainarrayVkPhysicalDeviceImageFormatInfo2
VkPhysicalDeviceImageFormatInfo2* znewchainarrayVkPhysicalDeviceImageFormatInfo2(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceImageFormatInfo2 moonvulkan_zcheckVkPhysicalDeviceImageFormatInfo2
VkPhysicalDeviceImageFormatInfo2* zcheckVkPhysicalDeviceImageFormatInfo2(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceImageFormatInfo2 moonvulkan_zcheckarrayVkPhysicalDeviceImageFormatInfo2
VkPhysicalDeviceImageFormatInfo2* zcheckarrayVkPhysicalDeviceImageFormatInfo2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceImageFormatInfo2 moonvulkan_zinitVkPhysicalDeviceImageFormatInfo2
int zinitVkPhysicalDeviceImageFormatInfo2(lua_State *L, VkPhysicalDeviceImageFormatInfo2* p, int *err);
#define zfreeVkPhysicalDeviceImageFormatInfo2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceImageFormatInfo2(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceImageFormatInfo2), (count), (base))
#define zpushVkPhysicalDeviceImageFormatInfo2 moonvulkan_zpushVkPhysicalDeviceImageFormatInfo2
int zpushVkPhysicalDeviceImageFormatInfo2(lua_State *L, const VkPhysicalDeviceImageFormatInfo2 *p);

#define znewVkDisplayModeCreateInfoKHR(L, err) (VkDisplayModeCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, sizeof(VkDisplayModeCreateInfoKHR), (err))
#define znewarrayVkDisplayModeCreateInfoKHR(L, count, err) (VkDisplayModeCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, sizeof(VkDisplayModeCreateInfoKHR), (count), (err))
#define znewchainVkDisplayModeCreateInfoKHR moonvulkan_znewchainVkDisplayModeCreateInfoKHR
VkDisplayModeCreateInfoKHR* znewchainVkDisplayModeCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayModeCreateInfoKHR moonvulkan_znewchainarrayVkDisplayModeCreateInfoKHR
VkDisplayModeCreateInfoKHR* znewchainarrayVkDisplayModeCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayModeCreateInfoKHR moonvulkan_zcheckVkDisplayModeCreateInfoKHR
VkDisplayModeCreateInfoKHR* zcheckVkDisplayModeCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayModeCreateInfoKHR moonvulkan_zcheckarrayVkDisplayModeCreateInfoKHR
VkDisplayModeCreateInfoKHR* zcheckarrayVkDisplayModeCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayModeCreateInfoKHR moonvulkan_zinitVkDisplayModeCreateInfoKHR
int zinitVkDisplayModeCreateInfoKHR(lua_State *L, VkDisplayModeCreateInfoKHR* p, int *err);
#define zfreeVkDisplayModeCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayModeCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayModeCreateInfoKHR), (count), (base))
#define zpushVkDisplayModeCreateInfoKHR moonvulkan_zpushVkDisplayModeCreateInfoKHR
int zpushVkDisplayModeCreateInfoKHR(lua_State *L, const VkDisplayModeCreateInfoKHR *p);

#define znewVkPhysicalDeviceSurfaceInfo2KHR(L, err) (VkPhysicalDeviceSurfaceInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, sizeof(VkPhysicalDeviceSurfaceInfo2KHR), (err))
#define znewarrayVkPhysicalDeviceSurfaceInfo2KHR(L, count, err) (VkPhysicalDeviceSurfaceInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, sizeof(VkPhysicalDeviceSurfaceInfo2KHR), (count), (err))
#define znewchainVkPhysicalDeviceSurfaceInfo2KHR moonvulkan_znewchainVkPhysicalDeviceSurfaceInfo2KHR
VkPhysicalDeviceSurfaceInfo2KHR* znewchainVkPhysicalDeviceSurfaceInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceSurfaceInfo2KHR moonvulkan_znewchainarrayVkPhysicalDeviceSurfaceInfo2KHR
VkPhysicalDeviceSurfaceInfo2KHR* znewchainarrayVkPhysicalDeviceSurfaceInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceSurfaceInfo2KHR moonvulkan_zcheckVkPhysicalDeviceSurfaceInfo2KHR
VkPhysicalDeviceSurfaceInfo2KHR* zcheckVkPhysicalDeviceSurfaceInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceSurfaceInfo2KHR moonvulkan_zcheckarrayVkPhysicalDeviceSurfaceInfo2KHR
VkPhysicalDeviceSurfaceInfo2KHR* zcheckarrayVkPhysicalDeviceSurfaceInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceSurfaceInfo2KHR moonvulkan_zinitVkPhysicalDeviceSurfaceInfo2KHR
int zinitVkPhysicalDeviceSurfaceInfo2KHR(lua_State *L, VkPhysicalDeviceSurfaceInfo2KHR* p, int *err);
#define zfreeVkPhysicalDeviceSurfaceInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceSurfaceInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceSurfaceInfo2KHR), (count), (base))
#define zpushVkPhysicalDeviceSurfaceInfo2KHR moonvulkan_zpushVkPhysicalDeviceSurfaceInfo2KHR
int zpushVkPhysicalDeviceSurfaceInfo2KHR(lua_State *L, const VkPhysicalDeviceSurfaceInfo2KHR *p);

#define znewVkProtectedSubmitInfo(L, err) (VkProtectedSubmitInfo*)znew((L), VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, sizeof(VkProtectedSubmitInfo), (err))
#define znewarrayVkProtectedSubmitInfo(L, count, err) (VkProtectedSubmitInfo*)znewarray((L), VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, sizeof(VkProtectedSubmitInfo), (count), (err))
#define znewchainVkProtectedSubmitInfo moonvulkan_znewchainVkProtectedSubmitInfo
VkProtectedSubmitInfo* znewchainVkProtectedSubmitInfo(lua_State *L, int *err);
#define znewchainarrayVkProtectedSubmitInfo moonvulkan_znewchainarrayVkProtectedSubmitInfo
VkProtectedSubmitInfo* znewchainarrayVkProtectedSubmitInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkProtectedSubmitInfo moonvulkan_zcheckVkProtectedSubmitInfo
VkProtectedSubmitInfo* zcheckVkProtectedSubmitInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkProtectedSubmitInfo moonvulkan_zcheckarrayVkProtectedSubmitInfo
VkProtectedSubmitInfo* zcheckarrayVkProtectedSubmitInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkProtectedSubmitInfo moonvulkan_zinitVkProtectedSubmitInfo
int zinitVkProtectedSubmitInfo(lua_State *L, VkProtectedSubmitInfo* p, int *err);
#define zfreeVkProtectedSubmitInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkProtectedSubmitInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkProtectedSubmitInfo), (count), (base))
#define zpushVkProtectedSubmitInfo moonvulkan_zpushVkProtectedSubmitInfo
int zpushVkProtectedSubmitInfo(lua_State *L, const VkProtectedSubmitInfo *p);

#define znewVkPipelineRasterizationConservativeStateCreateInfoEXT(L, err) (VkPipelineRasterizationConservativeStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT), (err))
#define znewarrayVkPipelineRasterizationConservativeStateCreateInfoEXT(L, count, err) (VkPipelineRasterizationConservativeStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineRasterizationConservativeStateCreateInfoEXT moonvulkan_znewchainVkPipelineRasterizationConservativeStateCreateInfoEXT
VkPipelineRasterizationConservativeStateCreateInfoEXT* znewchainVkPipelineRasterizationConservativeStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineRasterizationConservativeStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineRasterizationConservativeStateCreateInfoEXT
VkPipelineRasterizationConservativeStateCreateInfoEXT* znewchainarrayVkPipelineRasterizationConservativeStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRasterizationConservativeStateCreateInfoEXT moonvulkan_zcheckVkPipelineRasterizationConservativeStateCreateInfoEXT
VkPipelineRasterizationConservativeStateCreateInfoEXT* zcheckVkPipelineRasterizationConservativeStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRasterizationConservativeStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineRasterizationConservativeStateCreateInfoEXT
VkPipelineRasterizationConservativeStateCreateInfoEXT* zcheckarrayVkPipelineRasterizationConservativeStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRasterizationConservativeStateCreateInfoEXT moonvulkan_zinitVkPipelineRasterizationConservativeStateCreateInfoEXT
int zinitVkPipelineRasterizationConservativeStateCreateInfoEXT(lua_State *L, VkPipelineRasterizationConservativeStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineRasterizationConservativeStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRasterizationConservativeStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineRasterizationConservativeStateCreateInfoEXT moonvulkan_zpushVkPipelineRasterizationConservativeStateCreateInfoEXT
int zpushVkPipelineRasterizationConservativeStateCreateInfoEXT(lua_State *L, const VkPipelineRasterizationConservativeStateCreateInfoEXT *p);

#define znewVkPipelineRasterizationStateStreamCreateInfoEXT(L, err) (VkPipelineRasterizationStateStreamCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT), (err))
#define znewarrayVkPipelineRasterizationStateStreamCreateInfoEXT(L, count, err) (VkPipelineRasterizationStateStreamCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT), (count), (err))
#define znewchainVkPipelineRasterizationStateStreamCreateInfoEXT moonvulkan_znewchainVkPipelineRasterizationStateStreamCreateInfoEXT
VkPipelineRasterizationStateStreamCreateInfoEXT* znewchainVkPipelineRasterizationStateStreamCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineRasterizationStateStreamCreateInfoEXT moonvulkan_znewchainarrayVkPipelineRasterizationStateStreamCreateInfoEXT
VkPipelineRasterizationStateStreamCreateInfoEXT* znewchainarrayVkPipelineRasterizationStateStreamCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRasterizationStateStreamCreateInfoEXT moonvulkan_zcheckVkPipelineRasterizationStateStreamCreateInfoEXT
VkPipelineRasterizationStateStreamCreateInfoEXT* zcheckVkPipelineRasterizationStateStreamCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRasterizationStateStreamCreateInfoEXT moonvulkan_zcheckarrayVkPipelineRasterizationStateStreamCreateInfoEXT
VkPipelineRasterizationStateStreamCreateInfoEXT* zcheckarrayVkPipelineRasterizationStateStreamCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRasterizationStateStreamCreateInfoEXT moonvulkan_zinitVkPipelineRasterizationStateStreamCreateInfoEXT
int zinitVkPipelineRasterizationStateStreamCreateInfoEXT(lua_State *L, VkPipelineRasterizationStateStreamCreateInfoEXT* p, int *err);
#define zfreeVkPipelineRasterizationStateStreamCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRasterizationStateStreamCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT), (count), (base))
#define zpushVkPipelineRasterizationStateStreamCreateInfoEXT moonvulkan_zpushVkPipelineRasterizationStateStreamCreateInfoEXT
int zpushVkPipelineRasterizationStateStreamCreateInfoEXT(lua_State *L, const VkPipelineRasterizationStateStreamCreateInfoEXT *p);

#define znewVkImageViewASTCDecodeModeEXT(L, err) (VkImageViewASTCDecodeModeEXT*)znew((L), VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, sizeof(VkImageViewASTCDecodeModeEXT), (err))
#define znewarrayVkImageViewASTCDecodeModeEXT(L, count, err) (VkImageViewASTCDecodeModeEXT*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, sizeof(VkImageViewASTCDecodeModeEXT), (count), (err))
#define znewchainVkImageViewASTCDecodeModeEXT moonvulkan_znewchainVkImageViewASTCDecodeModeEXT
VkImageViewASTCDecodeModeEXT* znewchainVkImageViewASTCDecodeModeEXT(lua_State *L, int *err);
#define znewchainarrayVkImageViewASTCDecodeModeEXT moonvulkan_znewchainarrayVkImageViewASTCDecodeModeEXT
VkImageViewASTCDecodeModeEXT* znewchainarrayVkImageViewASTCDecodeModeEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageViewASTCDecodeModeEXT moonvulkan_zcheckVkImageViewASTCDecodeModeEXT
VkImageViewASTCDecodeModeEXT* zcheckVkImageViewASTCDecodeModeEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageViewASTCDecodeModeEXT moonvulkan_zcheckarrayVkImageViewASTCDecodeModeEXT
VkImageViewASTCDecodeModeEXT* zcheckarrayVkImageViewASTCDecodeModeEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageViewASTCDecodeModeEXT moonvulkan_zinitVkImageViewASTCDecodeModeEXT
int zinitVkImageViewASTCDecodeModeEXT(lua_State *L, VkImageViewASTCDecodeModeEXT* p, int *err);
#define zfreeVkImageViewASTCDecodeModeEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageViewASTCDecodeModeEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkImageViewASTCDecodeModeEXT), (count), (base))
#define zpushVkImageViewASTCDecodeModeEXT moonvulkan_zpushVkImageViewASTCDecodeModeEXT
int zpushVkImageViewASTCDecodeModeEXT(lua_State *L, const VkImageViewASTCDecodeModeEXT *p);

#define znewVkPipelineVertexInputDivisorStateCreateInfoEXT(L, err) (VkPipelineVertexInputDivisorStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT), (err))
#define znewarrayVkPipelineVertexInputDivisorStateCreateInfoEXT(L, count, err) (VkPipelineVertexInputDivisorStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineVertexInputDivisorStateCreateInfoEXT moonvulkan_znewchainVkPipelineVertexInputDivisorStateCreateInfoEXT
VkPipelineVertexInputDivisorStateCreateInfoEXT* znewchainVkPipelineVertexInputDivisorStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineVertexInputDivisorStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineVertexInputDivisorStateCreateInfoEXT
VkPipelineVertexInputDivisorStateCreateInfoEXT* znewchainarrayVkPipelineVertexInputDivisorStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineVertexInputDivisorStateCreateInfoEXT moonvulkan_zcheckVkPipelineVertexInputDivisorStateCreateInfoEXT
VkPipelineVertexInputDivisorStateCreateInfoEXT* zcheckVkPipelineVertexInputDivisorStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineVertexInputDivisorStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineVertexInputDivisorStateCreateInfoEXT
VkPipelineVertexInputDivisorStateCreateInfoEXT* zcheckarrayVkPipelineVertexInputDivisorStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineVertexInputDivisorStateCreateInfoEXT moonvulkan_zinitVkPipelineVertexInputDivisorStateCreateInfoEXT
int zinitVkPipelineVertexInputDivisorStateCreateInfoEXT(lua_State *L, VkPipelineVertexInputDivisorStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineVertexInputDivisorStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineVertexInputDivisorStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineVertexInputDivisorStateCreateInfoEXT moonvulkan_zpushVkPipelineVertexInputDivisorStateCreateInfoEXT
int zpushVkPipelineVertexInputDivisorStateCreateInfoEXT(lua_State *L, const VkPipelineVertexInputDivisorStateCreateInfoEXT *p);

#define znewVkWriteDescriptorSetInlineUniformBlockEXT(L, err) (VkWriteDescriptorSetInlineUniformBlockEXT*)znew((L), VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT), (err))
#define znewarrayVkWriteDescriptorSetInlineUniformBlockEXT(L, count, err) (VkWriteDescriptorSetInlineUniformBlockEXT*)znewarray((L), VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, sizeof(VkWriteDescriptorSetInlineUniformBlockEXT), (count), (err))
#define znewchainVkWriteDescriptorSetInlineUniformBlockEXT moonvulkan_znewchainVkWriteDescriptorSetInlineUniformBlockEXT
VkWriteDescriptorSetInlineUniformBlockEXT* znewchainVkWriteDescriptorSetInlineUniformBlockEXT(lua_State *L, int *err);
#define znewchainarrayVkWriteDescriptorSetInlineUniformBlockEXT moonvulkan_znewchainarrayVkWriteDescriptorSetInlineUniformBlockEXT
VkWriteDescriptorSetInlineUniformBlockEXT* znewchainarrayVkWriteDescriptorSetInlineUniformBlockEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkWriteDescriptorSetInlineUniformBlockEXT moonvulkan_zcheckVkWriteDescriptorSetInlineUniformBlockEXT
VkWriteDescriptorSetInlineUniformBlockEXT* zcheckVkWriteDescriptorSetInlineUniformBlockEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkWriteDescriptorSetInlineUniformBlockEXT moonvulkan_zcheckarrayVkWriteDescriptorSetInlineUniformBlockEXT
VkWriteDescriptorSetInlineUniformBlockEXT* zcheckarrayVkWriteDescriptorSetInlineUniformBlockEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkWriteDescriptorSetInlineUniformBlockEXT moonvulkan_zinitVkWriteDescriptorSetInlineUniformBlockEXT
int zinitVkWriteDescriptorSetInlineUniformBlockEXT(lua_State *L, VkWriteDescriptorSetInlineUniformBlockEXT* p, int *err);
#define zfreeVkWriteDescriptorSetInlineUniformBlockEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkWriteDescriptorSetInlineUniformBlockEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkWriteDescriptorSetInlineUniformBlockEXT), (count), (base))
#define zpushVkWriteDescriptorSetInlineUniformBlockEXT moonvulkan_zpushVkWriteDescriptorSetInlineUniformBlockEXT
int zpushVkWriteDescriptorSetInlineUniformBlockEXT(lua_State *L, const VkWriteDescriptorSetInlineUniformBlockEXT *p);

#define znewVkDescriptorPoolInlineUniformBlockCreateInfoEXT(L, err) (VkDescriptorPoolInlineUniformBlockCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT), (err))
#define znewarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT(L, count, err) (VkDescriptorPoolInlineUniformBlockCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT), (count), (err))
#define znewchainVkDescriptorPoolInlineUniformBlockCreateInfoEXT moonvulkan_znewchainVkDescriptorPoolInlineUniformBlockCreateInfoEXT
VkDescriptorPoolInlineUniformBlockCreateInfoEXT* znewchainVkDescriptorPoolInlineUniformBlockCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT moonvulkan_znewchainarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT
VkDescriptorPoolInlineUniformBlockCreateInfoEXT* znewchainarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorPoolInlineUniformBlockCreateInfoEXT moonvulkan_zcheckVkDescriptorPoolInlineUniformBlockCreateInfoEXT
VkDescriptorPoolInlineUniformBlockCreateInfoEXT* zcheckVkDescriptorPoolInlineUniformBlockCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT moonvulkan_zcheckarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT
VkDescriptorPoolInlineUniformBlockCreateInfoEXT* zcheckarrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorPoolInlineUniformBlockCreateInfoEXT moonvulkan_zinitVkDescriptorPoolInlineUniformBlockCreateInfoEXT
int zinitVkDescriptorPoolInlineUniformBlockCreateInfoEXT(lua_State *L, VkDescriptorPoolInlineUniformBlockCreateInfoEXT* p, int *err);
#define zfreeVkDescriptorPoolInlineUniformBlockCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorPoolInlineUniformBlockCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT), (count), (base))
#define zpushVkDescriptorPoolInlineUniformBlockCreateInfoEXT moonvulkan_zpushVkDescriptorPoolInlineUniformBlockCreateInfoEXT
int zpushVkDescriptorPoolInlineUniformBlockCreateInfoEXT(lua_State *L, const VkDescriptorPoolInlineUniformBlockCreateInfoEXT *p);

#define znewVkDescriptorSetLayoutBindingFlagsCreateInfo(L, err) (VkDescriptorSetLayoutBindingFlagsCreateInfo*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo), (err))
#define znewarrayVkDescriptorSetLayoutBindingFlagsCreateInfo(L, count, err) (VkDescriptorSetLayoutBindingFlagsCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo), (count), (err))
#define znewchainVkDescriptorSetLayoutBindingFlagsCreateInfo moonvulkan_znewchainVkDescriptorSetLayoutBindingFlagsCreateInfo
VkDescriptorSetLayoutBindingFlagsCreateInfo* znewchainVkDescriptorSetLayoutBindingFlagsCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkDescriptorSetLayoutBindingFlagsCreateInfo moonvulkan_znewchainarrayVkDescriptorSetLayoutBindingFlagsCreateInfo
VkDescriptorSetLayoutBindingFlagsCreateInfo* znewchainarrayVkDescriptorSetLayoutBindingFlagsCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorSetLayoutBindingFlagsCreateInfo moonvulkan_zcheckVkDescriptorSetLayoutBindingFlagsCreateInfo
VkDescriptorSetLayoutBindingFlagsCreateInfo* zcheckVkDescriptorSetLayoutBindingFlagsCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorSetLayoutBindingFlagsCreateInfo moonvulkan_zcheckarrayVkDescriptorSetLayoutBindingFlagsCreateInfo
VkDescriptorSetLayoutBindingFlagsCreateInfo* zcheckarrayVkDescriptorSetLayoutBindingFlagsCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorSetLayoutBindingFlagsCreateInfo moonvulkan_zinitVkDescriptorSetLayoutBindingFlagsCreateInfo
int zinitVkDescriptorSetLayoutBindingFlagsCreateInfo(lua_State *L, VkDescriptorSetLayoutBindingFlagsCreateInfo* p, int *err);
#define zfreeVkDescriptorSetLayoutBindingFlagsCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorSetLayoutBindingFlagsCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo), (count), (base))
#define zpushVkDescriptorSetLayoutBindingFlagsCreateInfo moonvulkan_zpushVkDescriptorSetLayoutBindingFlagsCreateInfo
int zpushVkDescriptorSetLayoutBindingFlagsCreateInfo(lua_State *L, const VkDescriptorSetLayoutBindingFlagsCreateInfo *p);

#define znewVkDescriptorSetVariableDescriptorCountAllocateInfo(L, err) (VkDescriptorSetVariableDescriptorCountAllocateInfo*)znew((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo), (err))
#define znewarrayVkDescriptorSetVariableDescriptorCountAllocateInfo(L, count, err) (VkDescriptorSetVariableDescriptorCountAllocateInfo*)znewarray((L), VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo), (count), (err))
#define znewchainVkDescriptorSetVariableDescriptorCountAllocateInfo moonvulkan_znewchainVkDescriptorSetVariableDescriptorCountAllocateInfo
VkDescriptorSetVariableDescriptorCountAllocateInfo* znewchainVkDescriptorSetVariableDescriptorCountAllocateInfo(lua_State *L, int *err);
#define znewchainarrayVkDescriptorSetVariableDescriptorCountAllocateInfo moonvulkan_znewchainarrayVkDescriptorSetVariableDescriptorCountAllocateInfo
VkDescriptorSetVariableDescriptorCountAllocateInfo* znewchainarrayVkDescriptorSetVariableDescriptorCountAllocateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDescriptorSetVariableDescriptorCountAllocateInfo moonvulkan_zcheckVkDescriptorSetVariableDescriptorCountAllocateInfo
VkDescriptorSetVariableDescriptorCountAllocateInfo* zcheckVkDescriptorSetVariableDescriptorCountAllocateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorSetVariableDescriptorCountAllocateInfo moonvulkan_zcheckarrayVkDescriptorSetVariableDescriptorCountAllocateInfo
VkDescriptorSetVariableDescriptorCountAllocateInfo* zcheckarrayVkDescriptorSetVariableDescriptorCountAllocateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorSetVariableDescriptorCountAllocateInfo moonvulkan_zinitVkDescriptorSetVariableDescriptorCountAllocateInfo
int zinitVkDescriptorSetVariableDescriptorCountAllocateInfo(lua_State *L, VkDescriptorSetVariableDescriptorCountAllocateInfo* p, int *err);
#define zfreeVkDescriptorSetVariableDescriptorCountAllocateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDescriptorSetVariableDescriptorCountAllocateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo), (count), (base))
#define zpushVkDescriptorSetVariableDescriptorCountAllocateInfo moonvulkan_zpushVkDescriptorSetVariableDescriptorCountAllocateInfo
int zpushVkDescriptorSetVariableDescriptorCountAllocateInfo(lua_State *L, const VkDescriptorSetVariableDescriptorCountAllocateInfo *p);

#define znewVkRenderPassMultiviewCreateInfoKHR(L, err) (VkRenderPassMultiviewCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR, sizeof(VkRenderPassMultiviewCreateInfoKHR), (err))
#define znewarrayVkRenderPassMultiviewCreateInfoKHR(L, count, err) (VkRenderPassMultiviewCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR, sizeof(VkRenderPassMultiviewCreateInfoKHR), (count), (err))
#define znewchainVkRenderPassMultiviewCreateInfoKHR moonvulkan_znewchainVkRenderPassMultiviewCreateInfoKHR
VkRenderPassMultiviewCreateInfoKHR* znewchainVkRenderPassMultiviewCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRenderPassMultiviewCreateInfoKHR moonvulkan_znewchainarrayVkRenderPassMultiviewCreateInfoKHR
VkRenderPassMultiviewCreateInfoKHR* znewchainarrayVkRenderPassMultiviewCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassMultiviewCreateInfoKHR moonvulkan_zcheckVkRenderPassMultiviewCreateInfoKHR
VkRenderPassMultiviewCreateInfoKHR* zcheckVkRenderPassMultiviewCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassMultiviewCreateInfoKHR moonvulkan_zcheckarrayVkRenderPassMultiviewCreateInfoKHR
VkRenderPassMultiviewCreateInfoKHR* zcheckarrayVkRenderPassMultiviewCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassMultiviewCreateInfoKHR moonvulkan_zinitVkRenderPassMultiviewCreateInfoKHR
int zinitVkRenderPassMultiviewCreateInfoKHR(lua_State *L, VkRenderPassMultiviewCreateInfoKHR* p, int *err);
#define zfreeVkRenderPassMultiviewCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassMultiviewCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassMultiviewCreateInfoKHR), (count), (base))
#define zpushVkRenderPassMultiviewCreateInfoKHR moonvulkan_zpushVkRenderPassMultiviewCreateInfoKHR
int zpushVkRenderPassMultiviewCreateInfoKHR(lua_State *L, const VkRenderPassMultiviewCreateInfoKHR *p);

#define znewVkAttachmentDescription2(L, err) (VkAttachmentDescription2*)znew((L), VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, sizeof(VkAttachmentDescription2), (err))
#define znewarrayVkAttachmentDescription2(L, count, err) (VkAttachmentDescription2*)znewarray((L), VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, sizeof(VkAttachmentDescription2), (count), (err))
#define znewchainVkAttachmentDescription2 moonvulkan_znewchainVkAttachmentDescription2
VkAttachmentDescription2* znewchainVkAttachmentDescription2(lua_State *L, int *err);
#define znewchainarrayVkAttachmentDescription2 moonvulkan_znewchainarrayVkAttachmentDescription2
VkAttachmentDescription2* znewchainarrayVkAttachmentDescription2(lua_State *L, uint32_t count, int *err);
#define zcheckVkAttachmentDescription2 moonvulkan_zcheckVkAttachmentDescription2
VkAttachmentDescription2* zcheckVkAttachmentDescription2(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentDescription2 moonvulkan_zcheckarrayVkAttachmentDescription2
VkAttachmentDescription2* zcheckarrayVkAttachmentDescription2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentDescription2 moonvulkan_zinitVkAttachmentDescription2
int zinitVkAttachmentDescription2(lua_State *L, VkAttachmentDescription2* p, int *err);
#define zfreeVkAttachmentDescription2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAttachmentDescription2(L, p, count, base) zfreearray((L), (p), sizeof(VkAttachmentDescription2), (count), (base))
#define zpushVkAttachmentDescription2 moonvulkan_zpushVkAttachmentDescription2
int zpushVkAttachmentDescription2(lua_State *L, const VkAttachmentDescription2 *p);

#define znewVkAttachmentReference2(L, err) (VkAttachmentReference2*)znew((L), VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, sizeof(VkAttachmentReference2), (err))
#define znewarrayVkAttachmentReference2(L, count, err) (VkAttachmentReference2*)znewarray((L), VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, sizeof(VkAttachmentReference2), (count), (err))
#define znewchainVkAttachmentReference2 moonvulkan_znewchainVkAttachmentReference2
VkAttachmentReference2* znewchainVkAttachmentReference2(lua_State *L, int *err);
#define znewchainarrayVkAttachmentReference2 moonvulkan_znewchainarrayVkAttachmentReference2
VkAttachmentReference2* znewchainarrayVkAttachmentReference2(lua_State *L, uint32_t count, int *err);
#define zcheckVkAttachmentReference2 moonvulkan_zcheckVkAttachmentReference2
VkAttachmentReference2* zcheckVkAttachmentReference2(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentReference2 moonvulkan_zcheckarrayVkAttachmentReference2
VkAttachmentReference2* zcheckarrayVkAttachmentReference2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentReference2 moonvulkan_zinitVkAttachmentReference2
int zinitVkAttachmentReference2(lua_State *L, VkAttachmentReference2* p, int *err);
#define zfreeVkAttachmentReference2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAttachmentReference2(L, p, count, base) zfreearray((L), (p), sizeof(VkAttachmentReference2), (count), (base))
#define zpushVkAttachmentReference2 moonvulkan_zpushVkAttachmentReference2
int zpushVkAttachmentReference2(lua_State *L, const VkAttachmentReference2 *p);

#define znewVkSubpassDescription2(L, err) (VkSubpassDescription2*)znew((L), VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, sizeof(VkSubpassDescription2), (err))
#define znewarrayVkSubpassDescription2(L, count, err) (VkSubpassDescription2*)znewarray((L), VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, sizeof(VkSubpassDescription2), (count), (err))
#define znewchainVkSubpassDescription2 moonvulkan_znewchainVkSubpassDescription2
VkSubpassDescription2* znewchainVkSubpassDescription2(lua_State *L, int *err);
#define znewchainarrayVkSubpassDescription2 moonvulkan_znewchainarrayVkSubpassDescription2
VkSubpassDescription2* znewchainarrayVkSubpassDescription2(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubpassDescription2 moonvulkan_zcheckVkSubpassDescription2
VkSubpassDescription2* zcheckVkSubpassDescription2(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassDescription2 moonvulkan_zcheckarrayVkSubpassDescription2
VkSubpassDescription2* zcheckarrayVkSubpassDescription2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassDescription2 moonvulkan_zinitVkSubpassDescription2
int zinitVkSubpassDescription2(lua_State *L, VkSubpassDescription2* p, int *err);
#define zfreeVkSubpassDescription2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubpassDescription2(L, p, count, base) zfreearray((L), (p), sizeof(VkSubpassDescription2), (count), (base))
#define zpushVkSubpassDescription2 moonvulkan_zpushVkSubpassDescription2
int zpushVkSubpassDescription2(lua_State *L, const VkSubpassDescription2 *p);

#define znewVkSubpassDependency2(L, err) (VkSubpassDependency2*)znew((L), VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, sizeof(VkSubpassDependency2), (err))
#define znewarrayVkSubpassDependency2(L, count, err) (VkSubpassDependency2*)znewarray((L), VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, sizeof(VkSubpassDependency2), (count), (err))
#define znewchainVkSubpassDependency2 moonvulkan_znewchainVkSubpassDependency2
VkSubpassDependency2* znewchainVkSubpassDependency2(lua_State *L, int *err);
#define znewchainarrayVkSubpassDependency2 moonvulkan_znewchainarrayVkSubpassDependency2
VkSubpassDependency2* znewchainarrayVkSubpassDependency2(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubpassDependency2 moonvulkan_zcheckVkSubpassDependency2
VkSubpassDependency2* zcheckVkSubpassDependency2(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassDependency2 moonvulkan_zcheckarrayVkSubpassDependency2
VkSubpassDependency2* zcheckarrayVkSubpassDependency2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassDependency2 moonvulkan_zinitVkSubpassDependency2
int zinitVkSubpassDependency2(lua_State *L, VkSubpassDependency2* p, int *err);
#define zfreeVkSubpassDependency2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubpassDependency2(L, p, count, base) zfreearray((L), (p), sizeof(VkSubpassDependency2), (count), (base))
#define zpushVkSubpassDependency2 moonvulkan_zpushVkSubpassDependency2
int zpushVkSubpassDependency2(lua_State *L, const VkSubpassDependency2 *p);

#define znewVkRenderPassCreateInfo2(L, err) (VkRenderPassCreateInfo2*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, sizeof(VkRenderPassCreateInfo2), (err))
#define znewarrayVkRenderPassCreateInfo2(L, count, err) (VkRenderPassCreateInfo2*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, sizeof(VkRenderPassCreateInfo2), (count), (err))
#define znewchainVkRenderPassCreateInfo2 moonvulkan_znewchainVkRenderPassCreateInfo2
VkRenderPassCreateInfo2* znewchainVkRenderPassCreateInfo2(lua_State *L, int *err);
#define znewchainarrayVkRenderPassCreateInfo2 moonvulkan_znewchainarrayVkRenderPassCreateInfo2
VkRenderPassCreateInfo2* znewchainarrayVkRenderPassCreateInfo2(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassCreateInfo2 moonvulkan_zcheckVkRenderPassCreateInfo2
VkRenderPassCreateInfo2* zcheckVkRenderPassCreateInfo2(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassCreateInfo2 moonvulkan_zcheckarrayVkRenderPassCreateInfo2
VkRenderPassCreateInfo2* zcheckarrayVkRenderPassCreateInfo2(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassCreateInfo2 moonvulkan_zinitVkRenderPassCreateInfo2
int zinitVkRenderPassCreateInfo2(lua_State *L, VkRenderPassCreateInfo2* p, int *err);
#define zfreeVkRenderPassCreateInfo2(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassCreateInfo2(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassCreateInfo2), (count), (base))
#define zpushVkRenderPassCreateInfo2 moonvulkan_zpushVkRenderPassCreateInfo2
int zpushVkRenderPassCreateInfo2(lua_State *L, const VkRenderPassCreateInfo2 *p);

#define znewVkSubpassBeginInfo(L, err) (VkSubpassBeginInfo*)znew((L), VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, sizeof(VkSubpassBeginInfo), (err))
#define znewarrayVkSubpassBeginInfo(L, count, err) (VkSubpassBeginInfo*)znewarray((L), VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, sizeof(VkSubpassBeginInfo), (count), (err))
#define znewchainVkSubpassBeginInfo moonvulkan_znewchainVkSubpassBeginInfo
VkSubpassBeginInfo* znewchainVkSubpassBeginInfo(lua_State *L, int *err);
#define znewchainarrayVkSubpassBeginInfo moonvulkan_znewchainarrayVkSubpassBeginInfo
VkSubpassBeginInfo* znewchainarrayVkSubpassBeginInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubpassBeginInfo moonvulkan_zcheckVkSubpassBeginInfo
VkSubpassBeginInfo* zcheckVkSubpassBeginInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassBeginInfo moonvulkan_zcheckarrayVkSubpassBeginInfo
VkSubpassBeginInfo* zcheckarrayVkSubpassBeginInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassBeginInfo moonvulkan_zinitVkSubpassBeginInfo
int zinitVkSubpassBeginInfo(lua_State *L, VkSubpassBeginInfo* p, int *err);
#define zfreeVkSubpassBeginInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubpassBeginInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSubpassBeginInfo), (count), (base))
#define zpushVkSubpassBeginInfo moonvulkan_zpushVkSubpassBeginInfo
int zpushVkSubpassBeginInfo(lua_State *L, const VkSubpassBeginInfo *p);

#define znewVkSubpassEndInfo(L, err) (VkSubpassEndInfo*)znew((L), VK_STRUCTURE_TYPE_SUBPASS_END_INFO, sizeof(VkSubpassEndInfo), (err))
#define znewarrayVkSubpassEndInfo(L, count, err) (VkSubpassEndInfo*)znewarray((L), VK_STRUCTURE_TYPE_SUBPASS_END_INFO, sizeof(VkSubpassEndInfo), (count), (err))
#define znewchainVkSubpassEndInfo moonvulkan_znewchainVkSubpassEndInfo
VkSubpassEndInfo* znewchainVkSubpassEndInfo(lua_State *L, int *err);
#define znewchainarrayVkSubpassEndInfo moonvulkan_znewchainarrayVkSubpassEndInfo
VkSubpassEndInfo* znewchainarrayVkSubpassEndInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubpassEndInfo moonvulkan_zcheckVkSubpassEndInfo
VkSubpassEndInfo* zcheckVkSubpassEndInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassEndInfo moonvulkan_zcheckarrayVkSubpassEndInfo
VkSubpassEndInfo* zcheckarrayVkSubpassEndInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassEndInfo moonvulkan_zinitVkSubpassEndInfo
int zinitVkSubpassEndInfo(lua_State *L, VkSubpassEndInfo* p, int *err);
#define zfreeVkSubpassEndInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubpassEndInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSubpassEndInfo), (count), (base))
#define zpushVkSubpassEndInfo moonvulkan_zpushVkSubpassEndInfo
int zpushVkSubpassEndInfo(lua_State *L, const VkSubpassEndInfo *p);

#define znewVkDisplayProperties2KHR(L, err) (VkDisplayProperties2KHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, sizeof(VkDisplayProperties2KHR), (err))
#define znewarrayVkDisplayProperties2KHR(L, count, err) (VkDisplayProperties2KHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, sizeof(VkDisplayProperties2KHR), (count), (err))
#define znewchainVkDisplayProperties2KHR moonvulkan_znewchainVkDisplayProperties2KHR
VkDisplayProperties2KHR* znewchainVkDisplayProperties2KHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayProperties2KHR moonvulkan_znewchainarrayVkDisplayProperties2KHR
VkDisplayProperties2KHR* znewchainarrayVkDisplayProperties2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayProperties2KHR moonvulkan_zcheckVkDisplayProperties2KHR
VkDisplayProperties2KHR* zcheckVkDisplayProperties2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayProperties2KHR moonvulkan_zcheckarrayVkDisplayProperties2KHR
VkDisplayProperties2KHR* zcheckarrayVkDisplayProperties2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayProperties2KHR moonvulkan_zinitVkDisplayProperties2KHR
int zinitVkDisplayProperties2KHR(lua_State *L, VkDisplayProperties2KHR* p, int *err);
#define zfreeVkDisplayProperties2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayProperties2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayProperties2KHR), (count), (base))
#define zpushVkDisplayProperties2KHR moonvulkan_zpushVkDisplayProperties2KHR
int zpushVkDisplayProperties2KHR(lua_State *L, const VkDisplayProperties2KHR *p);

#define znewVkDisplayPlaneProperties2KHR(L, err) (VkDisplayPlaneProperties2KHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, sizeof(VkDisplayPlaneProperties2KHR), (err))
#define znewarrayVkDisplayPlaneProperties2KHR(L, count, err) (VkDisplayPlaneProperties2KHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, sizeof(VkDisplayPlaneProperties2KHR), (count), (err))
#define znewchainVkDisplayPlaneProperties2KHR moonvulkan_znewchainVkDisplayPlaneProperties2KHR
VkDisplayPlaneProperties2KHR* znewchainVkDisplayPlaneProperties2KHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayPlaneProperties2KHR moonvulkan_znewchainarrayVkDisplayPlaneProperties2KHR
VkDisplayPlaneProperties2KHR* znewchainarrayVkDisplayPlaneProperties2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayPlaneProperties2KHR moonvulkan_zcheckVkDisplayPlaneProperties2KHR
VkDisplayPlaneProperties2KHR* zcheckVkDisplayPlaneProperties2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPlaneProperties2KHR moonvulkan_zcheckarrayVkDisplayPlaneProperties2KHR
VkDisplayPlaneProperties2KHR* zcheckarrayVkDisplayPlaneProperties2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPlaneProperties2KHR moonvulkan_zinitVkDisplayPlaneProperties2KHR
int zinitVkDisplayPlaneProperties2KHR(lua_State *L, VkDisplayPlaneProperties2KHR* p, int *err);
#define zfreeVkDisplayPlaneProperties2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayPlaneProperties2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayPlaneProperties2KHR), (count), (base))
#define zpushVkDisplayPlaneProperties2KHR moonvulkan_zpushVkDisplayPlaneProperties2KHR
int zpushVkDisplayPlaneProperties2KHR(lua_State *L, const VkDisplayPlaneProperties2KHR *p);

#define znewVkDisplayModeProperties2KHR(L, err) (VkDisplayModeProperties2KHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, sizeof(VkDisplayModeProperties2KHR), (err))
#define znewarrayVkDisplayModeProperties2KHR(L, count, err) (VkDisplayModeProperties2KHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, sizeof(VkDisplayModeProperties2KHR), (count), (err))
#define znewchainVkDisplayModeProperties2KHR moonvulkan_znewchainVkDisplayModeProperties2KHR
VkDisplayModeProperties2KHR* znewchainVkDisplayModeProperties2KHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayModeProperties2KHR moonvulkan_znewchainarrayVkDisplayModeProperties2KHR
VkDisplayModeProperties2KHR* znewchainarrayVkDisplayModeProperties2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayModeProperties2KHR moonvulkan_zcheckVkDisplayModeProperties2KHR
VkDisplayModeProperties2KHR* zcheckVkDisplayModeProperties2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayModeProperties2KHR moonvulkan_zcheckarrayVkDisplayModeProperties2KHR
VkDisplayModeProperties2KHR* zcheckarrayVkDisplayModeProperties2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayModeProperties2KHR moonvulkan_zinitVkDisplayModeProperties2KHR
int zinitVkDisplayModeProperties2KHR(lua_State *L, VkDisplayModeProperties2KHR* p, int *err);
#define zfreeVkDisplayModeProperties2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayModeProperties2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayModeProperties2KHR), (count), (base))
#define zpushVkDisplayModeProperties2KHR moonvulkan_zpushVkDisplayModeProperties2KHR
int zpushVkDisplayModeProperties2KHR(lua_State *L, const VkDisplayModeProperties2KHR *p);

#define znewVkDisplayPlaneCapabilities2KHR(L, err) (VkDisplayPlaneCapabilities2KHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, sizeof(VkDisplayPlaneCapabilities2KHR), (err))
#define znewarrayVkDisplayPlaneCapabilities2KHR(L, count, err) (VkDisplayPlaneCapabilities2KHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, sizeof(VkDisplayPlaneCapabilities2KHR), (count), (err))
#define znewchainVkDisplayPlaneCapabilities2KHR moonvulkan_znewchainVkDisplayPlaneCapabilities2KHR
VkDisplayPlaneCapabilities2KHR* znewchainVkDisplayPlaneCapabilities2KHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayPlaneCapabilities2KHR moonvulkan_znewchainarrayVkDisplayPlaneCapabilities2KHR
VkDisplayPlaneCapabilities2KHR* znewchainarrayVkDisplayPlaneCapabilities2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayPlaneCapabilities2KHR moonvulkan_zcheckVkDisplayPlaneCapabilities2KHR
VkDisplayPlaneCapabilities2KHR* zcheckVkDisplayPlaneCapabilities2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPlaneCapabilities2KHR moonvulkan_zcheckarrayVkDisplayPlaneCapabilities2KHR
VkDisplayPlaneCapabilities2KHR* zcheckarrayVkDisplayPlaneCapabilities2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPlaneCapabilities2KHR moonvulkan_zinitVkDisplayPlaneCapabilities2KHR
int zinitVkDisplayPlaneCapabilities2KHR(lua_State *L, VkDisplayPlaneCapabilities2KHR* p, int *err);
#define zfreeVkDisplayPlaneCapabilities2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayPlaneCapabilities2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayPlaneCapabilities2KHR), (count), (base))
#define zpushVkDisplayPlaneCapabilities2KHR moonvulkan_zpushVkDisplayPlaneCapabilities2KHR
int zpushVkDisplayPlaneCapabilities2KHR(lua_State *L, const VkDisplayPlaneCapabilities2KHR *p);

#define znewVkDisplayPlaneInfo2KHR(L, err) (VkDisplayPlaneInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, sizeof(VkDisplayPlaneInfo2KHR), (err))
#define znewarrayVkDisplayPlaneInfo2KHR(L, count, err) (VkDisplayPlaneInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, sizeof(VkDisplayPlaneInfo2KHR), (count), (err))
#define znewchainVkDisplayPlaneInfo2KHR moonvulkan_znewchainVkDisplayPlaneInfo2KHR
VkDisplayPlaneInfo2KHR* znewchainVkDisplayPlaneInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkDisplayPlaneInfo2KHR moonvulkan_znewchainarrayVkDisplayPlaneInfo2KHR
VkDisplayPlaneInfo2KHR* znewchainarrayVkDisplayPlaneInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDisplayPlaneInfo2KHR moonvulkan_zcheckVkDisplayPlaneInfo2KHR
VkDisplayPlaneInfo2KHR* zcheckVkDisplayPlaneInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPlaneInfo2KHR moonvulkan_zcheckarrayVkDisplayPlaneInfo2KHR
VkDisplayPlaneInfo2KHR* zcheckarrayVkDisplayPlaneInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPlaneInfo2KHR moonvulkan_zinitVkDisplayPlaneInfo2KHR
int zinitVkDisplayPlaneInfo2KHR(lua_State *L, VkDisplayPlaneInfo2KHR* p, int *err);
#define zfreeVkDisplayPlaneInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDisplayPlaneInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDisplayPlaneInfo2KHR), (count), (base))
#define zpushVkDisplayPlaneInfo2KHR moonvulkan_zpushVkDisplayPlaneInfo2KHR
int zpushVkDisplayPlaneInfo2KHR(lua_State *L, const VkDisplayPlaneInfo2KHR *p);

#define znewVkDeviceGroupDeviceCreateInfoKHR(L, err) (VkDeviceGroupDeviceCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR, sizeof(VkDeviceGroupDeviceCreateInfoKHR), (err))
#define znewarrayVkDeviceGroupDeviceCreateInfoKHR(L, count, err) (VkDeviceGroupDeviceCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR, sizeof(VkDeviceGroupDeviceCreateInfoKHR), (count), (err))
#define znewchainVkDeviceGroupDeviceCreateInfoKHR moonvulkan_znewchainVkDeviceGroupDeviceCreateInfoKHR
VkDeviceGroupDeviceCreateInfoKHR* znewchainVkDeviceGroupDeviceCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupDeviceCreateInfoKHR moonvulkan_znewchainarrayVkDeviceGroupDeviceCreateInfoKHR
VkDeviceGroupDeviceCreateInfoKHR* znewchainarrayVkDeviceGroupDeviceCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupDeviceCreateInfoKHR moonvulkan_zcheckVkDeviceGroupDeviceCreateInfoKHR
VkDeviceGroupDeviceCreateInfoKHR* zcheckVkDeviceGroupDeviceCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupDeviceCreateInfoKHR moonvulkan_zcheckarrayVkDeviceGroupDeviceCreateInfoKHR
VkDeviceGroupDeviceCreateInfoKHR* zcheckarrayVkDeviceGroupDeviceCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupDeviceCreateInfoKHR moonvulkan_zinitVkDeviceGroupDeviceCreateInfoKHR
int zinitVkDeviceGroupDeviceCreateInfoKHR(lua_State *L, VkDeviceGroupDeviceCreateInfoKHR* p, int *err);
#define zfreeVkDeviceGroupDeviceCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupDeviceCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupDeviceCreateInfoKHR), (count), (base))
#define zpushVkDeviceGroupDeviceCreateInfoKHR moonvulkan_zpushVkDeviceGroupDeviceCreateInfoKHR
int zpushVkDeviceGroupDeviceCreateInfoKHR(lua_State *L, const VkDeviceGroupDeviceCreateInfoKHR *p);

#define znewVkPhysicalDeviceGroupPropertiesKHR(L, err) (VkPhysicalDeviceGroupPropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR, sizeof(VkPhysicalDeviceGroupPropertiesKHR), (err))
#define znewarrayVkPhysicalDeviceGroupPropertiesKHR(L, count, err) (VkPhysicalDeviceGroupPropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR, sizeof(VkPhysicalDeviceGroupPropertiesKHR), (count), (err))
#define znewchainVkPhysicalDeviceGroupPropertiesKHR moonvulkan_znewchainVkPhysicalDeviceGroupPropertiesKHR
VkPhysicalDeviceGroupPropertiesKHR* znewchainVkPhysicalDeviceGroupPropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceGroupPropertiesKHR moonvulkan_znewchainarrayVkPhysicalDeviceGroupPropertiesKHR
VkPhysicalDeviceGroupPropertiesKHR* znewchainarrayVkPhysicalDeviceGroupPropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceGroupPropertiesKHR moonvulkan_zcheckVkPhysicalDeviceGroupPropertiesKHR
VkPhysicalDeviceGroupPropertiesKHR* zcheckVkPhysicalDeviceGroupPropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceGroupPropertiesKHR moonvulkan_zcheckarrayVkPhysicalDeviceGroupPropertiesKHR
VkPhysicalDeviceGroupPropertiesKHR* zcheckarrayVkPhysicalDeviceGroupPropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceGroupPropertiesKHR moonvulkan_zinitVkPhysicalDeviceGroupPropertiesKHR
int zinitVkPhysicalDeviceGroupPropertiesKHR(lua_State *L, VkPhysicalDeviceGroupPropertiesKHR* p, int *err);
#define zfreeVkPhysicalDeviceGroupPropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceGroupPropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceGroupPropertiesKHR), (count), (base))
#define zpushVkPhysicalDeviceGroupPropertiesKHR moonvulkan_zpushVkPhysicalDeviceGroupPropertiesKHR
int zpushVkPhysicalDeviceGroupPropertiesKHR(lua_State *L, const VkPhysicalDeviceGroupPropertiesKHR *p, VkInstance instance); // non-standard

#define znewVkMemoryAllocateFlagsInfoKHR(L, err) (VkMemoryAllocateFlagsInfoKHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR, sizeof(VkMemoryAllocateFlagsInfoKHR), (err))
#define znewarrayVkMemoryAllocateFlagsInfoKHR(L, count, err) (VkMemoryAllocateFlagsInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR, sizeof(VkMemoryAllocateFlagsInfoKHR), (count), (err))
#define znewchainVkMemoryAllocateFlagsInfoKHR moonvulkan_znewchainVkMemoryAllocateFlagsInfoKHR
VkMemoryAllocateFlagsInfoKHR* znewchainVkMemoryAllocateFlagsInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryAllocateFlagsInfoKHR moonvulkan_znewchainarrayVkMemoryAllocateFlagsInfoKHR
VkMemoryAllocateFlagsInfoKHR* znewchainarrayVkMemoryAllocateFlagsInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryAllocateFlagsInfoKHR moonvulkan_zcheckVkMemoryAllocateFlagsInfoKHR
VkMemoryAllocateFlagsInfoKHR* zcheckVkMemoryAllocateFlagsInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryAllocateFlagsInfoKHR moonvulkan_zcheckarrayVkMemoryAllocateFlagsInfoKHR
VkMemoryAllocateFlagsInfoKHR* zcheckarrayVkMemoryAllocateFlagsInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryAllocateFlagsInfoKHR moonvulkan_zinitVkMemoryAllocateFlagsInfoKHR
int zinitVkMemoryAllocateFlagsInfoKHR(lua_State *L, VkMemoryAllocateFlagsInfoKHR* p, int *err);
#define zfreeVkMemoryAllocateFlagsInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryAllocateFlagsInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryAllocateFlagsInfoKHR), (count), (base))
#define zpushVkMemoryAllocateFlagsInfoKHR moonvulkan_zpushVkMemoryAllocateFlagsInfoKHR
int zpushVkMemoryAllocateFlagsInfoKHR(lua_State *L, const VkMemoryAllocateFlagsInfoKHR *p);

#define znewVkDeviceGroupRenderPassBeginInfoKHR(L, err) (VkDeviceGroupRenderPassBeginInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR, sizeof(VkDeviceGroupRenderPassBeginInfoKHR), (err))
#define znewarrayVkDeviceGroupRenderPassBeginInfoKHR(L, count, err) (VkDeviceGroupRenderPassBeginInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR, sizeof(VkDeviceGroupRenderPassBeginInfoKHR), (count), (err))
#define znewchainVkDeviceGroupRenderPassBeginInfoKHR moonvulkan_znewchainVkDeviceGroupRenderPassBeginInfoKHR
VkDeviceGroupRenderPassBeginInfoKHR* znewchainVkDeviceGroupRenderPassBeginInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupRenderPassBeginInfoKHR moonvulkan_znewchainarrayVkDeviceGroupRenderPassBeginInfoKHR
VkDeviceGroupRenderPassBeginInfoKHR* znewchainarrayVkDeviceGroupRenderPassBeginInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupRenderPassBeginInfoKHR moonvulkan_zcheckVkDeviceGroupRenderPassBeginInfoKHR
VkDeviceGroupRenderPassBeginInfoKHR* zcheckVkDeviceGroupRenderPassBeginInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupRenderPassBeginInfoKHR moonvulkan_zcheckarrayVkDeviceGroupRenderPassBeginInfoKHR
VkDeviceGroupRenderPassBeginInfoKHR* zcheckarrayVkDeviceGroupRenderPassBeginInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupRenderPassBeginInfoKHR moonvulkan_zinitVkDeviceGroupRenderPassBeginInfoKHR
int zinitVkDeviceGroupRenderPassBeginInfoKHR(lua_State *L, VkDeviceGroupRenderPassBeginInfoKHR* p, int *err);
#define zfreeVkDeviceGroupRenderPassBeginInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupRenderPassBeginInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupRenderPassBeginInfoKHR), (count), (base))
#define zpushVkDeviceGroupRenderPassBeginInfoKHR moonvulkan_zpushVkDeviceGroupRenderPassBeginInfoKHR
int zpushVkDeviceGroupRenderPassBeginInfoKHR(lua_State *L, const VkDeviceGroupRenderPassBeginInfoKHR *p);

#define znewVkDeviceGroupCommandBufferBeginInfoKHR(L, err) (VkDeviceGroupCommandBufferBeginInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR), (err))
#define znewarrayVkDeviceGroupCommandBufferBeginInfoKHR(L, count, err) (VkDeviceGroupCommandBufferBeginInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR, sizeof(VkDeviceGroupCommandBufferBeginInfoKHR), (count), (err))
#define znewchainVkDeviceGroupCommandBufferBeginInfoKHR moonvulkan_znewchainVkDeviceGroupCommandBufferBeginInfoKHR
VkDeviceGroupCommandBufferBeginInfoKHR* znewchainVkDeviceGroupCommandBufferBeginInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupCommandBufferBeginInfoKHR moonvulkan_znewchainarrayVkDeviceGroupCommandBufferBeginInfoKHR
VkDeviceGroupCommandBufferBeginInfoKHR* znewchainarrayVkDeviceGroupCommandBufferBeginInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupCommandBufferBeginInfoKHR moonvulkan_zcheckVkDeviceGroupCommandBufferBeginInfoKHR
VkDeviceGroupCommandBufferBeginInfoKHR* zcheckVkDeviceGroupCommandBufferBeginInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupCommandBufferBeginInfoKHR moonvulkan_zcheckarrayVkDeviceGroupCommandBufferBeginInfoKHR
VkDeviceGroupCommandBufferBeginInfoKHR* zcheckarrayVkDeviceGroupCommandBufferBeginInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupCommandBufferBeginInfoKHR moonvulkan_zinitVkDeviceGroupCommandBufferBeginInfoKHR
int zinitVkDeviceGroupCommandBufferBeginInfoKHR(lua_State *L, VkDeviceGroupCommandBufferBeginInfoKHR* p, int *err);
#define zfreeVkDeviceGroupCommandBufferBeginInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupCommandBufferBeginInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupCommandBufferBeginInfoKHR), (count), (base))
#define zpushVkDeviceGroupCommandBufferBeginInfoKHR moonvulkan_zpushVkDeviceGroupCommandBufferBeginInfoKHR
int zpushVkDeviceGroupCommandBufferBeginInfoKHR(lua_State *L, const VkDeviceGroupCommandBufferBeginInfoKHR *p);

#define znewVkDeviceGroupSubmitInfoKHR(L, err) (VkDeviceGroupSubmitInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR, sizeof(VkDeviceGroupSubmitInfoKHR), (err))
#define znewarrayVkDeviceGroupSubmitInfoKHR(L, count, err) (VkDeviceGroupSubmitInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR, sizeof(VkDeviceGroupSubmitInfoKHR), (count), (err))
#define znewchainVkDeviceGroupSubmitInfoKHR moonvulkan_znewchainVkDeviceGroupSubmitInfoKHR
VkDeviceGroupSubmitInfoKHR* znewchainVkDeviceGroupSubmitInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupSubmitInfoKHR moonvulkan_znewchainarrayVkDeviceGroupSubmitInfoKHR
VkDeviceGroupSubmitInfoKHR* znewchainarrayVkDeviceGroupSubmitInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupSubmitInfoKHR moonvulkan_zcheckVkDeviceGroupSubmitInfoKHR
VkDeviceGroupSubmitInfoKHR* zcheckVkDeviceGroupSubmitInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupSubmitInfoKHR moonvulkan_zcheckarrayVkDeviceGroupSubmitInfoKHR
VkDeviceGroupSubmitInfoKHR* zcheckarrayVkDeviceGroupSubmitInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupSubmitInfoKHR moonvulkan_zinitVkDeviceGroupSubmitInfoKHR
int zinitVkDeviceGroupSubmitInfoKHR(lua_State *L, VkDeviceGroupSubmitInfoKHR* p, int *err);
#define zfreeVkDeviceGroupSubmitInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupSubmitInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupSubmitInfoKHR), (count), (base))
#define zpushVkDeviceGroupSubmitInfoKHR moonvulkan_zpushVkDeviceGroupSubmitInfoKHR
int zpushVkDeviceGroupSubmitInfoKHR(lua_State *L, const VkDeviceGroupSubmitInfoKHR *p);

#define znewVkDeviceGroupBindSparseInfoKHR(L, err) (VkDeviceGroupBindSparseInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR, sizeof(VkDeviceGroupBindSparseInfoKHR), (err))
#define znewarrayVkDeviceGroupBindSparseInfoKHR(L, count, err) (VkDeviceGroupBindSparseInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR, sizeof(VkDeviceGroupBindSparseInfoKHR), (count), (err))
#define znewchainVkDeviceGroupBindSparseInfoKHR moonvulkan_znewchainVkDeviceGroupBindSparseInfoKHR
VkDeviceGroupBindSparseInfoKHR* znewchainVkDeviceGroupBindSparseInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupBindSparseInfoKHR moonvulkan_znewchainarrayVkDeviceGroupBindSparseInfoKHR
VkDeviceGroupBindSparseInfoKHR* znewchainarrayVkDeviceGroupBindSparseInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupBindSparseInfoKHR moonvulkan_zcheckVkDeviceGroupBindSparseInfoKHR
VkDeviceGroupBindSparseInfoKHR* zcheckVkDeviceGroupBindSparseInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupBindSparseInfoKHR moonvulkan_zcheckarrayVkDeviceGroupBindSparseInfoKHR
VkDeviceGroupBindSparseInfoKHR* zcheckarrayVkDeviceGroupBindSparseInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupBindSparseInfoKHR moonvulkan_zinitVkDeviceGroupBindSparseInfoKHR
int zinitVkDeviceGroupBindSparseInfoKHR(lua_State *L, VkDeviceGroupBindSparseInfoKHR* p, int *err);
#define zfreeVkDeviceGroupBindSparseInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupBindSparseInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupBindSparseInfoKHR), (count), (base))
#define zpushVkDeviceGroupBindSparseInfoKHR moonvulkan_zpushVkDeviceGroupBindSparseInfoKHR
int zpushVkDeviceGroupBindSparseInfoKHR(lua_State *L, const VkDeviceGroupBindSparseInfoKHR *p);

#define znewVkBindImageMemoryDeviceGroupInfoKHR(L, err) (VkBindImageMemoryDeviceGroupInfoKHR*)znew((L), VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR, sizeof(VkBindImageMemoryDeviceGroupInfoKHR), (err))
#define znewarrayVkBindImageMemoryDeviceGroupInfoKHR(L, count, err) (VkBindImageMemoryDeviceGroupInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR, sizeof(VkBindImageMemoryDeviceGroupInfoKHR), (count), (err))
#define znewchainVkBindImageMemoryDeviceGroupInfoKHR moonvulkan_znewchainVkBindImageMemoryDeviceGroupInfoKHR
VkBindImageMemoryDeviceGroupInfoKHR* znewchainVkBindImageMemoryDeviceGroupInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkBindImageMemoryDeviceGroupInfoKHR moonvulkan_znewchainarrayVkBindImageMemoryDeviceGroupInfoKHR
VkBindImageMemoryDeviceGroupInfoKHR* znewchainarrayVkBindImageMemoryDeviceGroupInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindImageMemoryDeviceGroupInfoKHR moonvulkan_zcheckVkBindImageMemoryDeviceGroupInfoKHR
VkBindImageMemoryDeviceGroupInfoKHR* zcheckVkBindImageMemoryDeviceGroupInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindImageMemoryDeviceGroupInfoKHR moonvulkan_zcheckarrayVkBindImageMemoryDeviceGroupInfoKHR
VkBindImageMemoryDeviceGroupInfoKHR* zcheckarrayVkBindImageMemoryDeviceGroupInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindImageMemoryDeviceGroupInfoKHR moonvulkan_zinitVkBindImageMemoryDeviceGroupInfoKHR
int zinitVkBindImageMemoryDeviceGroupInfoKHR(lua_State *L, VkBindImageMemoryDeviceGroupInfoKHR* p, int *err);
#define zfreeVkBindImageMemoryDeviceGroupInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindImageMemoryDeviceGroupInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBindImageMemoryDeviceGroupInfoKHR), (count), (base))
#define zpushVkBindImageMemoryDeviceGroupInfoKHR moonvulkan_zpushVkBindImageMemoryDeviceGroupInfoKHR
int zpushVkBindImageMemoryDeviceGroupInfoKHR(lua_State *L, const VkBindImageMemoryDeviceGroupInfoKHR *p);

#define znewVkBindBufferMemoryDeviceGroupInfoKHR(L, err) (VkBindBufferMemoryDeviceGroupInfoKHR*)znew((L), VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR), (err))
#define znewarrayVkBindBufferMemoryDeviceGroupInfoKHR(L, count, err) (VkBindBufferMemoryDeviceGroupInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR, sizeof(VkBindBufferMemoryDeviceGroupInfoKHR), (count), (err))
#define znewchainVkBindBufferMemoryDeviceGroupInfoKHR moonvulkan_znewchainVkBindBufferMemoryDeviceGroupInfoKHR
VkBindBufferMemoryDeviceGroupInfoKHR* znewchainVkBindBufferMemoryDeviceGroupInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkBindBufferMemoryDeviceGroupInfoKHR moonvulkan_znewchainarrayVkBindBufferMemoryDeviceGroupInfoKHR
VkBindBufferMemoryDeviceGroupInfoKHR* znewchainarrayVkBindBufferMemoryDeviceGroupInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindBufferMemoryDeviceGroupInfoKHR moonvulkan_zcheckVkBindBufferMemoryDeviceGroupInfoKHR
VkBindBufferMemoryDeviceGroupInfoKHR* zcheckVkBindBufferMemoryDeviceGroupInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindBufferMemoryDeviceGroupInfoKHR moonvulkan_zcheckarrayVkBindBufferMemoryDeviceGroupInfoKHR
VkBindBufferMemoryDeviceGroupInfoKHR* zcheckarrayVkBindBufferMemoryDeviceGroupInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindBufferMemoryDeviceGroupInfoKHR moonvulkan_zinitVkBindBufferMemoryDeviceGroupInfoKHR
int zinitVkBindBufferMemoryDeviceGroupInfoKHR(lua_State *L, VkBindBufferMemoryDeviceGroupInfoKHR* p, int *err);
#define zfreeVkBindBufferMemoryDeviceGroupInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindBufferMemoryDeviceGroupInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBindBufferMemoryDeviceGroupInfoKHR), (count), (base))
#define zpushVkBindBufferMemoryDeviceGroupInfoKHR moonvulkan_zpushVkBindBufferMemoryDeviceGroupInfoKHR
int zpushVkBindBufferMemoryDeviceGroupInfoKHR(lua_State *L, const VkBindBufferMemoryDeviceGroupInfoKHR *p);

#define znewVkImageSwapchainCreateInfoKHR(L, err) (VkImageSwapchainCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkImageSwapchainCreateInfoKHR), (err))
#define znewarrayVkImageSwapchainCreateInfoKHR(L, count, err) (VkImageSwapchainCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkImageSwapchainCreateInfoKHR), (count), (err))
#define znewchainVkImageSwapchainCreateInfoKHR moonvulkan_znewchainVkImageSwapchainCreateInfoKHR
VkImageSwapchainCreateInfoKHR* znewchainVkImageSwapchainCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImageSwapchainCreateInfoKHR moonvulkan_znewchainarrayVkImageSwapchainCreateInfoKHR
VkImageSwapchainCreateInfoKHR* znewchainarrayVkImageSwapchainCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageSwapchainCreateInfoKHR moonvulkan_zcheckVkImageSwapchainCreateInfoKHR
VkImageSwapchainCreateInfoKHR* zcheckVkImageSwapchainCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageSwapchainCreateInfoKHR moonvulkan_zcheckarrayVkImageSwapchainCreateInfoKHR
VkImageSwapchainCreateInfoKHR* zcheckarrayVkImageSwapchainCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageSwapchainCreateInfoKHR moonvulkan_zinitVkImageSwapchainCreateInfoKHR
int zinitVkImageSwapchainCreateInfoKHR(lua_State *L, VkImageSwapchainCreateInfoKHR* p, int *err);
#define zfreeVkImageSwapchainCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageSwapchainCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageSwapchainCreateInfoKHR), (count), (base))
#define zpushVkImageSwapchainCreateInfoKHR moonvulkan_zpushVkImageSwapchainCreateInfoKHR
int zpushVkImageSwapchainCreateInfoKHR(lua_State *L, const VkImageSwapchainCreateInfoKHR *p);

#define znewVkBindImageMemorySwapchainInfoKHR(L, err) (VkBindImageMemorySwapchainInfoKHR*)znew((L), VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, sizeof(VkBindImageMemorySwapchainInfoKHR), (err))
#define znewarrayVkBindImageMemorySwapchainInfoKHR(L, count, err) (VkBindImageMemorySwapchainInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, sizeof(VkBindImageMemorySwapchainInfoKHR), (count), (err))
#define znewchainVkBindImageMemorySwapchainInfoKHR moonvulkan_znewchainVkBindImageMemorySwapchainInfoKHR
VkBindImageMemorySwapchainInfoKHR* znewchainVkBindImageMemorySwapchainInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkBindImageMemorySwapchainInfoKHR moonvulkan_znewchainarrayVkBindImageMemorySwapchainInfoKHR
VkBindImageMemorySwapchainInfoKHR* znewchainarrayVkBindImageMemorySwapchainInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBindImageMemorySwapchainInfoKHR moonvulkan_zcheckVkBindImageMemorySwapchainInfoKHR
VkBindImageMemorySwapchainInfoKHR* zcheckVkBindImageMemorySwapchainInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBindImageMemorySwapchainInfoKHR moonvulkan_zcheckarrayVkBindImageMemorySwapchainInfoKHR
VkBindImageMemorySwapchainInfoKHR* zcheckarrayVkBindImageMemorySwapchainInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBindImageMemorySwapchainInfoKHR moonvulkan_zinitVkBindImageMemorySwapchainInfoKHR
int zinitVkBindImageMemorySwapchainInfoKHR(lua_State *L, VkBindImageMemorySwapchainInfoKHR* p, int *err);
#define zfreeVkBindImageMemorySwapchainInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBindImageMemorySwapchainInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBindImageMemorySwapchainInfoKHR), (count), (base))
#define zpushVkBindImageMemorySwapchainInfoKHR moonvulkan_zpushVkBindImageMemorySwapchainInfoKHR
int zpushVkBindImageMemorySwapchainInfoKHR(lua_State *L, const VkBindImageMemorySwapchainInfoKHR *p);

#define znewVkDeviceGroupSwapchainCreateInfoKHR(L, err) (VkDeviceGroupSwapchainCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkDeviceGroupSwapchainCreateInfoKHR), (err))
#define znewarrayVkDeviceGroupSwapchainCreateInfoKHR(L, count, err) (VkDeviceGroupSwapchainCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkDeviceGroupSwapchainCreateInfoKHR), (count), (err))
#define znewchainVkDeviceGroupSwapchainCreateInfoKHR moonvulkan_znewchainVkDeviceGroupSwapchainCreateInfoKHR
VkDeviceGroupSwapchainCreateInfoKHR* znewchainVkDeviceGroupSwapchainCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupSwapchainCreateInfoKHR moonvulkan_znewchainarrayVkDeviceGroupSwapchainCreateInfoKHR
VkDeviceGroupSwapchainCreateInfoKHR* znewchainarrayVkDeviceGroupSwapchainCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupSwapchainCreateInfoKHR moonvulkan_zcheckVkDeviceGroupSwapchainCreateInfoKHR
VkDeviceGroupSwapchainCreateInfoKHR* zcheckVkDeviceGroupSwapchainCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupSwapchainCreateInfoKHR moonvulkan_zcheckarrayVkDeviceGroupSwapchainCreateInfoKHR
VkDeviceGroupSwapchainCreateInfoKHR* zcheckarrayVkDeviceGroupSwapchainCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupSwapchainCreateInfoKHR moonvulkan_zinitVkDeviceGroupSwapchainCreateInfoKHR
int zinitVkDeviceGroupSwapchainCreateInfoKHR(lua_State *L, VkDeviceGroupSwapchainCreateInfoKHR* p, int *err);
#define zfreeVkDeviceGroupSwapchainCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupSwapchainCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupSwapchainCreateInfoKHR), (count), (base))
#define zpushVkDeviceGroupSwapchainCreateInfoKHR moonvulkan_zpushVkDeviceGroupSwapchainCreateInfoKHR
int zpushVkDeviceGroupSwapchainCreateInfoKHR(lua_State *L, const VkDeviceGroupSwapchainCreateInfoKHR *p);

#define znewVkDeviceGroupPresentInfoKHR(L, err) (VkDeviceGroupPresentInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, sizeof(VkDeviceGroupPresentInfoKHR), (err))
#define znewarrayVkDeviceGroupPresentInfoKHR(L, count, err) (VkDeviceGroupPresentInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, sizeof(VkDeviceGroupPresentInfoKHR), (count), (err))
#define znewchainVkDeviceGroupPresentInfoKHR moonvulkan_znewchainVkDeviceGroupPresentInfoKHR
VkDeviceGroupPresentInfoKHR* znewchainVkDeviceGroupPresentInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupPresentInfoKHR moonvulkan_znewchainarrayVkDeviceGroupPresentInfoKHR
VkDeviceGroupPresentInfoKHR* znewchainarrayVkDeviceGroupPresentInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupPresentInfoKHR moonvulkan_zcheckVkDeviceGroupPresentInfoKHR
VkDeviceGroupPresentInfoKHR* zcheckVkDeviceGroupPresentInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupPresentInfoKHR moonvulkan_zcheckarrayVkDeviceGroupPresentInfoKHR
VkDeviceGroupPresentInfoKHR* zcheckarrayVkDeviceGroupPresentInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupPresentInfoKHR moonvulkan_zinitVkDeviceGroupPresentInfoKHR
int zinitVkDeviceGroupPresentInfoKHR(lua_State *L, VkDeviceGroupPresentInfoKHR* p, int *err);
#define zfreeVkDeviceGroupPresentInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupPresentInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupPresentInfoKHR), (count), (base))
#define zpushVkDeviceGroupPresentInfoKHR moonvulkan_zpushVkDeviceGroupPresentInfoKHR
int zpushVkDeviceGroupPresentInfoKHR(lua_State *L, const VkDeviceGroupPresentInfoKHR *p);

#define znewVkDeviceGroupPresentCapabilitiesKHR(L, err) (VkDeviceGroupPresentCapabilitiesKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, sizeof(VkDeviceGroupPresentCapabilitiesKHR), (err))
#define znewarrayVkDeviceGroupPresentCapabilitiesKHR(L, count, err) (VkDeviceGroupPresentCapabilitiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, sizeof(VkDeviceGroupPresentCapabilitiesKHR), (count), (err))
#define znewchainVkDeviceGroupPresentCapabilitiesKHR moonvulkan_znewchainVkDeviceGroupPresentCapabilitiesKHR
VkDeviceGroupPresentCapabilitiesKHR* znewchainVkDeviceGroupPresentCapabilitiesKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceGroupPresentCapabilitiesKHR moonvulkan_znewchainarrayVkDeviceGroupPresentCapabilitiesKHR
VkDeviceGroupPresentCapabilitiesKHR* znewchainarrayVkDeviceGroupPresentCapabilitiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceGroupPresentCapabilitiesKHR moonvulkan_zcheckVkDeviceGroupPresentCapabilitiesKHR
VkDeviceGroupPresentCapabilitiesKHR* zcheckVkDeviceGroupPresentCapabilitiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceGroupPresentCapabilitiesKHR moonvulkan_zcheckarrayVkDeviceGroupPresentCapabilitiesKHR
VkDeviceGroupPresentCapabilitiesKHR* zcheckarrayVkDeviceGroupPresentCapabilitiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceGroupPresentCapabilitiesKHR moonvulkan_zinitVkDeviceGroupPresentCapabilitiesKHR
int zinitVkDeviceGroupPresentCapabilitiesKHR(lua_State *L, VkDeviceGroupPresentCapabilitiesKHR* p, int *err);
#define zfreeVkDeviceGroupPresentCapabilitiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceGroupPresentCapabilitiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceGroupPresentCapabilitiesKHR), (count), (base))
#define zpushVkDeviceGroupPresentCapabilitiesKHR moonvulkan_zpushVkDeviceGroupPresentCapabilitiesKHR
int zpushVkDeviceGroupPresentCapabilitiesKHR(lua_State *L, const VkDeviceGroupPresentCapabilitiesKHR *p);

#define znewVkAcquireNextImageInfoKHR(L, err) (VkAcquireNextImageInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, sizeof(VkAcquireNextImageInfoKHR), (err))
#define znewarrayVkAcquireNextImageInfoKHR(L, count, err) (VkAcquireNextImageInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, sizeof(VkAcquireNextImageInfoKHR), (count), (err))
#define znewchainVkAcquireNextImageInfoKHR moonvulkan_znewchainVkAcquireNextImageInfoKHR
VkAcquireNextImageInfoKHR* znewchainVkAcquireNextImageInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAcquireNextImageInfoKHR moonvulkan_znewchainarrayVkAcquireNextImageInfoKHR
VkAcquireNextImageInfoKHR* znewchainarrayVkAcquireNextImageInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAcquireNextImageInfoKHR moonvulkan_zcheckVkAcquireNextImageInfoKHR
VkAcquireNextImageInfoKHR* zcheckVkAcquireNextImageInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAcquireNextImageInfoKHR moonvulkan_zcheckarrayVkAcquireNextImageInfoKHR
VkAcquireNextImageInfoKHR* zcheckarrayVkAcquireNextImageInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAcquireNextImageInfoKHR moonvulkan_zinitVkAcquireNextImageInfoKHR
int zinitVkAcquireNextImageInfoKHR(lua_State *L, VkAcquireNextImageInfoKHR* p, int *err);
#define zfreeVkAcquireNextImageInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAcquireNextImageInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAcquireNextImageInfoKHR), (count), (base))
#define zpushVkAcquireNextImageInfoKHR moonvulkan_zpushVkAcquireNextImageInfoKHR
int zpushVkAcquireNextImageInfoKHR(lua_State *L, const VkAcquireNextImageInfoKHR *p);

#define znewVkImportMemoryHostPointerInfoEXT(L, err) (VkImportMemoryHostPointerInfoEXT*)znew((L), VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, sizeof(VkImportMemoryHostPointerInfoEXT), (err))
#define znewarrayVkImportMemoryHostPointerInfoEXT(L, count, err) (VkImportMemoryHostPointerInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, sizeof(VkImportMemoryHostPointerInfoEXT), (count), (err))
#define znewchainVkImportMemoryHostPointerInfoEXT moonvulkan_znewchainVkImportMemoryHostPointerInfoEXT
VkImportMemoryHostPointerInfoEXT* znewchainVkImportMemoryHostPointerInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkImportMemoryHostPointerInfoEXT moonvulkan_znewchainarrayVkImportMemoryHostPointerInfoEXT
VkImportMemoryHostPointerInfoEXT* znewchainarrayVkImportMemoryHostPointerInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportMemoryHostPointerInfoEXT moonvulkan_zcheckVkImportMemoryHostPointerInfoEXT
VkImportMemoryHostPointerInfoEXT* zcheckVkImportMemoryHostPointerInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportMemoryHostPointerInfoEXT moonvulkan_zcheckarrayVkImportMemoryHostPointerInfoEXT
VkImportMemoryHostPointerInfoEXT* zcheckarrayVkImportMemoryHostPointerInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportMemoryHostPointerInfoEXT moonvulkan_zinitVkImportMemoryHostPointerInfoEXT
int zinitVkImportMemoryHostPointerInfoEXT(lua_State *L, VkImportMemoryHostPointerInfoEXT* p, int *err);
#define zfreeVkImportMemoryHostPointerInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportMemoryHostPointerInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkImportMemoryHostPointerInfoEXT), (count), (base))
#define zpushVkImportMemoryHostPointerInfoEXT moonvulkan_zpushVkImportMemoryHostPointerInfoEXT
int zpushVkImportMemoryHostPointerInfoEXT(lua_State *L, const VkImportMemoryHostPointerInfoEXT *p);

#define znewVkCalibratedTimestampInfoEXT(L, err) (VkCalibratedTimestampInfoEXT*)znew((L), VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, sizeof(VkCalibratedTimestampInfoEXT), (err))
#define znewarrayVkCalibratedTimestampInfoEXT(L, count, err) (VkCalibratedTimestampInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, sizeof(VkCalibratedTimestampInfoEXT), (count), (err))
#define znewchainVkCalibratedTimestampInfoEXT moonvulkan_znewchainVkCalibratedTimestampInfoEXT
VkCalibratedTimestampInfoEXT* znewchainVkCalibratedTimestampInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkCalibratedTimestampInfoEXT moonvulkan_znewchainarrayVkCalibratedTimestampInfoEXT
VkCalibratedTimestampInfoEXT* znewchainarrayVkCalibratedTimestampInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkCalibratedTimestampInfoEXT moonvulkan_zcheckVkCalibratedTimestampInfoEXT
VkCalibratedTimestampInfoEXT* zcheckVkCalibratedTimestampInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkCalibratedTimestampInfoEXT moonvulkan_zcheckarrayVkCalibratedTimestampInfoEXT
VkCalibratedTimestampInfoEXT* zcheckarrayVkCalibratedTimestampInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCalibratedTimestampInfoEXT moonvulkan_zinitVkCalibratedTimestampInfoEXT
int zinitVkCalibratedTimestampInfoEXT(lua_State *L, VkCalibratedTimestampInfoEXT* p, int *err);
#define zfreeVkCalibratedTimestampInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCalibratedTimestampInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkCalibratedTimestampInfoEXT), (count), (base))
#define zpushVkCalibratedTimestampInfoEXT moonvulkan_zpushVkCalibratedTimestampInfoEXT
int zpushVkCalibratedTimestampInfoEXT(lua_State *L, const VkCalibratedTimestampInfoEXT *p);

#define znewVkDrmFormatModifierPropertiesListEXT(L, err) (VkDrmFormatModifierPropertiesListEXT*)znew((L), VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, sizeof(VkDrmFormatModifierPropertiesListEXT), (err))
#define znewarrayVkDrmFormatModifierPropertiesListEXT(L, count, err) (VkDrmFormatModifierPropertiesListEXT*)znewarray((L), VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, sizeof(VkDrmFormatModifierPropertiesListEXT), (count), (err))
#define znewchainVkDrmFormatModifierPropertiesListEXT moonvulkan_znewchainVkDrmFormatModifierPropertiesListEXT
VkDrmFormatModifierPropertiesListEXT* znewchainVkDrmFormatModifierPropertiesListEXT(lua_State *L, int *err);
#define znewchainarrayVkDrmFormatModifierPropertiesListEXT moonvulkan_znewchainarrayVkDrmFormatModifierPropertiesListEXT
VkDrmFormatModifierPropertiesListEXT* znewchainarrayVkDrmFormatModifierPropertiesListEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDrmFormatModifierPropertiesListEXT moonvulkan_zcheckVkDrmFormatModifierPropertiesListEXT
VkDrmFormatModifierPropertiesListEXT* zcheckVkDrmFormatModifierPropertiesListEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDrmFormatModifierPropertiesListEXT moonvulkan_zcheckarrayVkDrmFormatModifierPropertiesListEXT
VkDrmFormatModifierPropertiesListEXT* zcheckarrayVkDrmFormatModifierPropertiesListEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDrmFormatModifierPropertiesListEXT moonvulkan_zinitVkDrmFormatModifierPropertiesListEXT
int zinitVkDrmFormatModifierPropertiesListEXT(lua_State *L, VkDrmFormatModifierPropertiesListEXT* p, int *err);
#define zfreeVkDrmFormatModifierPropertiesListEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDrmFormatModifierPropertiesListEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDrmFormatModifierPropertiesListEXT), (count), (base))
#define zpushVkDrmFormatModifierPropertiesListEXT moonvulkan_zpushVkDrmFormatModifierPropertiesListEXT
int zpushVkDrmFormatModifierPropertiesListEXT(lua_State *L, const VkDrmFormatModifierPropertiesListEXT *p);

#define znewVkPhysicalDeviceImageDrmFormatModifierInfoEXT(L, err) (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT), (err))
#define znewarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT(L, count, err) (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT), (count), (err))
#define znewchainVkPhysicalDeviceImageDrmFormatModifierInfoEXT moonvulkan_znewchainVkPhysicalDeviceImageDrmFormatModifierInfoEXT
VkPhysicalDeviceImageDrmFormatModifierInfoEXT* znewchainVkPhysicalDeviceImageDrmFormatModifierInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT moonvulkan_znewchainarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT
VkPhysicalDeviceImageDrmFormatModifierInfoEXT* znewchainarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceImageDrmFormatModifierInfoEXT moonvulkan_zcheckVkPhysicalDeviceImageDrmFormatModifierInfoEXT
VkPhysicalDeviceImageDrmFormatModifierInfoEXT* zcheckVkPhysicalDeviceImageDrmFormatModifierInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT moonvulkan_zcheckarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT
VkPhysicalDeviceImageDrmFormatModifierInfoEXT* zcheckarrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceImageDrmFormatModifierInfoEXT moonvulkan_zinitVkPhysicalDeviceImageDrmFormatModifierInfoEXT
int zinitVkPhysicalDeviceImageDrmFormatModifierInfoEXT(lua_State *L, VkPhysicalDeviceImageDrmFormatModifierInfoEXT* p, int *err);
#define zfreeVkPhysicalDeviceImageDrmFormatModifierInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceImageDrmFormatModifierInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT), (count), (base))
#define zpushVkPhysicalDeviceImageDrmFormatModifierInfoEXT moonvulkan_zpushVkPhysicalDeviceImageDrmFormatModifierInfoEXT
int zpushVkPhysicalDeviceImageDrmFormatModifierInfoEXT(lua_State *L, const VkPhysicalDeviceImageDrmFormatModifierInfoEXT *p);

#define znewVkImageDrmFormatModifierListCreateInfoEXT(L, err) (VkImageDrmFormatModifierListCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierListCreateInfoEXT), (err))
#define znewarrayVkImageDrmFormatModifierListCreateInfoEXT(L, count, err) (VkImageDrmFormatModifierListCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierListCreateInfoEXT), (count), (err))
#define znewchainVkImageDrmFormatModifierListCreateInfoEXT moonvulkan_znewchainVkImageDrmFormatModifierListCreateInfoEXT
VkImageDrmFormatModifierListCreateInfoEXT* znewchainVkImageDrmFormatModifierListCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkImageDrmFormatModifierListCreateInfoEXT moonvulkan_znewchainarrayVkImageDrmFormatModifierListCreateInfoEXT
VkImageDrmFormatModifierListCreateInfoEXT* znewchainarrayVkImageDrmFormatModifierListCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageDrmFormatModifierListCreateInfoEXT moonvulkan_zcheckVkImageDrmFormatModifierListCreateInfoEXT
VkImageDrmFormatModifierListCreateInfoEXT* zcheckVkImageDrmFormatModifierListCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageDrmFormatModifierListCreateInfoEXT moonvulkan_zcheckarrayVkImageDrmFormatModifierListCreateInfoEXT
VkImageDrmFormatModifierListCreateInfoEXT* zcheckarrayVkImageDrmFormatModifierListCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageDrmFormatModifierListCreateInfoEXT moonvulkan_zinitVkImageDrmFormatModifierListCreateInfoEXT
int zinitVkImageDrmFormatModifierListCreateInfoEXT(lua_State *L, VkImageDrmFormatModifierListCreateInfoEXT* p, int *err);
#define zfreeVkImageDrmFormatModifierListCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageDrmFormatModifierListCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkImageDrmFormatModifierListCreateInfoEXT), (count), (base))
#define zpushVkImageDrmFormatModifierListCreateInfoEXT moonvulkan_zpushVkImageDrmFormatModifierListCreateInfoEXT
int zpushVkImageDrmFormatModifierListCreateInfoEXT(lua_State *L, const VkImageDrmFormatModifierListCreateInfoEXT *p);

#define znewVkImageDrmFormatModifierExplicitCreateInfoEXT(L, err) (VkImageDrmFormatModifierExplicitCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT), (err))
#define znewarrayVkImageDrmFormatModifierExplicitCreateInfoEXT(L, count, err) (VkImageDrmFormatModifierExplicitCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT), (count), (err))
#define znewchainVkImageDrmFormatModifierExplicitCreateInfoEXT moonvulkan_znewchainVkImageDrmFormatModifierExplicitCreateInfoEXT
VkImageDrmFormatModifierExplicitCreateInfoEXT* znewchainVkImageDrmFormatModifierExplicitCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkImageDrmFormatModifierExplicitCreateInfoEXT moonvulkan_znewchainarrayVkImageDrmFormatModifierExplicitCreateInfoEXT
VkImageDrmFormatModifierExplicitCreateInfoEXT* znewchainarrayVkImageDrmFormatModifierExplicitCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageDrmFormatModifierExplicitCreateInfoEXT moonvulkan_zcheckVkImageDrmFormatModifierExplicitCreateInfoEXT
VkImageDrmFormatModifierExplicitCreateInfoEXT* zcheckVkImageDrmFormatModifierExplicitCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageDrmFormatModifierExplicitCreateInfoEXT moonvulkan_zcheckarrayVkImageDrmFormatModifierExplicitCreateInfoEXT
VkImageDrmFormatModifierExplicitCreateInfoEXT* zcheckarrayVkImageDrmFormatModifierExplicitCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageDrmFormatModifierExplicitCreateInfoEXT moonvulkan_zinitVkImageDrmFormatModifierExplicitCreateInfoEXT
int zinitVkImageDrmFormatModifierExplicitCreateInfoEXT(lua_State *L, VkImageDrmFormatModifierExplicitCreateInfoEXT* p, int *err);
#define zfreeVkImageDrmFormatModifierExplicitCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageDrmFormatModifierExplicitCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT), (count), (base))
#define zpushVkImageDrmFormatModifierExplicitCreateInfoEXT moonvulkan_zpushVkImageDrmFormatModifierExplicitCreateInfoEXT
int zpushVkImageDrmFormatModifierExplicitCreateInfoEXT(lua_State *L, const VkImageDrmFormatModifierExplicitCreateInfoEXT *p);

#define znewVkImageDrmFormatModifierPropertiesEXT(L, err) (VkImageDrmFormatModifierPropertiesEXT*)znew((L), VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, sizeof(VkImageDrmFormatModifierPropertiesEXT), (err))
#define znewarrayVkImageDrmFormatModifierPropertiesEXT(L, count, err) (VkImageDrmFormatModifierPropertiesEXT*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, sizeof(VkImageDrmFormatModifierPropertiesEXT), (count), (err))
#define znewchainVkImageDrmFormatModifierPropertiesEXT moonvulkan_znewchainVkImageDrmFormatModifierPropertiesEXT
VkImageDrmFormatModifierPropertiesEXT* znewchainVkImageDrmFormatModifierPropertiesEXT(lua_State *L, int *err);
#define znewchainarrayVkImageDrmFormatModifierPropertiesEXT moonvulkan_znewchainarrayVkImageDrmFormatModifierPropertiesEXT
VkImageDrmFormatModifierPropertiesEXT* znewchainarrayVkImageDrmFormatModifierPropertiesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageDrmFormatModifierPropertiesEXT moonvulkan_zcheckVkImageDrmFormatModifierPropertiesEXT
VkImageDrmFormatModifierPropertiesEXT* zcheckVkImageDrmFormatModifierPropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageDrmFormatModifierPropertiesEXT moonvulkan_zcheckarrayVkImageDrmFormatModifierPropertiesEXT
VkImageDrmFormatModifierPropertiesEXT* zcheckarrayVkImageDrmFormatModifierPropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageDrmFormatModifierPropertiesEXT moonvulkan_zinitVkImageDrmFormatModifierPropertiesEXT
int zinitVkImageDrmFormatModifierPropertiesEXT(lua_State *L, VkImageDrmFormatModifierPropertiesEXT* p, int *err);
#define zfreeVkImageDrmFormatModifierPropertiesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageDrmFormatModifierPropertiesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkImageDrmFormatModifierPropertiesEXT), (count), (base))
#define zpushVkImageDrmFormatModifierPropertiesEXT moonvulkan_zpushVkImageDrmFormatModifierPropertiesEXT
int zpushVkImageDrmFormatModifierPropertiesEXT(lua_State *L, const VkImageDrmFormatModifierPropertiesEXT *p);

#define znewVkFramebufferAttachmentImageInfo(L, err) (VkFramebufferAttachmentImageInfo*)znew((L), VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, sizeof(VkFramebufferAttachmentImageInfo), (err))
#define znewarrayVkFramebufferAttachmentImageInfo(L, count, err) (VkFramebufferAttachmentImageInfo*)znewarray((L), VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, sizeof(VkFramebufferAttachmentImageInfo), (count), (err))
#define znewchainVkFramebufferAttachmentImageInfo moonvulkan_znewchainVkFramebufferAttachmentImageInfo
VkFramebufferAttachmentImageInfo* znewchainVkFramebufferAttachmentImageInfo(lua_State *L, int *err);
#define znewchainarrayVkFramebufferAttachmentImageInfo moonvulkan_znewchainarrayVkFramebufferAttachmentImageInfo
VkFramebufferAttachmentImageInfo* znewchainarrayVkFramebufferAttachmentImageInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkFramebufferAttachmentImageInfo moonvulkan_zcheckVkFramebufferAttachmentImageInfo
VkFramebufferAttachmentImageInfo* zcheckVkFramebufferAttachmentImageInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkFramebufferAttachmentImageInfo moonvulkan_zcheckarrayVkFramebufferAttachmentImageInfo
VkFramebufferAttachmentImageInfo* zcheckarrayVkFramebufferAttachmentImageInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFramebufferAttachmentImageInfo moonvulkan_zinitVkFramebufferAttachmentImageInfo
int zinitVkFramebufferAttachmentImageInfo(lua_State *L, VkFramebufferAttachmentImageInfo* p, int *err);
#define zfreeVkFramebufferAttachmentImageInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFramebufferAttachmentImageInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkFramebufferAttachmentImageInfo), (count), (base))
#define zpushVkFramebufferAttachmentImageInfo moonvulkan_zpushVkFramebufferAttachmentImageInfo
int zpushVkFramebufferAttachmentImageInfo(lua_State *L, const VkFramebufferAttachmentImageInfo *p);

#define znewVkFramebufferAttachmentsCreateInfo(L, err) (VkFramebufferAttachmentsCreateInfo*)znew((L), VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, sizeof(VkFramebufferAttachmentsCreateInfo), (err))
#define znewarrayVkFramebufferAttachmentsCreateInfo(L, count, err) (VkFramebufferAttachmentsCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, sizeof(VkFramebufferAttachmentsCreateInfo), (count), (err))
#define znewchainVkFramebufferAttachmentsCreateInfo moonvulkan_znewchainVkFramebufferAttachmentsCreateInfo
VkFramebufferAttachmentsCreateInfo* znewchainVkFramebufferAttachmentsCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkFramebufferAttachmentsCreateInfo moonvulkan_znewchainarrayVkFramebufferAttachmentsCreateInfo
VkFramebufferAttachmentsCreateInfo* znewchainarrayVkFramebufferAttachmentsCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkFramebufferAttachmentsCreateInfo moonvulkan_zcheckVkFramebufferAttachmentsCreateInfo
VkFramebufferAttachmentsCreateInfo* zcheckVkFramebufferAttachmentsCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkFramebufferAttachmentsCreateInfo moonvulkan_zcheckarrayVkFramebufferAttachmentsCreateInfo
VkFramebufferAttachmentsCreateInfo* zcheckarrayVkFramebufferAttachmentsCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFramebufferAttachmentsCreateInfo moonvulkan_zinitVkFramebufferAttachmentsCreateInfo
int zinitVkFramebufferAttachmentsCreateInfo(lua_State *L, VkFramebufferAttachmentsCreateInfo* p, int *err);
#define zfreeVkFramebufferAttachmentsCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFramebufferAttachmentsCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkFramebufferAttachmentsCreateInfo), (count), (base))
#define zpushVkFramebufferAttachmentsCreateInfo moonvulkan_zpushVkFramebufferAttachmentsCreateInfo
int zpushVkFramebufferAttachmentsCreateInfo(lua_State *L, const VkFramebufferAttachmentsCreateInfo *p);

#define znewVkRenderPassAttachmentBeginInfo(L, err) (VkRenderPassAttachmentBeginInfo*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, sizeof(VkRenderPassAttachmentBeginInfo), (err))
#define znewarrayVkRenderPassAttachmentBeginInfo(L, count, err) (VkRenderPassAttachmentBeginInfo*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, sizeof(VkRenderPassAttachmentBeginInfo), (count), (err))
#define znewchainVkRenderPassAttachmentBeginInfo moonvulkan_znewchainVkRenderPassAttachmentBeginInfo
VkRenderPassAttachmentBeginInfo* znewchainVkRenderPassAttachmentBeginInfo(lua_State *L, int *err);
#define znewchainarrayVkRenderPassAttachmentBeginInfo moonvulkan_znewchainarrayVkRenderPassAttachmentBeginInfo
VkRenderPassAttachmentBeginInfo* znewchainarrayVkRenderPassAttachmentBeginInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassAttachmentBeginInfo moonvulkan_zcheckVkRenderPassAttachmentBeginInfo
VkRenderPassAttachmentBeginInfo* zcheckVkRenderPassAttachmentBeginInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassAttachmentBeginInfo moonvulkan_zcheckarrayVkRenderPassAttachmentBeginInfo
VkRenderPassAttachmentBeginInfo* zcheckarrayVkRenderPassAttachmentBeginInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassAttachmentBeginInfo moonvulkan_zinitVkRenderPassAttachmentBeginInfo
int zinitVkRenderPassAttachmentBeginInfo(lua_State *L, VkRenderPassAttachmentBeginInfo* p, int *err);
#define zfreeVkRenderPassAttachmentBeginInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassAttachmentBeginInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassAttachmentBeginInfo), (count), (base))
#define zpushVkRenderPassAttachmentBeginInfo moonvulkan_zpushVkRenderPassAttachmentBeginInfo
int zpushVkRenderPassAttachmentBeginInfo(lua_State *L, const VkRenderPassAttachmentBeginInfo *p);

#define znewVkSubpassDescriptionDepthStencilResolve(L, err) (VkSubpassDescriptionDepthStencilResolve*)znew((L), VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, sizeof(VkSubpassDescriptionDepthStencilResolve), (err))
#define znewarrayVkSubpassDescriptionDepthStencilResolve(L, count, err) (VkSubpassDescriptionDepthStencilResolve*)znewarray((L), VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, sizeof(VkSubpassDescriptionDepthStencilResolve), (count), (err))
#define znewchainVkSubpassDescriptionDepthStencilResolve moonvulkan_znewchainVkSubpassDescriptionDepthStencilResolve
VkSubpassDescriptionDepthStencilResolve* znewchainVkSubpassDescriptionDepthStencilResolve(lua_State *L, int *err);
#define znewchainarrayVkSubpassDescriptionDepthStencilResolve moonvulkan_znewchainarrayVkSubpassDescriptionDepthStencilResolve
VkSubpassDescriptionDepthStencilResolve* znewchainarrayVkSubpassDescriptionDepthStencilResolve(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubpassDescriptionDepthStencilResolve moonvulkan_zcheckVkSubpassDescriptionDepthStencilResolve
VkSubpassDescriptionDepthStencilResolve* zcheckVkSubpassDescriptionDepthStencilResolve(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassDescriptionDepthStencilResolve moonvulkan_zcheckarrayVkSubpassDescriptionDepthStencilResolve
VkSubpassDescriptionDepthStencilResolve* zcheckarrayVkSubpassDescriptionDepthStencilResolve(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassDescriptionDepthStencilResolve moonvulkan_zinitVkSubpassDescriptionDepthStencilResolve
int zinitVkSubpassDescriptionDepthStencilResolve(lua_State *L, VkSubpassDescriptionDepthStencilResolve* p, int *err);
#define zfreeVkSubpassDescriptionDepthStencilResolve(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubpassDescriptionDepthStencilResolve(L, p, count, base) zfreearray((L), (p), sizeof(VkSubpassDescriptionDepthStencilResolve), (count), (base))
#define zpushVkSubpassDescriptionDepthStencilResolve moonvulkan_zpushVkSubpassDescriptionDepthStencilResolve
int zpushVkSubpassDescriptionDepthStencilResolve(lua_State *L, const VkSubpassDescriptionDepthStencilResolve *p);

#define znewVkSurfaceProtectedCapabilitiesKHR(L, err) (VkSurfaceProtectedCapabilitiesKHR*)znew((L), VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, sizeof(VkSurfaceProtectedCapabilitiesKHR), (err))
#define znewarrayVkSurfaceProtectedCapabilitiesKHR(L, count, err) (VkSurfaceProtectedCapabilitiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, sizeof(VkSurfaceProtectedCapabilitiesKHR), (count), (err))
#define znewchainVkSurfaceProtectedCapabilitiesKHR moonvulkan_znewchainVkSurfaceProtectedCapabilitiesKHR
VkSurfaceProtectedCapabilitiesKHR* znewchainVkSurfaceProtectedCapabilitiesKHR(lua_State *L, int *err);
#define znewchainarrayVkSurfaceProtectedCapabilitiesKHR moonvulkan_znewchainarrayVkSurfaceProtectedCapabilitiesKHR
VkSurfaceProtectedCapabilitiesKHR* znewchainarrayVkSurfaceProtectedCapabilitiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSurfaceProtectedCapabilitiesKHR moonvulkan_zcheckVkSurfaceProtectedCapabilitiesKHR
VkSurfaceProtectedCapabilitiesKHR* zcheckVkSurfaceProtectedCapabilitiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSurfaceProtectedCapabilitiesKHR moonvulkan_zcheckarrayVkSurfaceProtectedCapabilitiesKHR
VkSurfaceProtectedCapabilitiesKHR* zcheckarrayVkSurfaceProtectedCapabilitiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSurfaceProtectedCapabilitiesKHR moonvulkan_zinitVkSurfaceProtectedCapabilitiesKHR
int zinitVkSurfaceProtectedCapabilitiesKHR(lua_State *L, VkSurfaceProtectedCapabilitiesKHR* p, int *err);
#define zfreeVkSurfaceProtectedCapabilitiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSurfaceProtectedCapabilitiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSurfaceProtectedCapabilitiesKHR), (count), (base))
#define zpushVkSurfaceProtectedCapabilitiesKHR moonvulkan_zpushVkSurfaceProtectedCapabilitiesKHR
int zpushVkSurfaceProtectedCapabilitiesKHR(lua_State *L, const VkSurfaceProtectedCapabilitiesKHR *p);

#define znewVkPipelineRasterizationDepthClipStateCreateInfoEXT(L, err) (VkPipelineRasterizationDepthClipStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT), (err))
#define znewarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT(L, count, err) (VkPipelineRasterizationDepthClipStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineRasterizationDepthClipStateCreateInfoEXT moonvulkan_znewchainVkPipelineRasterizationDepthClipStateCreateInfoEXT
VkPipelineRasterizationDepthClipStateCreateInfoEXT* znewchainVkPipelineRasterizationDepthClipStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT
VkPipelineRasterizationDepthClipStateCreateInfoEXT* znewchainarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRasterizationDepthClipStateCreateInfoEXT moonvulkan_zcheckVkPipelineRasterizationDepthClipStateCreateInfoEXT
VkPipelineRasterizationDepthClipStateCreateInfoEXT* zcheckVkPipelineRasterizationDepthClipStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT
VkPipelineRasterizationDepthClipStateCreateInfoEXT* zcheckarrayVkPipelineRasterizationDepthClipStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRasterizationDepthClipStateCreateInfoEXT moonvulkan_zinitVkPipelineRasterizationDepthClipStateCreateInfoEXT
int zinitVkPipelineRasterizationDepthClipStateCreateInfoEXT(lua_State *L, VkPipelineRasterizationDepthClipStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineRasterizationDepthClipStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRasterizationDepthClipStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineRasterizationDepthClipStateCreateInfoEXT moonvulkan_zpushVkPipelineRasterizationDepthClipStateCreateInfoEXT
int zpushVkPipelineRasterizationDepthClipStateCreateInfoEXT(lua_State *L, const VkPipelineRasterizationDepthClipStateCreateInfoEXT *p);

#define znewVkPhysicalDeviceImageViewImageFormatInfoEXT(L, err) (VkPhysicalDeviceImageViewImageFormatInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT), (err))
#define znewarrayVkPhysicalDeviceImageViewImageFormatInfoEXT(L, count, err) (VkPhysicalDeviceImageViewImageFormatInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT), (count), (err))
#define znewchainVkPhysicalDeviceImageViewImageFormatInfoEXT moonvulkan_znewchainVkPhysicalDeviceImageViewImageFormatInfoEXT
VkPhysicalDeviceImageViewImageFormatInfoEXT* znewchainVkPhysicalDeviceImageViewImageFormatInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceImageViewImageFormatInfoEXT moonvulkan_znewchainarrayVkPhysicalDeviceImageViewImageFormatInfoEXT
VkPhysicalDeviceImageViewImageFormatInfoEXT* znewchainarrayVkPhysicalDeviceImageViewImageFormatInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceImageViewImageFormatInfoEXT moonvulkan_zcheckVkPhysicalDeviceImageViewImageFormatInfoEXT
VkPhysicalDeviceImageViewImageFormatInfoEXT* zcheckVkPhysicalDeviceImageViewImageFormatInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceImageViewImageFormatInfoEXT moonvulkan_zcheckarrayVkPhysicalDeviceImageViewImageFormatInfoEXT
VkPhysicalDeviceImageViewImageFormatInfoEXT* zcheckarrayVkPhysicalDeviceImageViewImageFormatInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceImageViewImageFormatInfoEXT moonvulkan_zinitVkPhysicalDeviceImageViewImageFormatInfoEXT
int zinitVkPhysicalDeviceImageViewImageFormatInfoEXT(lua_State *L, VkPhysicalDeviceImageViewImageFormatInfoEXT* p, int *err);
#define zfreeVkPhysicalDeviceImageViewImageFormatInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceImageViewImageFormatInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT), (count), (base))
#define zpushVkPhysicalDeviceImageViewImageFormatInfoEXT moonvulkan_zpushVkPhysicalDeviceImageViewImageFormatInfoEXT
int zpushVkPhysicalDeviceImageViewImageFormatInfoEXT(lua_State *L, const VkPhysicalDeviceImageViewImageFormatInfoEXT *p);

#define znewVkFilterCubicImageViewImageFormatPropertiesEXT(L, err) (VkFilterCubicImageViewImageFormatPropertiesEXT*)znew((L), VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT), (err))
#define znewarrayVkFilterCubicImageViewImageFormatPropertiesEXT(L, count, err) (VkFilterCubicImageViewImageFormatPropertiesEXT*)znewarray((L), VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT), (count), (err))
#define znewchainVkFilterCubicImageViewImageFormatPropertiesEXT moonvulkan_znewchainVkFilterCubicImageViewImageFormatPropertiesEXT
VkFilterCubicImageViewImageFormatPropertiesEXT* znewchainVkFilterCubicImageViewImageFormatPropertiesEXT(lua_State *L, int *err);
#define znewchainarrayVkFilterCubicImageViewImageFormatPropertiesEXT moonvulkan_znewchainarrayVkFilterCubicImageViewImageFormatPropertiesEXT
VkFilterCubicImageViewImageFormatPropertiesEXT* znewchainarrayVkFilterCubicImageViewImageFormatPropertiesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkFilterCubicImageViewImageFormatPropertiesEXT moonvulkan_zcheckVkFilterCubicImageViewImageFormatPropertiesEXT
VkFilterCubicImageViewImageFormatPropertiesEXT* zcheckVkFilterCubicImageViewImageFormatPropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkFilterCubicImageViewImageFormatPropertiesEXT moonvulkan_zcheckarrayVkFilterCubicImageViewImageFormatPropertiesEXT
VkFilterCubicImageViewImageFormatPropertiesEXT* zcheckarrayVkFilterCubicImageViewImageFormatPropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFilterCubicImageViewImageFormatPropertiesEXT moonvulkan_zinitVkFilterCubicImageViewImageFormatPropertiesEXT
int zinitVkFilterCubicImageViewImageFormatPropertiesEXT(lua_State *L, VkFilterCubicImageViewImageFormatPropertiesEXT* p, int *err);
#define zfreeVkFilterCubicImageViewImageFormatPropertiesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFilterCubicImageViewImageFormatPropertiesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT), (count), (base))
#define zpushVkFilterCubicImageViewImageFormatPropertiesEXT moonvulkan_zpushVkFilterCubicImageViewImageFormatPropertiesEXT
int zpushVkFilterCubicImageViewImageFormatPropertiesEXT(lua_State *L, const VkFilterCubicImageViewImageFormatPropertiesEXT *p);

#define znewVkPipelineCreationFeedbackCreateInfoEXT(L, err) (VkPipelineCreationFeedbackCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, sizeof(VkPipelineCreationFeedbackCreateInfoEXT), (err))
#define znewarrayVkPipelineCreationFeedbackCreateInfoEXT(L, count, err) (VkPipelineCreationFeedbackCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, sizeof(VkPipelineCreationFeedbackCreateInfoEXT), (count), (err))
#define znewchainVkPipelineCreationFeedbackCreateInfoEXT moonvulkan_znewchainVkPipelineCreationFeedbackCreateInfoEXT
VkPipelineCreationFeedbackCreateInfoEXT* znewchainVkPipelineCreationFeedbackCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineCreationFeedbackCreateInfoEXT moonvulkan_znewchainarrayVkPipelineCreationFeedbackCreateInfoEXT
VkPipelineCreationFeedbackCreateInfoEXT* znewchainarrayVkPipelineCreationFeedbackCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineCreationFeedbackCreateInfoEXT moonvulkan_zcheckVkPipelineCreationFeedbackCreateInfoEXT
VkPipelineCreationFeedbackCreateInfoEXT* zcheckVkPipelineCreationFeedbackCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineCreationFeedbackCreateInfoEXT moonvulkan_zcheckarrayVkPipelineCreationFeedbackCreateInfoEXT
VkPipelineCreationFeedbackCreateInfoEXT* zcheckarrayVkPipelineCreationFeedbackCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineCreationFeedbackCreateInfoEXT moonvulkan_zinitVkPipelineCreationFeedbackCreateInfoEXT
int zinitVkPipelineCreationFeedbackCreateInfoEXT(lua_State *L, VkPipelineCreationFeedbackCreateInfoEXT* p, int *err);
#define zfreeVkPipelineCreationFeedbackCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineCreationFeedbackCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineCreationFeedbackCreateInfoEXT), (count), (base))
#define zpushVkPipelineCreationFeedbackCreateInfoEXT moonvulkan_zpushVkPipelineCreationFeedbackCreateInfoEXT
int zpushVkPipelineCreationFeedbackCreateInfoEXT(lua_State *L, const VkPipelineCreationFeedbackCreateInfoEXT *p);

#define znewVkRenderPassFragmentDensityMapCreateInfoEXT(L, err) (VkRenderPassFragmentDensityMapCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT), (err))
#define znewarrayVkRenderPassFragmentDensityMapCreateInfoEXT(L, count, err) (VkRenderPassFragmentDensityMapCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT), (count), (err))
#define znewchainVkRenderPassFragmentDensityMapCreateInfoEXT moonvulkan_znewchainVkRenderPassFragmentDensityMapCreateInfoEXT
VkRenderPassFragmentDensityMapCreateInfoEXT* znewchainVkRenderPassFragmentDensityMapCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkRenderPassFragmentDensityMapCreateInfoEXT moonvulkan_znewchainarrayVkRenderPassFragmentDensityMapCreateInfoEXT
VkRenderPassFragmentDensityMapCreateInfoEXT* znewchainarrayVkRenderPassFragmentDensityMapCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderPassFragmentDensityMapCreateInfoEXT moonvulkan_zcheckVkRenderPassFragmentDensityMapCreateInfoEXT
VkRenderPassFragmentDensityMapCreateInfoEXT* zcheckVkRenderPassFragmentDensityMapCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderPassFragmentDensityMapCreateInfoEXT moonvulkan_zcheckarrayVkRenderPassFragmentDensityMapCreateInfoEXT
VkRenderPassFragmentDensityMapCreateInfoEXT* zcheckarrayVkRenderPassFragmentDensityMapCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderPassFragmentDensityMapCreateInfoEXT moonvulkan_zinitVkRenderPassFragmentDensityMapCreateInfoEXT
int zinitVkRenderPassFragmentDensityMapCreateInfoEXT(lua_State *L, VkRenderPassFragmentDensityMapCreateInfoEXT* p, int *err);
#define zfreeVkRenderPassFragmentDensityMapCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderPassFragmentDensityMapCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT), (count), (base))
#define zpushVkRenderPassFragmentDensityMapCreateInfoEXT moonvulkan_zpushVkRenderPassFragmentDensityMapCreateInfoEXT
int zpushVkRenderPassFragmentDensityMapCreateInfoEXT(lua_State *L, const VkRenderPassFragmentDensityMapCreateInfoEXT *p);

#define znewVkMemoryPriorityAllocateInfoEXT(L, err) (VkMemoryPriorityAllocateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, sizeof(VkMemoryPriorityAllocateInfoEXT), (err))
#define znewarrayVkMemoryPriorityAllocateInfoEXT(L, count, err) (VkMemoryPriorityAllocateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, sizeof(VkMemoryPriorityAllocateInfoEXT), (count), (err))
#define znewchainVkMemoryPriorityAllocateInfoEXT moonvulkan_znewchainVkMemoryPriorityAllocateInfoEXT
VkMemoryPriorityAllocateInfoEXT* znewchainVkMemoryPriorityAllocateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkMemoryPriorityAllocateInfoEXT moonvulkan_znewchainarrayVkMemoryPriorityAllocateInfoEXT
VkMemoryPriorityAllocateInfoEXT* znewchainarrayVkMemoryPriorityAllocateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryPriorityAllocateInfoEXT moonvulkan_zcheckVkMemoryPriorityAllocateInfoEXT
VkMemoryPriorityAllocateInfoEXT* zcheckVkMemoryPriorityAllocateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryPriorityAllocateInfoEXT moonvulkan_zcheckarrayVkMemoryPriorityAllocateInfoEXT
VkMemoryPriorityAllocateInfoEXT* zcheckarrayVkMemoryPriorityAllocateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryPriorityAllocateInfoEXT moonvulkan_zinitVkMemoryPriorityAllocateInfoEXT
int zinitVkMemoryPriorityAllocateInfoEXT(lua_State *L, VkMemoryPriorityAllocateInfoEXT* p, int *err);
#define zfreeVkMemoryPriorityAllocateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryPriorityAllocateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryPriorityAllocateInfoEXT), (count), (base))
#define zpushVkMemoryPriorityAllocateInfoEXT moonvulkan_zpushVkMemoryPriorityAllocateInfoEXT
int zpushVkMemoryPriorityAllocateInfoEXT(lua_State *L, const VkMemoryPriorityAllocateInfoEXT *p);

#define znewVkBufferDeviceAddressInfo(L, err) (VkBufferDeviceAddressInfo*)znew((L), VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, sizeof(VkBufferDeviceAddressInfo), (err))
#define znewarrayVkBufferDeviceAddressInfo(L, count, err) (VkBufferDeviceAddressInfo*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, sizeof(VkBufferDeviceAddressInfo), (count), (err))
#define znewchainVkBufferDeviceAddressInfo moonvulkan_znewchainVkBufferDeviceAddressInfo
VkBufferDeviceAddressInfo* znewchainVkBufferDeviceAddressInfo(lua_State *L, int *err);
#define znewchainarrayVkBufferDeviceAddressInfo moonvulkan_znewchainarrayVkBufferDeviceAddressInfo
VkBufferDeviceAddressInfo* znewchainarrayVkBufferDeviceAddressInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferDeviceAddressInfo moonvulkan_zcheckVkBufferDeviceAddressInfo
VkBufferDeviceAddressInfo* zcheckVkBufferDeviceAddressInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferDeviceAddressInfo moonvulkan_zcheckarrayVkBufferDeviceAddressInfo
VkBufferDeviceAddressInfo* zcheckarrayVkBufferDeviceAddressInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferDeviceAddressInfo moonvulkan_zinitVkBufferDeviceAddressInfo
int zinitVkBufferDeviceAddressInfo(lua_State *L, VkBufferDeviceAddressInfo* p, int *err);
#define zfreeVkBufferDeviceAddressInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferDeviceAddressInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferDeviceAddressInfo), (count), (base))
#define zpushVkBufferDeviceAddressInfo moonvulkan_zpushVkBufferDeviceAddressInfo
int zpushVkBufferDeviceAddressInfo(lua_State *L, const VkBufferDeviceAddressInfo *p);

#define znewVkImageStencilUsageCreateInfo(L, err) (VkImageStencilUsageCreateInfo*)znew((L), VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, sizeof(VkImageStencilUsageCreateInfo), (err))
#define znewarrayVkImageStencilUsageCreateInfo(L, count, err) (VkImageStencilUsageCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, sizeof(VkImageStencilUsageCreateInfo), (count), (err))
#define znewchainVkImageStencilUsageCreateInfo moonvulkan_znewchainVkImageStencilUsageCreateInfo
VkImageStencilUsageCreateInfo* znewchainVkImageStencilUsageCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkImageStencilUsageCreateInfo moonvulkan_znewchainarrayVkImageStencilUsageCreateInfo
VkImageStencilUsageCreateInfo* znewchainarrayVkImageStencilUsageCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageStencilUsageCreateInfo moonvulkan_zcheckVkImageStencilUsageCreateInfo
VkImageStencilUsageCreateInfo* zcheckVkImageStencilUsageCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageStencilUsageCreateInfo moonvulkan_zcheckarrayVkImageStencilUsageCreateInfo
VkImageStencilUsageCreateInfo* zcheckarrayVkImageStencilUsageCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageStencilUsageCreateInfo moonvulkan_zinitVkImageStencilUsageCreateInfo
int zinitVkImageStencilUsageCreateInfo(lua_State *L, VkImageStencilUsageCreateInfo* p, int *err);
#define zfreeVkImageStencilUsageCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageStencilUsageCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkImageStencilUsageCreateInfo), (count), (base))
#define zpushVkImageStencilUsageCreateInfo moonvulkan_zpushVkImageStencilUsageCreateInfo
int zpushVkImageStencilUsageCreateInfo(lua_State *L, const VkImageStencilUsageCreateInfo *p);

#define znewVkValidationFeaturesEXT(L, err) (VkValidationFeaturesEXT*)znew((L), VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, sizeof(VkValidationFeaturesEXT), (err))
#define znewarrayVkValidationFeaturesEXT(L, count, err) (VkValidationFeaturesEXT*)znewarray((L), VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, sizeof(VkValidationFeaturesEXT), (count), (err))
#define znewchainVkValidationFeaturesEXT moonvulkan_znewchainVkValidationFeaturesEXT
VkValidationFeaturesEXT* znewchainVkValidationFeaturesEXT(lua_State *L, int *err);
#define znewchainarrayVkValidationFeaturesEXT moonvulkan_znewchainarrayVkValidationFeaturesEXT
VkValidationFeaturesEXT* znewchainarrayVkValidationFeaturesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkValidationFeaturesEXT moonvulkan_zcheckVkValidationFeaturesEXT
VkValidationFeaturesEXT* zcheckVkValidationFeaturesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkValidationFeaturesEXT moonvulkan_zcheckarrayVkValidationFeaturesEXT
VkValidationFeaturesEXT* zcheckarrayVkValidationFeaturesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkValidationFeaturesEXT moonvulkan_zinitVkValidationFeaturesEXT
int zinitVkValidationFeaturesEXT(lua_State *L, VkValidationFeaturesEXT* p, int *err);
#define zfreeVkValidationFeaturesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkValidationFeaturesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkValidationFeaturesEXT), (count), (base))
#define zpushVkValidationFeaturesEXT moonvulkan_zpushVkValidationFeaturesEXT
int zpushVkValidationFeaturesEXT(lua_State *L, const VkValidationFeaturesEXT *p);

#define znewVkHeadlessSurfaceCreateInfoEXT(L, err) (VkHeadlessSurfaceCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, sizeof(VkHeadlessSurfaceCreateInfoEXT), (err))
#define znewarrayVkHeadlessSurfaceCreateInfoEXT(L, count, err) (VkHeadlessSurfaceCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, sizeof(VkHeadlessSurfaceCreateInfoEXT), (count), (err))
#define znewchainVkHeadlessSurfaceCreateInfoEXT moonvulkan_znewchainVkHeadlessSurfaceCreateInfoEXT
VkHeadlessSurfaceCreateInfoEXT* znewchainVkHeadlessSurfaceCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkHeadlessSurfaceCreateInfoEXT moonvulkan_znewchainarrayVkHeadlessSurfaceCreateInfoEXT
VkHeadlessSurfaceCreateInfoEXT* znewchainarrayVkHeadlessSurfaceCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkHeadlessSurfaceCreateInfoEXT moonvulkan_zcheckVkHeadlessSurfaceCreateInfoEXT
VkHeadlessSurfaceCreateInfoEXT* zcheckVkHeadlessSurfaceCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkHeadlessSurfaceCreateInfoEXT moonvulkan_zcheckarrayVkHeadlessSurfaceCreateInfoEXT
VkHeadlessSurfaceCreateInfoEXT* zcheckarrayVkHeadlessSurfaceCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkHeadlessSurfaceCreateInfoEXT moonvulkan_zinitVkHeadlessSurfaceCreateInfoEXT
int zinitVkHeadlessSurfaceCreateInfoEXT(lua_State *L, VkHeadlessSurfaceCreateInfoEXT* p, int *err);
#define zfreeVkHeadlessSurfaceCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkHeadlessSurfaceCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkHeadlessSurfaceCreateInfoEXT), (count), (base))
#define zpushVkHeadlessSurfaceCreateInfoEXT moonvulkan_zpushVkHeadlessSurfaceCreateInfoEXT
int zpushVkHeadlessSurfaceCreateInfoEXT(lua_State *L, const VkHeadlessSurfaceCreateInfoEXT *p);

#define znewVkPerformanceCounterKHR(L, err) (VkPerformanceCounterKHR*)znew((L), VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, sizeof(VkPerformanceCounterKHR), (err))
#define znewarrayVkPerformanceCounterKHR(L, count, err) (VkPerformanceCounterKHR*)znewarray((L), VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, sizeof(VkPerformanceCounterKHR), (count), (err))
#define znewchainVkPerformanceCounterKHR moonvulkan_znewchainVkPerformanceCounterKHR
VkPerformanceCounterKHR* znewchainVkPerformanceCounterKHR(lua_State *L, int *err);
#define znewchainarrayVkPerformanceCounterKHR moonvulkan_znewchainarrayVkPerformanceCounterKHR
VkPerformanceCounterKHR* znewchainarrayVkPerformanceCounterKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPerformanceCounterKHR moonvulkan_zcheckVkPerformanceCounterKHR
VkPerformanceCounterKHR* zcheckVkPerformanceCounterKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPerformanceCounterKHR moonvulkan_zcheckarrayVkPerformanceCounterKHR
VkPerformanceCounterKHR* zcheckarrayVkPerformanceCounterKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPerformanceCounterKHR moonvulkan_zinitVkPerformanceCounterKHR
int zinitVkPerformanceCounterKHR(lua_State *L, VkPerformanceCounterKHR* p, int *err);
#define zfreeVkPerformanceCounterKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPerformanceCounterKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPerformanceCounterKHR), (count), (base))
#define zpushVkPerformanceCounterKHR moonvulkan_zpushVkPerformanceCounterKHR
int zpushVkPerformanceCounterKHR(lua_State *L, const VkPerformanceCounterKHR *p);

#define znewVkPerformanceCounterDescriptionKHR(L, err) (VkPerformanceCounterDescriptionKHR*)znew((L), VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, sizeof(VkPerformanceCounterDescriptionKHR), (err))
#define znewarrayVkPerformanceCounterDescriptionKHR(L, count, err) (VkPerformanceCounterDescriptionKHR*)znewarray((L), VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, sizeof(VkPerformanceCounterDescriptionKHR), (count), (err))
#define znewchainVkPerformanceCounterDescriptionKHR moonvulkan_znewchainVkPerformanceCounterDescriptionKHR
VkPerformanceCounterDescriptionKHR* znewchainVkPerformanceCounterDescriptionKHR(lua_State *L, int *err);
#define znewchainarrayVkPerformanceCounterDescriptionKHR moonvulkan_znewchainarrayVkPerformanceCounterDescriptionKHR
VkPerformanceCounterDescriptionKHR* znewchainarrayVkPerformanceCounterDescriptionKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPerformanceCounterDescriptionKHR moonvulkan_zcheckVkPerformanceCounterDescriptionKHR
VkPerformanceCounterDescriptionKHR* zcheckVkPerformanceCounterDescriptionKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPerformanceCounterDescriptionKHR moonvulkan_zcheckarrayVkPerformanceCounterDescriptionKHR
VkPerformanceCounterDescriptionKHR* zcheckarrayVkPerformanceCounterDescriptionKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPerformanceCounterDescriptionKHR moonvulkan_zinitVkPerformanceCounterDescriptionKHR
int zinitVkPerformanceCounterDescriptionKHR(lua_State *L, VkPerformanceCounterDescriptionKHR* p, int *err);
#define zfreeVkPerformanceCounterDescriptionKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPerformanceCounterDescriptionKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPerformanceCounterDescriptionKHR), (count), (base))
#define zpushVkPerformanceCounterDescriptionKHR moonvulkan_zpushVkPerformanceCounterDescriptionKHR
int zpushVkPerformanceCounterDescriptionKHR(lua_State *L, const VkPerformanceCounterDescriptionKHR *p);

#define znewVkQueryPoolPerformanceCreateInfoKHR(L, err) (VkQueryPoolPerformanceCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, sizeof(VkQueryPoolPerformanceCreateInfoKHR), (err))
#define znewarrayVkQueryPoolPerformanceCreateInfoKHR(L, count, err) (VkQueryPoolPerformanceCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, sizeof(VkQueryPoolPerformanceCreateInfoKHR), (count), (err))
#define znewchainVkQueryPoolPerformanceCreateInfoKHR moonvulkan_znewchainVkQueryPoolPerformanceCreateInfoKHR
VkQueryPoolPerformanceCreateInfoKHR* znewchainVkQueryPoolPerformanceCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkQueryPoolPerformanceCreateInfoKHR moonvulkan_znewchainarrayVkQueryPoolPerformanceCreateInfoKHR
VkQueryPoolPerformanceCreateInfoKHR* znewchainarrayVkQueryPoolPerformanceCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkQueryPoolPerformanceCreateInfoKHR moonvulkan_zcheckVkQueryPoolPerformanceCreateInfoKHR
VkQueryPoolPerformanceCreateInfoKHR* zcheckVkQueryPoolPerformanceCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkQueryPoolPerformanceCreateInfoKHR moonvulkan_zcheckarrayVkQueryPoolPerformanceCreateInfoKHR
VkQueryPoolPerformanceCreateInfoKHR* zcheckarrayVkQueryPoolPerformanceCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkQueryPoolPerformanceCreateInfoKHR moonvulkan_zinitVkQueryPoolPerformanceCreateInfoKHR
int zinitVkQueryPoolPerformanceCreateInfoKHR(lua_State *L, VkQueryPoolPerformanceCreateInfoKHR* p, int *err);
#define zfreeVkQueryPoolPerformanceCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkQueryPoolPerformanceCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkQueryPoolPerformanceCreateInfoKHR), (count), (base))
#define zpushVkQueryPoolPerformanceCreateInfoKHR moonvulkan_zpushVkQueryPoolPerformanceCreateInfoKHR
int zpushVkQueryPoolPerformanceCreateInfoKHR(lua_State *L, const VkQueryPoolPerformanceCreateInfoKHR *p);

#define znewVkAcquireProfilingLockInfoKHR(L, err) (VkAcquireProfilingLockInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, sizeof(VkAcquireProfilingLockInfoKHR), (err))
#define znewarrayVkAcquireProfilingLockInfoKHR(L, count, err) (VkAcquireProfilingLockInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, sizeof(VkAcquireProfilingLockInfoKHR), (count), (err))
#define znewchainVkAcquireProfilingLockInfoKHR moonvulkan_znewchainVkAcquireProfilingLockInfoKHR
VkAcquireProfilingLockInfoKHR* znewchainVkAcquireProfilingLockInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAcquireProfilingLockInfoKHR moonvulkan_znewchainarrayVkAcquireProfilingLockInfoKHR
VkAcquireProfilingLockInfoKHR* znewchainarrayVkAcquireProfilingLockInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAcquireProfilingLockInfoKHR moonvulkan_zcheckVkAcquireProfilingLockInfoKHR
VkAcquireProfilingLockInfoKHR* zcheckVkAcquireProfilingLockInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAcquireProfilingLockInfoKHR moonvulkan_zcheckarrayVkAcquireProfilingLockInfoKHR
VkAcquireProfilingLockInfoKHR* zcheckarrayVkAcquireProfilingLockInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAcquireProfilingLockInfoKHR moonvulkan_zinitVkAcquireProfilingLockInfoKHR
int zinitVkAcquireProfilingLockInfoKHR(lua_State *L, VkAcquireProfilingLockInfoKHR* p, int *err);
#define zfreeVkAcquireProfilingLockInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAcquireProfilingLockInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAcquireProfilingLockInfoKHR), (count), (base))
#define zpushVkAcquireProfilingLockInfoKHR moonvulkan_zpushVkAcquireProfilingLockInfoKHR
int zpushVkAcquireProfilingLockInfoKHR(lua_State *L, const VkAcquireProfilingLockInfoKHR *p);

#define znewVkPerformanceQuerySubmitInfoKHR(L, err) (VkPerformanceQuerySubmitInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, sizeof(VkPerformanceQuerySubmitInfoKHR), (err))
#define znewarrayVkPerformanceQuerySubmitInfoKHR(L, count, err) (VkPerformanceQuerySubmitInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, sizeof(VkPerformanceQuerySubmitInfoKHR), (count), (err))
#define znewchainVkPerformanceQuerySubmitInfoKHR moonvulkan_znewchainVkPerformanceQuerySubmitInfoKHR
VkPerformanceQuerySubmitInfoKHR* znewchainVkPerformanceQuerySubmitInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPerformanceQuerySubmitInfoKHR moonvulkan_znewchainarrayVkPerformanceQuerySubmitInfoKHR
VkPerformanceQuerySubmitInfoKHR* znewchainarrayVkPerformanceQuerySubmitInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPerformanceQuerySubmitInfoKHR moonvulkan_zcheckVkPerformanceQuerySubmitInfoKHR
VkPerformanceQuerySubmitInfoKHR* zcheckVkPerformanceQuerySubmitInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPerformanceQuerySubmitInfoKHR moonvulkan_zcheckarrayVkPerformanceQuerySubmitInfoKHR
VkPerformanceQuerySubmitInfoKHR* zcheckarrayVkPerformanceQuerySubmitInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPerformanceQuerySubmitInfoKHR moonvulkan_zinitVkPerformanceQuerySubmitInfoKHR
int zinitVkPerformanceQuerySubmitInfoKHR(lua_State *L, VkPerformanceQuerySubmitInfoKHR* p, int *err);
#define zfreeVkPerformanceQuerySubmitInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPerformanceQuerySubmitInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPerformanceQuerySubmitInfoKHR), (count), (base))
#define zpushVkPerformanceQuerySubmitInfoKHR moonvulkan_zpushVkPerformanceQuerySubmitInfoKHR
int zpushVkPerformanceQuerySubmitInfoKHR(lua_State *L, const VkPerformanceQuerySubmitInfoKHR *p);

#define znewVkSemaphoreTypeCreateInfo(L, err) (VkSemaphoreTypeCreateInfo*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, sizeof(VkSemaphoreTypeCreateInfo), (err))
#define znewarrayVkSemaphoreTypeCreateInfo(L, count, err) (VkSemaphoreTypeCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, sizeof(VkSemaphoreTypeCreateInfo), (count), (err))
#define znewchainVkSemaphoreTypeCreateInfo moonvulkan_znewchainVkSemaphoreTypeCreateInfo
VkSemaphoreTypeCreateInfo* znewchainVkSemaphoreTypeCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreTypeCreateInfo moonvulkan_znewchainarrayVkSemaphoreTypeCreateInfo
VkSemaphoreTypeCreateInfo* znewchainarrayVkSemaphoreTypeCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreTypeCreateInfo moonvulkan_zcheckVkSemaphoreTypeCreateInfo
VkSemaphoreTypeCreateInfo* zcheckVkSemaphoreTypeCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreTypeCreateInfo moonvulkan_zcheckarrayVkSemaphoreTypeCreateInfo
VkSemaphoreTypeCreateInfo* zcheckarrayVkSemaphoreTypeCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreTypeCreateInfo moonvulkan_zinitVkSemaphoreTypeCreateInfo
int zinitVkSemaphoreTypeCreateInfo(lua_State *L, VkSemaphoreTypeCreateInfo* p, int *err);
#define zfreeVkSemaphoreTypeCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreTypeCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreTypeCreateInfo), (count), (base))
#define zpushVkSemaphoreTypeCreateInfo moonvulkan_zpushVkSemaphoreTypeCreateInfo
int zpushVkSemaphoreTypeCreateInfo(lua_State *L, const VkSemaphoreTypeCreateInfo *p);

#define znewVkTimelineSemaphoreSubmitInfo(L, err) (VkTimelineSemaphoreSubmitInfo*)znew((L), VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, sizeof(VkTimelineSemaphoreSubmitInfo), (err))
#define znewarrayVkTimelineSemaphoreSubmitInfo(L, count, err) (VkTimelineSemaphoreSubmitInfo*)znewarray((L), VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, sizeof(VkTimelineSemaphoreSubmitInfo), (count), (err))
#define znewchainVkTimelineSemaphoreSubmitInfo moonvulkan_znewchainVkTimelineSemaphoreSubmitInfo
VkTimelineSemaphoreSubmitInfo* znewchainVkTimelineSemaphoreSubmitInfo(lua_State *L, int *err);
#define znewchainarrayVkTimelineSemaphoreSubmitInfo moonvulkan_znewchainarrayVkTimelineSemaphoreSubmitInfo
VkTimelineSemaphoreSubmitInfo* znewchainarrayVkTimelineSemaphoreSubmitInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkTimelineSemaphoreSubmitInfo moonvulkan_zcheckVkTimelineSemaphoreSubmitInfo
VkTimelineSemaphoreSubmitInfo* zcheckVkTimelineSemaphoreSubmitInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkTimelineSemaphoreSubmitInfo moonvulkan_zcheckarrayVkTimelineSemaphoreSubmitInfo
VkTimelineSemaphoreSubmitInfo* zcheckarrayVkTimelineSemaphoreSubmitInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkTimelineSemaphoreSubmitInfo moonvulkan_zinitVkTimelineSemaphoreSubmitInfo
int zinitVkTimelineSemaphoreSubmitInfo(lua_State *L, VkTimelineSemaphoreSubmitInfo* p, int *err);
#define zfreeVkTimelineSemaphoreSubmitInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkTimelineSemaphoreSubmitInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkTimelineSemaphoreSubmitInfo), (count), (base))
#define zpushVkTimelineSemaphoreSubmitInfo moonvulkan_zpushVkTimelineSemaphoreSubmitInfo
int zpushVkTimelineSemaphoreSubmitInfo(lua_State *L, const VkTimelineSemaphoreSubmitInfo *p);

#define znewVkSemaphoreWaitInfo(L, err) (VkSemaphoreWaitInfo*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, sizeof(VkSemaphoreWaitInfo), (err))
#define znewarrayVkSemaphoreWaitInfo(L, count, err) (VkSemaphoreWaitInfo*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, sizeof(VkSemaphoreWaitInfo), (count), (err))
#define znewchainVkSemaphoreWaitInfo moonvulkan_znewchainVkSemaphoreWaitInfo
VkSemaphoreWaitInfo* znewchainVkSemaphoreWaitInfo(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreWaitInfo moonvulkan_znewchainarrayVkSemaphoreWaitInfo
VkSemaphoreWaitInfo* znewchainarrayVkSemaphoreWaitInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreWaitInfo moonvulkan_zcheckVkSemaphoreWaitInfo
VkSemaphoreWaitInfo* zcheckVkSemaphoreWaitInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreWaitInfo moonvulkan_zcheckarrayVkSemaphoreWaitInfo
VkSemaphoreWaitInfo* zcheckarrayVkSemaphoreWaitInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreWaitInfo moonvulkan_zinitVkSemaphoreWaitInfo
int zinitVkSemaphoreWaitInfo(lua_State *L, VkSemaphoreWaitInfo* p, int *err);
#define zfreeVkSemaphoreWaitInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreWaitInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreWaitInfo), (count), (base))
#define zpushVkSemaphoreWaitInfo moonvulkan_zpushVkSemaphoreWaitInfo
int zpushVkSemaphoreWaitInfo(lua_State *L, const VkSemaphoreWaitInfo *p);

#define znewVkSemaphoreSignalInfo(L, err) (VkSemaphoreSignalInfo*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, sizeof(VkSemaphoreSignalInfo), (err))
#define znewarrayVkSemaphoreSignalInfo(L, count, err) (VkSemaphoreSignalInfo*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, sizeof(VkSemaphoreSignalInfo), (count), (err))
#define znewchainVkSemaphoreSignalInfo moonvulkan_znewchainVkSemaphoreSignalInfo
VkSemaphoreSignalInfo* znewchainVkSemaphoreSignalInfo(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreSignalInfo moonvulkan_znewchainarrayVkSemaphoreSignalInfo
VkSemaphoreSignalInfo* znewchainarrayVkSemaphoreSignalInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreSignalInfo moonvulkan_zcheckVkSemaphoreSignalInfo
VkSemaphoreSignalInfo* zcheckVkSemaphoreSignalInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreSignalInfo moonvulkan_zcheckarrayVkSemaphoreSignalInfo
VkSemaphoreSignalInfo* zcheckarrayVkSemaphoreSignalInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreSignalInfo moonvulkan_zinitVkSemaphoreSignalInfo
int zinitVkSemaphoreSignalInfo(lua_State *L, VkSemaphoreSignalInfo* p, int *err);
#define zfreeVkSemaphoreSignalInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreSignalInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreSignalInfo), (count), (base))
#define zpushVkSemaphoreSignalInfo moonvulkan_zpushVkSemaphoreSignalInfo
int zpushVkSemaphoreSignalInfo(lua_State *L, const VkSemaphoreSignalInfo *p);

#define znewVkFragmentShadingRateAttachmentInfoKHR(L, err) (VkFragmentShadingRateAttachmentInfoKHR*)znew((L), VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkFragmentShadingRateAttachmentInfoKHR), (err))
#define znewarrayVkFragmentShadingRateAttachmentInfoKHR(L, count, err) (VkFragmentShadingRateAttachmentInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkFragmentShadingRateAttachmentInfoKHR), (count), (err))
#define znewchainVkFragmentShadingRateAttachmentInfoKHR moonvulkan_znewchainVkFragmentShadingRateAttachmentInfoKHR
VkFragmentShadingRateAttachmentInfoKHR* znewchainVkFragmentShadingRateAttachmentInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkFragmentShadingRateAttachmentInfoKHR moonvulkan_znewchainarrayVkFragmentShadingRateAttachmentInfoKHR
VkFragmentShadingRateAttachmentInfoKHR* znewchainarrayVkFragmentShadingRateAttachmentInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkFragmentShadingRateAttachmentInfoKHR moonvulkan_zcheckVkFragmentShadingRateAttachmentInfoKHR
VkFragmentShadingRateAttachmentInfoKHR* zcheckVkFragmentShadingRateAttachmentInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkFragmentShadingRateAttachmentInfoKHR moonvulkan_zcheckarrayVkFragmentShadingRateAttachmentInfoKHR
VkFragmentShadingRateAttachmentInfoKHR* zcheckarrayVkFragmentShadingRateAttachmentInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFragmentShadingRateAttachmentInfoKHR moonvulkan_zinitVkFragmentShadingRateAttachmentInfoKHR
int zinitVkFragmentShadingRateAttachmentInfoKHR(lua_State *L, VkFragmentShadingRateAttachmentInfoKHR* p, int *err);
#define zfreeVkFragmentShadingRateAttachmentInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFragmentShadingRateAttachmentInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkFragmentShadingRateAttachmentInfoKHR), (count), (base))
#define zpushVkFragmentShadingRateAttachmentInfoKHR moonvulkan_zpushVkFragmentShadingRateAttachmentInfoKHR
int zpushVkFragmentShadingRateAttachmentInfoKHR(lua_State *L, const VkFragmentShadingRateAttachmentInfoKHR *p);

#define znewVkPipelineFragmentShadingRateStateCreateInfoKHR(L, err) (VkPipelineFragmentShadingRateStateCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR), (err))
#define znewarrayVkPipelineFragmentShadingRateStateCreateInfoKHR(L, count, err) (VkPipelineFragmentShadingRateStateCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR), (count), (err))
#define znewchainVkPipelineFragmentShadingRateStateCreateInfoKHR moonvulkan_znewchainVkPipelineFragmentShadingRateStateCreateInfoKHR
VkPipelineFragmentShadingRateStateCreateInfoKHR* znewchainVkPipelineFragmentShadingRateStateCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineFragmentShadingRateStateCreateInfoKHR moonvulkan_znewchainarrayVkPipelineFragmentShadingRateStateCreateInfoKHR
VkPipelineFragmentShadingRateStateCreateInfoKHR* znewchainarrayVkPipelineFragmentShadingRateStateCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineFragmentShadingRateStateCreateInfoKHR moonvulkan_zcheckVkPipelineFragmentShadingRateStateCreateInfoKHR
VkPipelineFragmentShadingRateStateCreateInfoKHR* zcheckVkPipelineFragmentShadingRateStateCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineFragmentShadingRateStateCreateInfoKHR moonvulkan_zcheckarrayVkPipelineFragmentShadingRateStateCreateInfoKHR
VkPipelineFragmentShadingRateStateCreateInfoKHR* zcheckarrayVkPipelineFragmentShadingRateStateCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineFragmentShadingRateStateCreateInfoKHR moonvulkan_zinitVkPipelineFragmentShadingRateStateCreateInfoKHR
int zinitVkPipelineFragmentShadingRateStateCreateInfoKHR(lua_State *L, VkPipelineFragmentShadingRateStateCreateInfoKHR* p, int *err);
#define zfreeVkPipelineFragmentShadingRateStateCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineFragmentShadingRateStateCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR), (count), (base))
#define zpushVkPipelineFragmentShadingRateStateCreateInfoKHR moonvulkan_zpushVkPipelineFragmentShadingRateStateCreateInfoKHR
int zpushVkPipelineFragmentShadingRateStateCreateInfoKHR(lua_State *L, const VkPipelineFragmentShadingRateStateCreateInfoKHR *p);

#define znewVkPhysicalDeviceFragmentShadingRateKHR(L, err) (VkPhysicalDeviceFragmentShadingRateKHR*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, sizeof(VkPhysicalDeviceFragmentShadingRateKHR), (err))
#define znewarrayVkPhysicalDeviceFragmentShadingRateKHR(L, count, err) (VkPhysicalDeviceFragmentShadingRateKHR*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, sizeof(VkPhysicalDeviceFragmentShadingRateKHR), (count), (err))
#define znewchainVkPhysicalDeviceFragmentShadingRateKHR moonvulkan_znewchainVkPhysicalDeviceFragmentShadingRateKHR
VkPhysicalDeviceFragmentShadingRateKHR* znewchainVkPhysicalDeviceFragmentShadingRateKHR(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceFragmentShadingRateKHR moonvulkan_znewchainarrayVkPhysicalDeviceFragmentShadingRateKHR
VkPhysicalDeviceFragmentShadingRateKHR* znewchainarrayVkPhysicalDeviceFragmentShadingRateKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceFragmentShadingRateKHR moonvulkan_zcheckVkPhysicalDeviceFragmentShadingRateKHR
VkPhysicalDeviceFragmentShadingRateKHR* zcheckVkPhysicalDeviceFragmentShadingRateKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceFragmentShadingRateKHR moonvulkan_zcheckarrayVkPhysicalDeviceFragmentShadingRateKHR
VkPhysicalDeviceFragmentShadingRateKHR* zcheckarrayVkPhysicalDeviceFragmentShadingRateKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceFragmentShadingRateKHR moonvulkan_zinitVkPhysicalDeviceFragmentShadingRateKHR
int zinitVkPhysicalDeviceFragmentShadingRateKHR(lua_State *L, VkPhysicalDeviceFragmentShadingRateKHR* p, int *err);
#define zfreeVkPhysicalDeviceFragmentShadingRateKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceFragmentShadingRateKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceFragmentShadingRateKHR), (count), (base))
#define zpushVkPhysicalDeviceFragmentShadingRateKHR moonvulkan_zpushVkPhysicalDeviceFragmentShadingRateKHR
int zpushVkPhysicalDeviceFragmentShadingRateKHR(lua_State *L, const VkPhysicalDeviceFragmentShadingRateKHR *p);

#define znewVkAttachmentReferenceStencilLayout(L, err) (VkAttachmentReferenceStencilLayout*)znew((L), VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, sizeof(VkAttachmentReferenceStencilLayout), (err))
#define znewarrayVkAttachmentReferenceStencilLayout(L, count, err) (VkAttachmentReferenceStencilLayout*)znewarray((L), VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, sizeof(VkAttachmentReferenceStencilLayout), (count), (err))
#define znewchainVkAttachmentReferenceStencilLayout moonvulkan_znewchainVkAttachmentReferenceStencilLayout
VkAttachmentReferenceStencilLayout* znewchainVkAttachmentReferenceStencilLayout(lua_State *L, int *err);
#define znewchainarrayVkAttachmentReferenceStencilLayout moonvulkan_znewchainarrayVkAttachmentReferenceStencilLayout
VkAttachmentReferenceStencilLayout* znewchainarrayVkAttachmentReferenceStencilLayout(lua_State *L, uint32_t count, int *err);
#define zcheckVkAttachmentReferenceStencilLayout moonvulkan_zcheckVkAttachmentReferenceStencilLayout
VkAttachmentReferenceStencilLayout* zcheckVkAttachmentReferenceStencilLayout(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentReferenceStencilLayout moonvulkan_zcheckarrayVkAttachmentReferenceStencilLayout
VkAttachmentReferenceStencilLayout* zcheckarrayVkAttachmentReferenceStencilLayout(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentReferenceStencilLayout moonvulkan_zinitVkAttachmentReferenceStencilLayout
int zinitVkAttachmentReferenceStencilLayout(lua_State *L, VkAttachmentReferenceStencilLayout* p, int *err);
#define zfreeVkAttachmentReferenceStencilLayout(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAttachmentReferenceStencilLayout(L, p, count, base) zfreearray((L), (p), sizeof(VkAttachmentReferenceStencilLayout), (count), (base))
#define zpushVkAttachmentReferenceStencilLayout moonvulkan_zpushVkAttachmentReferenceStencilLayout
int zpushVkAttachmentReferenceStencilLayout(lua_State *L, const VkAttachmentReferenceStencilLayout *p);

#define znewVkAttachmentDescriptionStencilLayout(L, err) (VkAttachmentDescriptionStencilLayout*)znew((L), VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, sizeof(VkAttachmentDescriptionStencilLayout), (err))
#define znewarrayVkAttachmentDescriptionStencilLayout(L, count, err) (VkAttachmentDescriptionStencilLayout*)znewarray((L), VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, sizeof(VkAttachmentDescriptionStencilLayout), (count), (err))
#define znewchainVkAttachmentDescriptionStencilLayout moonvulkan_znewchainVkAttachmentDescriptionStencilLayout
VkAttachmentDescriptionStencilLayout* znewchainVkAttachmentDescriptionStencilLayout(lua_State *L, int *err);
#define znewchainarrayVkAttachmentDescriptionStencilLayout moonvulkan_znewchainarrayVkAttachmentDescriptionStencilLayout
VkAttachmentDescriptionStencilLayout* znewchainarrayVkAttachmentDescriptionStencilLayout(lua_State *L, uint32_t count, int *err);
#define zcheckVkAttachmentDescriptionStencilLayout moonvulkan_zcheckVkAttachmentDescriptionStencilLayout
VkAttachmentDescriptionStencilLayout* zcheckVkAttachmentDescriptionStencilLayout(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentDescriptionStencilLayout moonvulkan_zcheckarrayVkAttachmentDescriptionStencilLayout
VkAttachmentDescriptionStencilLayout* zcheckarrayVkAttachmentDescriptionStencilLayout(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentDescriptionStencilLayout moonvulkan_zinitVkAttachmentDescriptionStencilLayout
int zinitVkAttachmentDescriptionStencilLayout(lua_State *L, VkAttachmentDescriptionStencilLayout* p, int *err);
#define zfreeVkAttachmentDescriptionStencilLayout(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAttachmentDescriptionStencilLayout(L, p, count, base) zfreearray((L), (p), sizeof(VkAttachmentDescriptionStencilLayout), (count), (base))
#define zpushVkAttachmentDescriptionStencilLayout moonvulkan_zpushVkAttachmentDescriptionStencilLayout
int zpushVkAttachmentDescriptionStencilLayout(lua_State *L, const VkAttachmentDescriptionStencilLayout *p);

#define znewVkBufferOpaqueCaptureAddressCreateInfo(L, err) (VkBufferOpaqueCaptureAddressCreateInfo*)znew((L), VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, sizeof(VkBufferOpaqueCaptureAddressCreateInfo), (err))
#define znewarrayVkBufferOpaqueCaptureAddressCreateInfo(L, count, err) (VkBufferOpaqueCaptureAddressCreateInfo*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, sizeof(VkBufferOpaqueCaptureAddressCreateInfo), (count), (err))
#define znewchainVkBufferOpaqueCaptureAddressCreateInfo moonvulkan_znewchainVkBufferOpaqueCaptureAddressCreateInfo
VkBufferOpaqueCaptureAddressCreateInfo* znewchainVkBufferOpaqueCaptureAddressCreateInfo(lua_State *L, int *err);
#define znewchainarrayVkBufferOpaqueCaptureAddressCreateInfo moonvulkan_znewchainarrayVkBufferOpaqueCaptureAddressCreateInfo
VkBufferOpaqueCaptureAddressCreateInfo* znewchainarrayVkBufferOpaqueCaptureAddressCreateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferOpaqueCaptureAddressCreateInfo moonvulkan_zcheckVkBufferOpaqueCaptureAddressCreateInfo
VkBufferOpaqueCaptureAddressCreateInfo* zcheckVkBufferOpaqueCaptureAddressCreateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferOpaqueCaptureAddressCreateInfo moonvulkan_zcheckarrayVkBufferOpaqueCaptureAddressCreateInfo
VkBufferOpaqueCaptureAddressCreateInfo* zcheckarrayVkBufferOpaqueCaptureAddressCreateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferOpaqueCaptureAddressCreateInfo moonvulkan_zinitVkBufferOpaqueCaptureAddressCreateInfo
int zinitVkBufferOpaqueCaptureAddressCreateInfo(lua_State *L, VkBufferOpaqueCaptureAddressCreateInfo* p, int *err);
#define zfreeVkBufferOpaqueCaptureAddressCreateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferOpaqueCaptureAddressCreateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferOpaqueCaptureAddressCreateInfo), (count), (base))
#define zpushVkBufferOpaqueCaptureAddressCreateInfo moonvulkan_zpushVkBufferOpaqueCaptureAddressCreateInfo
int zpushVkBufferOpaqueCaptureAddressCreateInfo(lua_State *L, const VkBufferOpaqueCaptureAddressCreateInfo *p);

#define znewVkMemoryOpaqueCaptureAddressAllocateInfo(L, err) (VkMemoryOpaqueCaptureAddressAllocateInfo*)znew((L), VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo), (err))
#define znewarrayVkMemoryOpaqueCaptureAddressAllocateInfo(L, count, err) (VkMemoryOpaqueCaptureAddressAllocateInfo*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo), (count), (err))
#define znewchainVkMemoryOpaqueCaptureAddressAllocateInfo moonvulkan_znewchainVkMemoryOpaqueCaptureAddressAllocateInfo
VkMemoryOpaqueCaptureAddressAllocateInfo* znewchainVkMemoryOpaqueCaptureAddressAllocateInfo(lua_State *L, int *err);
#define znewchainarrayVkMemoryOpaqueCaptureAddressAllocateInfo moonvulkan_znewchainarrayVkMemoryOpaqueCaptureAddressAllocateInfo
VkMemoryOpaqueCaptureAddressAllocateInfo* znewchainarrayVkMemoryOpaqueCaptureAddressAllocateInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryOpaqueCaptureAddressAllocateInfo moonvulkan_zcheckVkMemoryOpaqueCaptureAddressAllocateInfo
VkMemoryOpaqueCaptureAddressAllocateInfo* zcheckVkMemoryOpaqueCaptureAddressAllocateInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryOpaqueCaptureAddressAllocateInfo moonvulkan_zcheckarrayVkMemoryOpaqueCaptureAddressAllocateInfo
VkMemoryOpaqueCaptureAddressAllocateInfo* zcheckarrayVkMemoryOpaqueCaptureAddressAllocateInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryOpaqueCaptureAddressAllocateInfo moonvulkan_zinitVkMemoryOpaqueCaptureAddressAllocateInfo
int zinitVkMemoryOpaqueCaptureAddressAllocateInfo(lua_State *L, VkMemoryOpaqueCaptureAddressAllocateInfo* p, int *err);
#define zfreeVkMemoryOpaqueCaptureAddressAllocateInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryOpaqueCaptureAddressAllocateInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo), (count), (base))
#define zpushVkMemoryOpaqueCaptureAddressAllocateInfo moonvulkan_zpushVkMemoryOpaqueCaptureAddressAllocateInfo
int zpushVkMemoryOpaqueCaptureAddressAllocateInfo(lua_State *L, const VkMemoryOpaqueCaptureAddressAllocateInfo *p);

#define znewVkDeviceMemoryOpaqueCaptureAddressInfo(L, err) (VkDeviceMemoryOpaqueCaptureAddressInfo*)znew((L), VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo), (err))
#define znewarrayVkDeviceMemoryOpaqueCaptureAddressInfo(L, count, err) (VkDeviceMemoryOpaqueCaptureAddressInfo*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo), (count), (err))
#define znewchainVkDeviceMemoryOpaqueCaptureAddressInfo moonvulkan_znewchainVkDeviceMemoryOpaqueCaptureAddressInfo
VkDeviceMemoryOpaqueCaptureAddressInfo* znewchainVkDeviceMemoryOpaqueCaptureAddressInfo(lua_State *L, int *err);
#define znewchainarrayVkDeviceMemoryOpaqueCaptureAddressInfo moonvulkan_znewchainarrayVkDeviceMemoryOpaqueCaptureAddressInfo
VkDeviceMemoryOpaqueCaptureAddressInfo* znewchainarrayVkDeviceMemoryOpaqueCaptureAddressInfo(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceMemoryOpaqueCaptureAddressInfo moonvulkan_zcheckVkDeviceMemoryOpaqueCaptureAddressInfo
VkDeviceMemoryOpaqueCaptureAddressInfo* zcheckVkDeviceMemoryOpaqueCaptureAddressInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceMemoryOpaqueCaptureAddressInfo moonvulkan_zcheckarrayVkDeviceMemoryOpaqueCaptureAddressInfo
VkDeviceMemoryOpaqueCaptureAddressInfo* zcheckarrayVkDeviceMemoryOpaqueCaptureAddressInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceMemoryOpaqueCaptureAddressInfo moonvulkan_zinitVkDeviceMemoryOpaqueCaptureAddressInfo
int zinitVkDeviceMemoryOpaqueCaptureAddressInfo(lua_State *L, VkDeviceMemoryOpaqueCaptureAddressInfo* p, int *err);
#define zfreeVkDeviceMemoryOpaqueCaptureAddressInfo(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceMemoryOpaqueCaptureAddressInfo(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo), (count), (base))
#define zpushVkDeviceMemoryOpaqueCaptureAddressInfo moonvulkan_zpushVkDeviceMemoryOpaqueCaptureAddressInfo
int zpushVkDeviceMemoryOpaqueCaptureAddressInfo(lua_State *L, const VkDeviceMemoryOpaqueCaptureAddressInfo *p);

#define znewVkPipelineInfoKHR(L, err) (VkPipelineInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, sizeof(VkPipelineInfoKHR), (err))
#define znewarrayVkPipelineInfoKHR(L, count, err) (VkPipelineInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, sizeof(VkPipelineInfoKHR), (count), (err))
#define znewchainVkPipelineInfoKHR moonvulkan_znewchainVkPipelineInfoKHR
VkPipelineInfoKHR* znewchainVkPipelineInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineInfoKHR moonvulkan_znewchainarrayVkPipelineInfoKHR
VkPipelineInfoKHR* znewchainarrayVkPipelineInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineInfoKHR moonvulkan_zcheckVkPipelineInfoKHR
VkPipelineInfoKHR* zcheckVkPipelineInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineInfoKHR moonvulkan_zcheckarrayVkPipelineInfoKHR
VkPipelineInfoKHR* zcheckarrayVkPipelineInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineInfoKHR moonvulkan_zinitVkPipelineInfoKHR
int zinitVkPipelineInfoKHR(lua_State *L, VkPipelineInfoKHR* p, int *err);
#define zfreeVkPipelineInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineInfoKHR), (count), (base))
#define zpushVkPipelineInfoKHR moonvulkan_zpushVkPipelineInfoKHR
int zpushVkPipelineInfoKHR(lua_State *L, const VkPipelineInfoKHR *p);

#define znewVkPipelineExecutablePropertiesKHR(L, err) (VkPipelineExecutablePropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, sizeof(VkPipelineExecutablePropertiesKHR), (err))
#define znewarrayVkPipelineExecutablePropertiesKHR(L, count, err) (VkPipelineExecutablePropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, sizeof(VkPipelineExecutablePropertiesKHR), (count), (err))
#define znewchainVkPipelineExecutablePropertiesKHR moonvulkan_znewchainVkPipelineExecutablePropertiesKHR
VkPipelineExecutablePropertiesKHR* znewchainVkPipelineExecutablePropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineExecutablePropertiesKHR moonvulkan_znewchainarrayVkPipelineExecutablePropertiesKHR
VkPipelineExecutablePropertiesKHR* znewchainarrayVkPipelineExecutablePropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineExecutablePropertiesKHR moonvulkan_zcheckVkPipelineExecutablePropertiesKHR
VkPipelineExecutablePropertiesKHR* zcheckVkPipelineExecutablePropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineExecutablePropertiesKHR moonvulkan_zcheckarrayVkPipelineExecutablePropertiesKHR
VkPipelineExecutablePropertiesKHR* zcheckarrayVkPipelineExecutablePropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineExecutablePropertiesKHR moonvulkan_zinitVkPipelineExecutablePropertiesKHR
int zinitVkPipelineExecutablePropertiesKHR(lua_State *L, VkPipelineExecutablePropertiesKHR* p, int *err);
#define zfreeVkPipelineExecutablePropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineExecutablePropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineExecutablePropertiesKHR), (count), (base))
#define zpushVkPipelineExecutablePropertiesKHR moonvulkan_zpushVkPipelineExecutablePropertiesKHR
int zpushVkPipelineExecutablePropertiesKHR(lua_State *L, const VkPipelineExecutablePropertiesKHR *p);

#define znewVkPipelineExecutableInfoKHR(L, err) (VkPipelineExecutableInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, sizeof(VkPipelineExecutableInfoKHR), (err))
#define znewarrayVkPipelineExecutableInfoKHR(L, count, err) (VkPipelineExecutableInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, sizeof(VkPipelineExecutableInfoKHR), (count), (err))
#define znewchainVkPipelineExecutableInfoKHR moonvulkan_znewchainVkPipelineExecutableInfoKHR
VkPipelineExecutableInfoKHR* znewchainVkPipelineExecutableInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineExecutableInfoKHR moonvulkan_znewchainarrayVkPipelineExecutableInfoKHR
VkPipelineExecutableInfoKHR* znewchainarrayVkPipelineExecutableInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineExecutableInfoKHR moonvulkan_zcheckVkPipelineExecutableInfoKHR
VkPipelineExecutableInfoKHR* zcheckVkPipelineExecutableInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineExecutableInfoKHR moonvulkan_zcheckarrayVkPipelineExecutableInfoKHR
VkPipelineExecutableInfoKHR* zcheckarrayVkPipelineExecutableInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineExecutableInfoKHR moonvulkan_zinitVkPipelineExecutableInfoKHR
int zinitVkPipelineExecutableInfoKHR(lua_State *L, VkPipelineExecutableInfoKHR* p, int *err);
#define zfreeVkPipelineExecutableInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineExecutableInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineExecutableInfoKHR), (count), (base))
#define zpushVkPipelineExecutableInfoKHR moonvulkan_zpushVkPipelineExecutableInfoKHR
int zpushVkPipelineExecutableInfoKHR(lua_State *L, const VkPipelineExecutableInfoKHR *p);

#define znewVkPipelineExecutableStatisticKHR(L, err) (VkPipelineExecutableStatisticKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, sizeof(VkPipelineExecutableStatisticKHR), (err))
#define znewarrayVkPipelineExecutableStatisticKHR(L, count, err) (VkPipelineExecutableStatisticKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, sizeof(VkPipelineExecutableStatisticKHR), (count), (err))
#define znewchainVkPipelineExecutableStatisticKHR moonvulkan_znewchainVkPipelineExecutableStatisticKHR
VkPipelineExecutableStatisticKHR* znewchainVkPipelineExecutableStatisticKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineExecutableStatisticKHR moonvulkan_znewchainarrayVkPipelineExecutableStatisticKHR
VkPipelineExecutableStatisticKHR* znewchainarrayVkPipelineExecutableStatisticKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineExecutableStatisticKHR moonvulkan_zcheckVkPipelineExecutableStatisticKHR
VkPipelineExecutableStatisticKHR* zcheckVkPipelineExecutableStatisticKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineExecutableStatisticKHR moonvulkan_zcheckarrayVkPipelineExecutableStatisticKHR
VkPipelineExecutableStatisticKHR* zcheckarrayVkPipelineExecutableStatisticKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineExecutableStatisticKHR moonvulkan_zinitVkPipelineExecutableStatisticKHR
int zinitVkPipelineExecutableStatisticKHR(lua_State *L, VkPipelineExecutableStatisticKHR* p, int *err);
#define zfreeVkPipelineExecutableStatisticKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineExecutableStatisticKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineExecutableStatisticKHR), (count), (base))
#define zpushVkPipelineExecutableStatisticKHR moonvulkan_zpushVkPipelineExecutableStatisticKHR
int zpushVkPipelineExecutableStatisticKHR(lua_State *L, const VkPipelineExecutableStatisticKHR *p);

#define znewVkPipelineExecutableInternalRepresentationKHR(L, err) (VkPipelineExecutableInternalRepresentationKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, sizeof(VkPipelineExecutableInternalRepresentationKHR), (err))
#define znewarrayVkPipelineExecutableInternalRepresentationKHR(L, count, err) (VkPipelineExecutableInternalRepresentationKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, sizeof(VkPipelineExecutableInternalRepresentationKHR), (count), (err))
#define znewchainVkPipelineExecutableInternalRepresentationKHR moonvulkan_znewchainVkPipelineExecutableInternalRepresentationKHR
VkPipelineExecutableInternalRepresentationKHR* znewchainVkPipelineExecutableInternalRepresentationKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineExecutableInternalRepresentationKHR moonvulkan_znewchainarrayVkPipelineExecutableInternalRepresentationKHR
VkPipelineExecutableInternalRepresentationKHR* znewchainarrayVkPipelineExecutableInternalRepresentationKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineExecutableInternalRepresentationKHR moonvulkan_zcheckVkPipelineExecutableInternalRepresentationKHR
VkPipelineExecutableInternalRepresentationKHR* zcheckVkPipelineExecutableInternalRepresentationKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineExecutableInternalRepresentationKHR moonvulkan_zcheckarrayVkPipelineExecutableInternalRepresentationKHR
VkPipelineExecutableInternalRepresentationKHR* zcheckarrayVkPipelineExecutableInternalRepresentationKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineExecutableInternalRepresentationKHR moonvulkan_zinitVkPipelineExecutableInternalRepresentationKHR
int zinitVkPipelineExecutableInternalRepresentationKHR(lua_State *L, VkPipelineExecutableInternalRepresentationKHR* p, int *err);
#define zfreeVkPipelineExecutableInternalRepresentationKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineExecutableInternalRepresentationKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineExecutableInternalRepresentationKHR), (count), (base))
#define zpushVkPipelineExecutableInternalRepresentationKHR moonvulkan_zpushVkPipelineExecutableInternalRepresentationKHR
int zpushVkPipelineExecutableInternalRepresentationKHR(lua_State *L, const VkPipelineExecutableInternalRepresentationKHR *p);

#define znewVkPipelineLibraryCreateInfoKHR(L, err) (VkPipelineLibraryCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, sizeof(VkPipelineLibraryCreateInfoKHR), (err))
#define znewarrayVkPipelineLibraryCreateInfoKHR(L, count, err) (VkPipelineLibraryCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, sizeof(VkPipelineLibraryCreateInfoKHR), (count), (err))
#define znewchainVkPipelineLibraryCreateInfoKHR moonvulkan_znewchainVkPipelineLibraryCreateInfoKHR
VkPipelineLibraryCreateInfoKHR* znewchainVkPipelineLibraryCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineLibraryCreateInfoKHR moonvulkan_znewchainarrayVkPipelineLibraryCreateInfoKHR
VkPipelineLibraryCreateInfoKHR* znewchainarrayVkPipelineLibraryCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineLibraryCreateInfoKHR moonvulkan_zcheckVkPipelineLibraryCreateInfoKHR
VkPipelineLibraryCreateInfoKHR* zcheckVkPipelineLibraryCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineLibraryCreateInfoKHR moonvulkan_zcheckarrayVkPipelineLibraryCreateInfoKHR
VkPipelineLibraryCreateInfoKHR* zcheckarrayVkPipelineLibraryCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineLibraryCreateInfoKHR moonvulkan_zinitVkPipelineLibraryCreateInfoKHR
int zinitVkPipelineLibraryCreateInfoKHR(lua_State *L, VkPipelineLibraryCreateInfoKHR* p, int *err);
#define zfreeVkPipelineLibraryCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineLibraryCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineLibraryCreateInfoKHR), (count), (base))
#define zpushVkPipelineLibraryCreateInfoKHR moonvulkan_zpushVkPipelineLibraryCreateInfoKHR
int zpushVkPipelineLibraryCreateInfoKHR(lua_State *L, const VkPipelineLibraryCreateInfoKHR *p);

#define znewVkPresentIdKHR(L, err) (VkPresentIdKHR*)znew((L), VK_STRUCTURE_TYPE_PRESENT_ID_KHR, sizeof(VkPresentIdKHR), (err))
#define znewarrayVkPresentIdKHR(L, count, err) (VkPresentIdKHR*)znewarray((L), VK_STRUCTURE_TYPE_PRESENT_ID_KHR, sizeof(VkPresentIdKHR), (count), (err))
#define znewchainVkPresentIdKHR moonvulkan_znewchainVkPresentIdKHR
VkPresentIdKHR* znewchainVkPresentIdKHR(lua_State *L, int *err);
#define znewchainarrayVkPresentIdKHR moonvulkan_znewchainarrayVkPresentIdKHR
VkPresentIdKHR* znewchainarrayVkPresentIdKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPresentIdKHR moonvulkan_zcheckVkPresentIdKHR
VkPresentIdKHR* zcheckVkPresentIdKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPresentIdKHR moonvulkan_zcheckarrayVkPresentIdKHR
VkPresentIdKHR* zcheckarrayVkPresentIdKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPresentIdKHR moonvulkan_zinitVkPresentIdKHR
int zinitVkPresentIdKHR(lua_State *L, VkPresentIdKHR* p, int *err);
#define zfreeVkPresentIdKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPresentIdKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPresentIdKHR), (count), (base))
#define zpushVkPresentIdKHR moonvulkan_zpushVkPresentIdKHR
int zpushVkPresentIdKHR(lua_State *L, const VkPresentIdKHR *p);

#define znewVkMemoryBarrier2KHR(L, err) (VkMemoryBarrier2KHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, sizeof(VkMemoryBarrier2KHR), (err))
#define znewarrayVkMemoryBarrier2KHR(L, count, err) (VkMemoryBarrier2KHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, sizeof(VkMemoryBarrier2KHR), (count), (err))
#define znewchainVkMemoryBarrier2KHR moonvulkan_znewchainVkMemoryBarrier2KHR
VkMemoryBarrier2KHR* znewchainVkMemoryBarrier2KHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryBarrier2KHR moonvulkan_znewchainarrayVkMemoryBarrier2KHR
VkMemoryBarrier2KHR* znewchainarrayVkMemoryBarrier2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryBarrier2KHR moonvulkan_zcheckVkMemoryBarrier2KHR
VkMemoryBarrier2KHR* zcheckVkMemoryBarrier2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryBarrier2KHR moonvulkan_zcheckarrayVkMemoryBarrier2KHR
VkMemoryBarrier2KHR* zcheckarrayVkMemoryBarrier2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryBarrier2KHR moonvulkan_zinitVkMemoryBarrier2KHR
int zinitVkMemoryBarrier2KHR(lua_State *L, VkMemoryBarrier2KHR* p, int *err);
#define zfreeVkMemoryBarrier2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryBarrier2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryBarrier2KHR), (count), (base))
#define zpushVkMemoryBarrier2KHR moonvulkan_zpushVkMemoryBarrier2KHR
int zpushVkMemoryBarrier2KHR(lua_State *L, const VkMemoryBarrier2KHR *p);

#define znewVkBufferMemoryBarrier2KHR(L, err) (VkBufferMemoryBarrier2KHR*)znew((L), VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, sizeof(VkBufferMemoryBarrier2KHR), (err))
#define znewarrayVkBufferMemoryBarrier2KHR(L, count, err) (VkBufferMemoryBarrier2KHR*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, sizeof(VkBufferMemoryBarrier2KHR), (count), (err))
#define znewchainVkBufferMemoryBarrier2KHR moonvulkan_znewchainVkBufferMemoryBarrier2KHR
VkBufferMemoryBarrier2KHR* znewchainVkBufferMemoryBarrier2KHR(lua_State *L, int *err);
#define znewchainarrayVkBufferMemoryBarrier2KHR moonvulkan_znewchainarrayVkBufferMemoryBarrier2KHR
VkBufferMemoryBarrier2KHR* znewchainarrayVkBufferMemoryBarrier2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferMemoryBarrier2KHR moonvulkan_zcheckVkBufferMemoryBarrier2KHR
VkBufferMemoryBarrier2KHR* zcheckVkBufferMemoryBarrier2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferMemoryBarrier2KHR moonvulkan_zcheckarrayVkBufferMemoryBarrier2KHR
VkBufferMemoryBarrier2KHR* zcheckarrayVkBufferMemoryBarrier2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferMemoryBarrier2KHR moonvulkan_zinitVkBufferMemoryBarrier2KHR
int zinitVkBufferMemoryBarrier2KHR(lua_State *L, VkBufferMemoryBarrier2KHR* p, int *err);
#define zfreeVkBufferMemoryBarrier2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferMemoryBarrier2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferMemoryBarrier2KHR), (count), (base))
#define zpushVkBufferMemoryBarrier2KHR moonvulkan_zpushVkBufferMemoryBarrier2KHR
int zpushVkBufferMemoryBarrier2KHR(lua_State *L, const VkBufferMemoryBarrier2KHR *p);

#define znewVkImageMemoryBarrier2KHR(L, err) (VkImageMemoryBarrier2KHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, sizeof(VkImageMemoryBarrier2KHR), (err))
#define znewarrayVkImageMemoryBarrier2KHR(L, count, err) (VkImageMemoryBarrier2KHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, sizeof(VkImageMemoryBarrier2KHR), (count), (err))
#define znewchainVkImageMemoryBarrier2KHR moonvulkan_znewchainVkImageMemoryBarrier2KHR
VkImageMemoryBarrier2KHR* znewchainVkImageMemoryBarrier2KHR(lua_State *L, int *err);
#define znewchainarrayVkImageMemoryBarrier2KHR moonvulkan_znewchainarrayVkImageMemoryBarrier2KHR
VkImageMemoryBarrier2KHR* znewchainarrayVkImageMemoryBarrier2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageMemoryBarrier2KHR moonvulkan_zcheckVkImageMemoryBarrier2KHR
VkImageMemoryBarrier2KHR* zcheckVkImageMemoryBarrier2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageMemoryBarrier2KHR moonvulkan_zcheckarrayVkImageMemoryBarrier2KHR
VkImageMemoryBarrier2KHR* zcheckarrayVkImageMemoryBarrier2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageMemoryBarrier2KHR moonvulkan_zinitVkImageMemoryBarrier2KHR
int zinitVkImageMemoryBarrier2KHR(lua_State *L, VkImageMemoryBarrier2KHR* p, int *err);
#define zfreeVkImageMemoryBarrier2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageMemoryBarrier2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageMemoryBarrier2KHR), (count), (base))
#define zpushVkImageMemoryBarrier2KHR moonvulkan_zpushVkImageMemoryBarrier2KHR
int zpushVkImageMemoryBarrier2KHR(lua_State *L, const VkImageMemoryBarrier2KHR *p);

#define znewVkDependencyInfoKHR(L, err) (VkDependencyInfoKHR*)znew((L), VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, sizeof(VkDependencyInfoKHR), (err))
#define znewarrayVkDependencyInfoKHR(L, count, err) (VkDependencyInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, sizeof(VkDependencyInfoKHR), (count), (err))
#define znewchainVkDependencyInfoKHR moonvulkan_znewchainVkDependencyInfoKHR
VkDependencyInfoKHR* znewchainVkDependencyInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkDependencyInfoKHR moonvulkan_znewchainarrayVkDependencyInfoKHR
VkDependencyInfoKHR* znewchainarrayVkDependencyInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDependencyInfoKHR moonvulkan_zcheckVkDependencyInfoKHR
VkDependencyInfoKHR* zcheckVkDependencyInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDependencyInfoKHR moonvulkan_zcheckarrayVkDependencyInfoKHR
VkDependencyInfoKHR* zcheckarrayVkDependencyInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDependencyInfoKHR moonvulkan_zinitVkDependencyInfoKHR
int zinitVkDependencyInfoKHR(lua_State *L, VkDependencyInfoKHR* p, int *err);
#define zfreeVkDependencyInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDependencyInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDependencyInfoKHR), (count), (base))
#define zpushVkDependencyInfoKHR moonvulkan_zpushVkDependencyInfoKHR
int zpushVkDependencyInfoKHR(lua_State *L, const VkDependencyInfoKHR *p);

#define znewVkSemaphoreSubmitInfoKHR(L, err) (VkSemaphoreSubmitInfoKHR*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, sizeof(VkSemaphoreSubmitInfoKHR), (err))
#define znewarrayVkSemaphoreSubmitInfoKHR(L, count, err) (VkSemaphoreSubmitInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, sizeof(VkSemaphoreSubmitInfoKHR), (count), (err))
#define znewchainVkSemaphoreSubmitInfoKHR moonvulkan_znewchainVkSemaphoreSubmitInfoKHR
VkSemaphoreSubmitInfoKHR* znewchainVkSemaphoreSubmitInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreSubmitInfoKHR moonvulkan_znewchainarrayVkSemaphoreSubmitInfoKHR
VkSemaphoreSubmitInfoKHR* znewchainarrayVkSemaphoreSubmitInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreSubmitInfoKHR moonvulkan_zcheckVkSemaphoreSubmitInfoKHR
VkSemaphoreSubmitInfoKHR* zcheckVkSemaphoreSubmitInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreSubmitInfoKHR moonvulkan_zcheckarrayVkSemaphoreSubmitInfoKHR
VkSemaphoreSubmitInfoKHR* zcheckarrayVkSemaphoreSubmitInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreSubmitInfoKHR moonvulkan_zinitVkSemaphoreSubmitInfoKHR
int zinitVkSemaphoreSubmitInfoKHR(lua_State *L, VkSemaphoreSubmitInfoKHR* p, int *err);
#define zfreeVkSemaphoreSubmitInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreSubmitInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreSubmitInfoKHR), (count), (base))
#define zpushVkSemaphoreSubmitInfoKHR moonvulkan_zpushVkSemaphoreSubmitInfoKHR
int zpushVkSemaphoreSubmitInfoKHR(lua_State *L, const VkSemaphoreSubmitInfoKHR *p);

#define znewVkCommandBufferSubmitInfoKHR(L, err) (VkCommandBufferSubmitInfoKHR*)znew((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, sizeof(VkCommandBufferSubmitInfoKHR), (err))
#define znewarrayVkCommandBufferSubmitInfoKHR(L, count, err) (VkCommandBufferSubmitInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, sizeof(VkCommandBufferSubmitInfoKHR), (count), (err))
#define znewchainVkCommandBufferSubmitInfoKHR moonvulkan_znewchainVkCommandBufferSubmitInfoKHR
VkCommandBufferSubmitInfoKHR* znewchainVkCommandBufferSubmitInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkCommandBufferSubmitInfoKHR moonvulkan_znewchainarrayVkCommandBufferSubmitInfoKHR
VkCommandBufferSubmitInfoKHR* znewchainarrayVkCommandBufferSubmitInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandBufferSubmitInfoKHR moonvulkan_zcheckVkCommandBufferSubmitInfoKHR
VkCommandBufferSubmitInfoKHR* zcheckVkCommandBufferSubmitInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandBufferSubmitInfoKHR moonvulkan_zcheckarrayVkCommandBufferSubmitInfoKHR
VkCommandBufferSubmitInfoKHR* zcheckarrayVkCommandBufferSubmitInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandBufferSubmitInfoKHR moonvulkan_zinitVkCommandBufferSubmitInfoKHR
int zinitVkCommandBufferSubmitInfoKHR(lua_State *L, VkCommandBufferSubmitInfoKHR* p, int *err);
#define zfreeVkCommandBufferSubmitInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandBufferSubmitInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandBufferSubmitInfoKHR), (count), (base))
#define zpushVkCommandBufferSubmitInfoKHR moonvulkan_zpushVkCommandBufferSubmitInfoKHR
int zpushVkCommandBufferSubmitInfoKHR(lua_State *L, const VkCommandBufferSubmitInfoKHR *p);

#define znewVkSubmitInfo2KHR(L, err) (VkSubmitInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, sizeof(VkSubmitInfo2KHR), (err))
#define znewarrayVkSubmitInfo2KHR(L, count, err) (VkSubmitInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, sizeof(VkSubmitInfo2KHR), (count), (err))
#define znewchainVkSubmitInfo2KHR moonvulkan_znewchainVkSubmitInfo2KHR
VkSubmitInfo2KHR* znewchainVkSubmitInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkSubmitInfo2KHR moonvulkan_znewchainarrayVkSubmitInfo2KHR
VkSubmitInfo2KHR* znewchainarrayVkSubmitInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSubmitInfo2KHR moonvulkan_zcheckVkSubmitInfo2KHR
VkSubmitInfo2KHR* zcheckVkSubmitInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubmitInfo2KHR moonvulkan_zcheckarrayVkSubmitInfo2KHR
VkSubmitInfo2KHR* zcheckarrayVkSubmitInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubmitInfo2KHR moonvulkan_zinitVkSubmitInfo2KHR
int zinitVkSubmitInfo2KHR(lua_State *L, VkSubmitInfo2KHR* p, int *err);
#define zfreeVkSubmitInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSubmitInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSubmitInfo2KHR), (count), (base))
#define zpushVkSubmitInfo2KHR moonvulkan_zpushVkSubmitInfo2KHR
int zpushVkSubmitInfo2KHR(lua_State *L, const VkSubmitInfo2KHR *p);

#define znewVkBufferCopy2KHR(L, err) (VkBufferCopy2KHR*)znew((L), VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR, sizeof(VkBufferCopy2KHR), (err))
#define znewarrayVkBufferCopy2KHR(L, count, err) (VkBufferCopy2KHR*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR, sizeof(VkBufferCopy2KHR), (count), (err))
#define znewchainVkBufferCopy2KHR moonvulkan_znewchainVkBufferCopy2KHR
VkBufferCopy2KHR* znewchainVkBufferCopy2KHR(lua_State *L, int *err);
#define znewchainarrayVkBufferCopy2KHR moonvulkan_znewchainarrayVkBufferCopy2KHR
VkBufferCopy2KHR* znewchainarrayVkBufferCopy2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferCopy2KHR moonvulkan_zcheckVkBufferCopy2KHR
VkBufferCopy2KHR* zcheckVkBufferCopy2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferCopy2KHR moonvulkan_zcheckarrayVkBufferCopy2KHR
VkBufferCopy2KHR* zcheckarrayVkBufferCopy2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferCopy2KHR moonvulkan_zinitVkBufferCopy2KHR
int zinitVkBufferCopy2KHR(lua_State *L, VkBufferCopy2KHR* p, int *err);
#define zfreeVkBufferCopy2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferCopy2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferCopy2KHR), (count), (base))
#define zpushVkBufferCopy2KHR moonvulkan_zpushVkBufferCopy2KHR
int zpushVkBufferCopy2KHR(lua_State *L, const VkBufferCopy2KHR *p);

#define znewVkCopyBufferInfo2KHR(L, err) (VkCopyBufferInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, sizeof(VkCopyBufferInfo2KHR), (err))
#define znewarrayVkCopyBufferInfo2KHR(L, count, err) (VkCopyBufferInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, sizeof(VkCopyBufferInfo2KHR), (count), (err))
#define znewchainVkCopyBufferInfo2KHR moonvulkan_znewchainVkCopyBufferInfo2KHR
VkCopyBufferInfo2KHR* znewchainVkCopyBufferInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkCopyBufferInfo2KHR moonvulkan_znewchainarrayVkCopyBufferInfo2KHR
VkCopyBufferInfo2KHR* znewchainarrayVkCopyBufferInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyBufferInfo2KHR moonvulkan_zcheckVkCopyBufferInfo2KHR
VkCopyBufferInfo2KHR* zcheckVkCopyBufferInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyBufferInfo2KHR moonvulkan_zcheckarrayVkCopyBufferInfo2KHR
VkCopyBufferInfo2KHR* zcheckarrayVkCopyBufferInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyBufferInfo2KHR moonvulkan_zinitVkCopyBufferInfo2KHR
int zinitVkCopyBufferInfo2KHR(lua_State *L, VkCopyBufferInfo2KHR* p, int *err);
#define zfreeVkCopyBufferInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyBufferInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyBufferInfo2KHR), (count), (base))
#define zpushVkCopyBufferInfo2KHR moonvulkan_zpushVkCopyBufferInfo2KHR
int zpushVkCopyBufferInfo2KHR(lua_State *L, const VkCopyBufferInfo2KHR *p);

#define znewVkImageCopy2KHR(L, err) (VkImageCopy2KHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR, sizeof(VkImageCopy2KHR), (err))
#define znewarrayVkImageCopy2KHR(L, count, err) (VkImageCopy2KHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR, sizeof(VkImageCopy2KHR), (count), (err))
#define znewchainVkImageCopy2KHR moonvulkan_znewchainVkImageCopy2KHR
VkImageCopy2KHR* znewchainVkImageCopy2KHR(lua_State *L, int *err);
#define znewchainarrayVkImageCopy2KHR moonvulkan_znewchainarrayVkImageCopy2KHR
VkImageCopy2KHR* znewchainarrayVkImageCopy2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageCopy2KHR moonvulkan_zcheckVkImageCopy2KHR
VkImageCopy2KHR* zcheckVkImageCopy2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageCopy2KHR moonvulkan_zcheckarrayVkImageCopy2KHR
VkImageCopy2KHR* zcheckarrayVkImageCopy2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageCopy2KHR moonvulkan_zinitVkImageCopy2KHR
int zinitVkImageCopy2KHR(lua_State *L, VkImageCopy2KHR* p, int *err);
#define zfreeVkImageCopy2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageCopy2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageCopy2KHR), (count), (base))
#define zpushVkImageCopy2KHR moonvulkan_zpushVkImageCopy2KHR
int zpushVkImageCopy2KHR(lua_State *L, const VkImageCopy2KHR *p);

#define znewVkCopyImageInfo2KHR(L, err) (VkCopyImageInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, sizeof(VkCopyImageInfo2KHR), (err))
#define znewarrayVkCopyImageInfo2KHR(L, count, err) (VkCopyImageInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, sizeof(VkCopyImageInfo2KHR), (count), (err))
#define znewchainVkCopyImageInfo2KHR moonvulkan_znewchainVkCopyImageInfo2KHR
VkCopyImageInfo2KHR* znewchainVkCopyImageInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkCopyImageInfo2KHR moonvulkan_znewchainarrayVkCopyImageInfo2KHR
VkCopyImageInfo2KHR* znewchainarrayVkCopyImageInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyImageInfo2KHR moonvulkan_zcheckVkCopyImageInfo2KHR
VkCopyImageInfo2KHR* zcheckVkCopyImageInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyImageInfo2KHR moonvulkan_zcheckarrayVkCopyImageInfo2KHR
VkCopyImageInfo2KHR* zcheckarrayVkCopyImageInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyImageInfo2KHR moonvulkan_zinitVkCopyImageInfo2KHR
int zinitVkCopyImageInfo2KHR(lua_State *L, VkCopyImageInfo2KHR* p, int *err);
#define zfreeVkCopyImageInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyImageInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyImageInfo2KHR), (count), (base))
#define zpushVkCopyImageInfo2KHR moonvulkan_zpushVkCopyImageInfo2KHR
int zpushVkCopyImageInfo2KHR(lua_State *L, const VkCopyImageInfo2KHR *p);

#define znewVkBufferImageCopy2KHR(L, err) (VkBufferImageCopy2KHR*)znew((L), VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, sizeof(VkBufferImageCopy2KHR), (err))
#define znewarrayVkBufferImageCopy2KHR(L, count, err) (VkBufferImageCopy2KHR*)znewarray((L), VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, sizeof(VkBufferImageCopy2KHR), (count), (err))
#define znewchainVkBufferImageCopy2KHR moonvulkan_znewchainVkBufferImageCopy2KHR
VkBufferImageCopy2KHR* znewchainVkBufferImageCopy2KHR(lua_State *L, int *err);
#define znewchainarrayVkBufferImageCopy2KHR moonvulkan_znewchainarrayVkBufferImageCopy2KHR
VkBufferImageCopy2KHR* znewchainarrayVkBufferImageCopy2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBufferImageCopy2KHR moonvulkan_zcheckVkBufferImageCopy2KHR
VkBufferImageCopy2KHR* zcheckVkBufferImageCopy2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferImageCopy2KHR moonvulkan_zcheckarrayVkBufferImageCopy2KHR
VkBufferImageCopy2KHR* zcheckarrayVkBufferImageCopy2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferImageCopy2KHR moonvulkan_zinitVkBufferImageCopy2KHR
int zinitVkBufferImageCopy2KHR(lua_State *L, VkBufferImageCopy2KHR* p, int *err);
#define zfreeVkBufferImageCopy2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBufferImageCopy2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBufferImageCopy2KHR), (count), (base))
#define zpushVkBufferImageCopy2KHR moonvulkan_zpushVkBufferImageCopy2KHR
int zpushVkBufferImageCopy2KHR(lua_State *L, const VkBufferImageCopy2KHR *p);

#define znewVkCopyBufferToImageInfo2KHR(L, err) (VkCopyBufferToImageInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, sizeof(VkCopyBufferToImageInfo2KHR), (err))
#define znewarrayVkCopyBufferToImageInfo2KHR(L, count, err) (VkCopyBufferToImageInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, sizeof(VkCopyBufferToImageInfo2KHR), (count), (err))
#define znewchainVkCopyBufferToImageInfo2KHR moonvulkan_znewchainVkCopyBufferToImageInfo2KHR
VkCopyBufferToImageInfo2KHR* znewchainVkCopyBufferToImageInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkCopyBufferToImageInfo2KHR moonvulkan_znewchainarrayVkCopyBufferToImageInfo2KHR
VkCopyBufferToImageInfo2KHR* znewchainarrayVkCopyBufferToImageInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyBufferToImageInfo2KHR moonvulkan_zcheckVkCopyBufferToImageInfo2KHR
VkCopyBufferToImageInfo2KHR* zcheckVkCopyBufferToImageInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyBufferToImageInfo2KHR moonvulkan_zcheckarrayVkCopyBufferToImageInfo2KHR
VkCopyBufferToImageInfo2KHR* zcheckarrayVkCopyBufferToImageInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyBufferToImageInfo2KHR moonvulkan_zinitVkCopyBufferToImageInfo2KHR
int zinitVkCopyBufferToImageInfo2KHR(lua_State *L, VkCopyBufferToImageInfo2KHR* p, int *err);
#define zfreeVkCopyBufferToImageInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyBufferToImageInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyBufferToImageInfo2KHR), (count), (base))
#define zpushVkCopyBufferToImageInfo2KHR moonvulkan_zpushVkCopyBufferToImageInfo2KHR
int zpushVkCopyBufferToImageInfo2KHR(lua_State *L, const VkCopyBufferToImageInfo2KHR *p);

#define znewVkCopyImageToBufferInfo2KHR(L, err) (VkCopyImageToBufferInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, sizeof(VkCopyImageToBufferInfo2KHR), (err))
#define znewarrayVkCopyImageToBufferInfo2KHR(L, count, err) (VkCopyImageToBufferInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, sizeof(VkCopyImageToBufferInfo2KHR), (count), (err))
#define znewchainVkCopyImageToBufferInfo2KHR moonvulkan_znewchainVkCopyImageToBufferInfo2KHR
VkCopyImageToBufferInfo2KHR* znewchainVkCopyImageToBufferInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkCopyImageToBufferInfo2KHR moonvulkan_znewchainarrayVkCopyImageToBufferInfo2KHR
VkCopyImageToBufferInfo2KHR* znewchainarrayVkCopyImageToBufferInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyImageToBufferInfo2KHR moonvulkan_zcheckVkCopyImageToBufferInfo2KHR
VkCopyImageToBufferInfo2KHR* zcheckVkCopyImageToBufferInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyImageToBufferInfo2KHR moonvulkan_zcheckarrayVkCopyImageToBufferInfo2KHR
VkCopyImageToBufferInfo2KHR* zcheckarrayVkCopyImageToBufferInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyImageToBufferInfo2KHR moonvulkan_zinitVkCopyImageToBufferInfo2KHR
int zinitVkCopyImageToBufferInfo2KHR(lua_State *L, VkCopyImageToBufferInfo2KHR* p, int *err);
#define zfreeVkCopyImageToBufferInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyImageToBufferInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyImageToBufferInfo2KHR), (count), (base))
#define zpushVkCopyImageToBufferInfo2KHR moonvulkan_zpushVkCopyImageToBufferInfo2KHR
int zpushVkCopyImageToBufferInfo2KHR(lua_State *L, const VkCopyImageToBufferInfo2KHR *p);

#define znewVkImageBlit2KHR(L, err) (VkImageBlit2KHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, sizeof(VkImageBlit2KHR), (err))
#define znewarrayVkImageBlit2KHR(L, count, err) (VkImageBlit2KHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, sizeof(VkImageBlit2KHR), (count), (err))
#define znewchainVkImageBlit2KHR moonvulkan_znewchainVkImageBlit2KHR
VkImageBlit2KHR* znewchainVkImageBlit2KHR(lua_State *L, int *err);
#define znewchainarrayVkImageBlit2KHR moonvulkan_znewchainarrayVkImageBlit2KHR
VkImageBlit2KHR* znewchainarrayVkImageBlit2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageBlit2KHR moonvulkan_zcheckVkImageBlit2KHR
VkImageBlit2KHR* zcheckVkImageBlit2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageBlit2KHR moonvulkan_zcheckarrayVkImageBlit2KHR
VkImageBlit2KHR* zcheckarrayVkImageBlit2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageBlit2KHR moonvulkan_zinitVkImageBlit2KHR
int zinitVkImageBlit2KHR(lua_State *L, VkImageBlit2KHR* p, int *err);
#define zfreeVkImageBlit2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageBlit2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageBlit2KHR), (count), (base))
#define zpushVkImageBlit2KHR moonvulkan_zpushVkImageBlit2KHR
int zpushVkImageBlit2KHR(lua_State *L, const VkImageBlit2KHR *p);

#define znewVkBlitImageInfo2KHR(L, err) (VkBlitImageInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, sizeof(VkBlitImageInfo2KHR), (err))
#define znewarrayVkBlitImageInfo2KHR(L, count, err) (VkBlitImageInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, sizeof(VkBlitImageInfo2KHR), (count), (err))
#define znewchainVkBlitImageInfo2KHR moonvulkan_znewchainVkBlitImageInfo2KHR
VkBlitImageInfo2KHR* znewchainVkBlitImageInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkBlitImageInfo2KHR moonvulkan_znewchainarrayVkBlitImageInfo2KHR
VkBlitImageInfo2KHR* znewchainarrayVkBlitImageInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkBlitImageInfo2KHR moonvulkan_zcheckVkBlitImageInfo2KHR
VkBlitImageInfo2KHR* zcheckVkBlitImageInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkBlitImageInfo2KHR moonvulkan_zcheckarrayVkBlitImageInfo2KHR
VkBlitImageInfo2KHR* zcheckarrayVkBlitImageInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBlitImageInfo2KHR moonvulkan_zinitVkBlitImageInfo2KHR
int zinitVkBlitImageInfo2KHR(lua_State *L, VkBlitImageInfo2KHR* p, int *err);
#define zfreeVkBlitImageInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkBlitImageInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkBlitImageInfo2KHR), (count), (base))
#define zpushVkBlitImageInfo2KHR moonvulkan_zpushVkBlitImageInfo2KHR
int zpushVkBlitImageInfo2KHR(lua_State *L, const VkBlitImageInfo2KHR *p);

#define znewVkImageResolve2KHR(L, err) (VkImageResolve2KHR*)znew((L), VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, sizeof(VkImageResolve2KHR), (err))
#define znewarrayVkImageResolve2KHR(L, count, err) (VkImageResolve2KHR*)znewarray((L), VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, sizeof(VkImageResolve2KHR), (count), (err))
#define znewchainVkImageResolve2KHR moonvulkan_znewchainVkImageResolve2KHR
VkImageResolve2KHR* znewchainVkImageResolve2KHR(lua_State *L, int *err);
#define znewchainarrayVkImageResolve2KHR moonvulkan_znewchainarrayVkImageResolve2KHR
VkImageResolve2KHR* znewchainarrayVkImageResolve2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImageResolve2KHR moonvulkan_zcheckVkImageResolve2KHR
VkImageResolve2KHR* zcheckVkImageResolve2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageResolve2KHR moonvulkan_zcheckarrayVkImageResolve2KHR
VkImageResolve2KHR* zcheckarrayVkImageResolve2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageResolve2KHR moonvulkan_zinitVkImageResolve2KHR
int zinitVkImageResolve2KHR(lua_State *L, VkImageResolve2KHR* p, int *err);
#define zfreeVkImageResolve2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImageResolve2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImageResolve2KHR), (count), (base))
#define zpushVkImageResolve2KHR moonvulkan_zpushVkImageResolve2KHR
int zpushVkImageResolve2KHR(lua_State *L, const VkImageResolve2KHR *p);

#define znewVkResolveImageInfo2KHR(L, err) (VkResolveImageInfo2KHR*)znew((L), VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, sizeof(VkResolveImageInfo2KHR), (err))
#define znewarrayVkResolveImageInfo2KHR(L, count, err) (VkResolveImageInfo2KHR*)znewarray((L), VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, sizeof(VkResolveImageInfo2KHR), (count), (err))
#define znewchainVkResolveImageInfo2KHR moonvulkan_znewchainVkResolveImageInfo2KHR
VkResolveImageInfo2KHR* znewchainVkResolveImageInfo2KHR(lua_State *L, int *err);
#define znewchainarrayVkResolveImageInfo2KHR moonvulkan_znewchainarrayVkResolveImageInfo2KHR
VkResolveImageInfo2KHR* znewchainarrayVkResolveImageInfo2KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkResolveImageInfo2KHR moonvulkan_zcheckVkResolveImageInfo2KHR
VkResolveImageInfo2KHR* zcheckVkResolveImageInfo2KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkResolveImageInfo2KHR moonvulkan_zcheckarrayVkResolveImageInfo2KHR
VkResolveImageInfo2KHR* zcheckarrayVkResolveImageInfo2KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkResolveImageInfo2KHR moonvulkan_zinitVkResolveImageInfo2KHR
int zinitVkResolveImageInfo2KHR(lua_State *L, VkResolveImageInfo2KHR* p, int *err);
#define zfreeVkResolveImageInfo2KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkResolveImageInfo2KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkResolveImageInfo2KHR), (count), (base))
#define zpushVkResolveImageInfo2KHR moonvulkan_zpushVkResolveImageInfo2KHR
int zpushVkResolveImageInfo2KHR(lua_State *L, const VkResolveImageInfo2KHR *p);

#define znewVkAccelerationStructureGeometryTrianglesDataKHR(L, err) (VkAccelerationStructureGeometryTrianglesDataKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR), (err))
#define znewarrayVkAccelerationStructureGeometryTrianglesDataKHR(L, count, err) (VkAccelerationStructureGeometryTrianglesDataKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR), (count), (err))
#define znewchainVkAccelerationStructureGeometryTrianglesDataKHR moonvulkan_znewchainVkAccelerationStructureGeometryTrianglesDataKHR
VkAccelerationStructureGeometryTrianglesDataKHR* znewchainVkAccelerationStructureGeometryTrianglesDataKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureGeometryTrianglesDataKHR moonvulkan_znewchainarrayVkAccelerationStructureGeometryTrianglesDataKHR
VkAccelerationStructureGeometryTrianglesDataKHR* znewchainarrayVkAccelerationStructureGeometryTrianglesDataKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureGeometryTrianglesDataKHR moonvulkan_zcheckVkAccelerationStructureGeometryTrianglesDataKHR
VkAccelerationStructureGeometryTrianglesDataKHR* zcheckVkAccelerationStructureGeometryTrianglesDataKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureGeometryTrianglesDataKHR moonvulkan_zcheckarrayVkAccelerationStructureGeometryTrianglesDataKHR
VkAccelerationStructureGeometryTrianglesDataKHR* zcheckarrayVkAccelerationStructureGeometryTrianglesDataKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureGeometryTrianglesDataKHR moonvulkan_zinitVkAccelerationStructureGeometryTrianglesDataKHR
int zinitVkAccelerationStructureGeometryTrianglesDataKHR(lua_State *L, VkAccelerationStructureGeometryTrianglesDataKHR* p, int *err);
#define zfreeVkAccelerationStructureGeometryTrianglesDataKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureGeometryTrianglesDataKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureGeometryTrianglesDataKHR), (count), (base))
#define zpushVkAccelerationStructureGeometryTrianglesDataKHR moonvulkan_zpushVkAccelerationStructureGeometryTrianglesDataKHR
int zpushVkAccelerationStructureGeometryTrianglesDataKHR(lua_State *L, const VkAccelerationStructureGeometryTrianglesDataKHR *p);

#define znewVkAccelerationStructureGeometryAabbsDataKHR(L, err) (VkAccelerationStructureGeometryAabbsDataKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, sizeof(VkAccelerationStructureGeometryAabbsDataKHR), (err))
#define znewarrayVkAccelerationStructureGeometryAabbsDataKHR(L, count, err) (VkAccelerationStructureGeometryAabbsDataKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, sizeof(VkAccelerationStructureGeometryAabbsDataKHR), (count), (err))
#define znewchainVkAccelerationStructureGeometryAabbsDataKHR moonvulkan_znewchainVkAccelerationStructureGeometryAabbsDataKHR
VkAccelerationStructureGeometryAabbsDataKHR* znewchainVkAccelerationStructureGeometryAabbsDataKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureGeometryAabbsDataKHR moonvulkan_znewchainarrayVkAccelerationStructureGeometryAabbsDataKHR
VkAccelerationStructureGeometryAabbsDataKHR* znewchainarrayVkAccelerationStructureGeometryAabbsDataKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureGeometryAabbsDataKHR moonvulkan_zcheckVkAccelerationStructureGeometryAabbsDataKHR
VkAccelerationStructureGeometryAabbsDataKHR* zcheckVkAccelerationStructureGeometryAabbsDataKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureGeometryAabbsDataKHR moonvulkan_zcheckarrayVkAccelerationStructureGeometryAabbsDataKHR
VkAccelerationStructureGeometryAabbsDataKHR* zcheckarrayVkAccelerationStructureGeometryAabbsDataKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureGeometryAabbsDataKHR moonvulkan_zinitVkAccelerationStructureGeometryAabbsDataKHR
int zinitVkAccelerationStructureGeometryAabbsDataKHR(lua_State *L, VkAccelerationStructureGeometryAabbsDataKHR* p, int *err);
#define zfreeVkAccelerationStructureGeometryAabbsDataKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureGeometryAabbsDataKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureGeometryAabbsDataKHR), (count), (base))
#define zpushVkAccelerationStructureGeometryAabbsDataKHR moonvulkan_zpushVkAccelerationStructureGeometryAabbsDataKHR
int zpushVkAccelerationStructureGeometryAabbsDataKHR(lua_State *L, const VkAccelerationStructureGeometryAabbsDataKHR *p);

#define znewVkAccelerationStructureGeometryInstancesDataKHR(L, err) (VkAccelerationStructureGeometryInstancesDataKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, sizeof(VkAccelerationStructureGeometryInstancesDataKHR), (err))
#define znewarrayVkAccelerationStructureGeometryInstancesDataKHR(L, count, err) (VkAccelerationStructureGeometryInstancesDataKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, sizeof(VkAccelerationStructureGeometryInstancesDataKHR), (count), (err))
#define znewchainVkAccelerationStructureGeometryInstancesDataKHR moonvulkan_znewchainVkAccelerationStructureGeometryInstancesDataKHR
VkAccelerationStructureGeometryInstancesDataKHR* znewchainVkAccelerationStructureGeometryInstancesDataKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureGeometryInstancesDataKHR moonvulkan_znewchainarrayVkAccelerationStructureGeometryInstancesDataKHR
VkAccelerationStructureGeometryInstancesDataKHR* znewchainarrayVkAccelerationStructureGeometryInstancesDataKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureGeometryInstancesDataKHR moonvulkan_zcheckVkAccelerationStructureGeometryInstancesDataKHR
VkAccelerationStructureGeometryInstancesDataKHR* zcheckVkAccelerationStructureGeometryInstancesDataKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureGeometryInstancesDataKHR moonvulkan_zcheckarrayVkAccelerationStructureGeometryInstancesDataKHR
VkAccelerationStructureGeometryInstancesDataKHR* zcheckarrayVkAccelerationStructureGeometryInstancesDataKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureGeometryInstancesDataKHR moonvulkan_zinitVkAccelerationStructureGeometryInstancesDataKHR
int zinitVkAccelerationStructureGeometryInstancesDataKHR(lua_State *L, VkAccelerationStructureGeometryInstancesDataKHR* p, int *err);
#define zfreeVkAccelerationStructureGeometryInstancesDataKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureGeometryInstancesDataKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureGeometryInstancesDataKHR), (count), (base))
#define zpushVkAccelerationStructureGeometryInstancesDataKHR moonvulkan_zpushVkAccelerationStructureGeometryInstancesDataKHR
int zpushVkAccelerationStructureGeometryInstancesDataKHR(lua_State *L, const VkAccelerationStructureGeometryInstancesDataKHR *p);

#define znewVkAccelerationStructureGeometryKHR(L, err) (VkAccelerationStructureGeometryKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, sizeof(VkAccelerationStructureGeometryKHR), (err))
#define znewarrayVkAccelerationStructureGeometryKHR(L, count, err) (VkAccelerationStructureGeometryKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, sizeof(VkAccelerationStructureGeometryKHR), (count), (err))
#define znewchainVkAccelerationStructureGeometryKHR moonvulkan_znewchainVkAccelerationStructureGeometryKHR
VkAccelerationStructureGeometryKHR* znewchainVkAccelerationStructureGeometryKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureGeometryKHR moonvulkan_znewchainarrayVkAccelerationStructureGeometryKHR
VkAccelerationStructureGeometryKHR* znewchainarrayVkAccelerationStructureGeometryKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureGeometryKHR moonvulkan_zcheckVkAccelerationStructureGeometryKHR
VkAccelerationStructureGeometryKHR* zcheckVkAccelerationStructureGeometryKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureGeometryKHR moonvulkan_zcheckarrayVkAccelerationStructureGeometryKHR
VkAccelerationStructureGeometryKHR* zcheckarrayVkAccelerationStructureGeometryKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureGeometryKHR moonvulkan_zinitVkAccelerationStructureGeometryKHR
int zinitVkAccelerationStructureGeometryKHR(lua_State *L, VkAccelerationStructureGeometryKHR* p, int *err);
#define zfreeVkAccelerationStructureGeometryKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureGeometryKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureGeometryKHR), (count), (base))
#define zpushVkAccelerationStructureGeometryKHR moonvulkan_zpushVkAccelerationStructureGeometryKHR
int zpushVkAccelerationStructureGeometryKHR(lua_State *L, const VkAccelerationStructureGeometryKHR *p);

#define znewVkAccelerationStructureBuildGeometryInfoKHR(L, err) (VkAccelerationStructureBuildGeometryInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, sizeof(VkAccelerationStructureBuildGeometryInfoKHR), (err))
#define znewarrayVkAccelerationStructureBuildGeometryInfoKHR(L, count, err) (VkAccelerationStructureBuildGeometryInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, sizeof(VkAccelerationStructureBuildGeometryInfoKHR), (count), (err))
#define znewchainVkAccelerationStructureBuildGeometryInfoKHR moonvulkan_znewchainVkAccelerationStructureBuildGeometryInfoKHR
VkAccelerationStructureBuildGeometryInfoKHR* znewchainVkAccelerationStructureBuildGeometryInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureBuildGeometryInfoKHR moonvulkan_znewchainarrayVkAccelerationStructureBuildGeometryInfoKHR
VkAccelerationStructureBuildGeometryInfoKHR* znewchainarrayVkAccelerationStructureBuildGeometryInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureBuildGeometryInfoKHR moonvulkan_zcheckVkAccelerationStructureBuildGeometryInfoKHR
VkAccelerationStructureBuildGeometryInfoKHR* zcheckVkAccelerationStructureBuildGeometryInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureBuildGeometryInfoKHR moonvulkan_zcheckarrayVkAccelerationStructureBuildGeometryInfoKHR
VkAccelerationStructureBuildGeometryInfoKHR* zcheckarrayVkAccelerationStructureBuildGeometryInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureBuildGeometryInfoKHR moonvulkan_zinitVkAccelerationStructureBuildGeometryInfoKHR
int zinitVkAccelerationStructureBuildGeometryInfoKHR(lua_State *L, VkAccelerationStructureBuildGeometryInfoKHR* p, int *err);
#define zfreeVkAccelerationStructureBuildGeometryInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureBuildGeometryInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureBuildGeometryInfoKHR), (count), (base))
#define zpushVkAccelerationStructureBuildGeometryInfoKHR moonvulkan_zpushVkAccelerationStructureBuildGeometryInfoKHR
int zpushVkAccelerationStructureBuildGeometryInfoKHR(lua_State *L, const VkAccelerationStructureBuildGeometryInfoKHR *p);

#define znewVkAccelerationStructureCreateInfoKHR(L, err) (VkAccelerationStructureCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, sizeof(VkAccelerationStructureCreateInfoKHR), (err))
#define znewarrayVkAccelerationStructureCreateInfoKHR(L, count, err) (VkAccelerationStructureCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, sizeof(VkAccelerationStructureCreateInfoKHR), (count), (err))
#define znewchainVkAccelerationStructureCreateInfoKHR moonvulkan_znewchainVkAccelerationStructureCreateInfoKHR
VkAccelerationStructureCreateInfoKHR* znewchainVkAccelerationStructureCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureCreateInfoKHR moonvulkan_znewchainarrayVkAccelerationStructureCreateInfoKHR
VkAccelerationStructureCreateInfoKHR* znewchainarrayVkAccelerationStructureCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureCreateInfoKHR moonvulkan_zcheckVkAccelerationStructureCreateInfoKHR
VkAccelerationStructureCreateInfoKHR* zcheckVkAccelerationStructureCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureCreateInfoKHR moonvulkan_zcheckarrayVkAccelerationStructureCreateInfoKHR
VkAccelerationStructureCreateInfoKHR* zcheckarrayVkAccelerationStructureCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureCreateInfoKHR moonvulkan_zinitVkAccelerationStructureCreateInfoKHR
int zinitVkAccelerationStructureCreateInfoKHR(lua_State *L, VkAccelerationStructureCreateInfoKHR* p, int *err);
#define zfreeVkAccelerationStructureCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureCreateInfoKHR), (count), (base))
#define zpushVkAccelerationStructureCreateInfoKHR moonvulkan_zpushVkAccelerationStructureCreateInfoKHR
int zpushVkAccelerationStructureCreateInfoKHR(lua_State *L, const VkAccelerationStructureCreateInfoKHR *p);

#define znewVkWriteDescriptorSetAccelerationStructureKHR(L, err) (VkWriteDescriptorSetAccelerationStructureKHR*)znew((L), VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, sizeof(VkWriteDescriptorSetAccelerationStructureKHR), (err))
#define znewarrayVkWriteDescriptorSetAccelerationStructureKHR(L, count, err) (VkWriteDescriptorSetAccelerationStructureKHR*)znewarray((L), VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, sizeof(VkWriteDescriptorSetAccelerationStructureKHR), (count), (err))
#define znewchainVkWriteDescriptorSetAccelerationStructureKHR moonvulkan_znewchainVkWriteDescriptorSetAccelerationStructureKHR
VkWriteDescriptorSetAccelerationStructureKHR* znewchainVkWriteDescriptorSetAccelerationStructureKHR(lua_State *L, int *err);
#define znewchainarrayVkWriteDescriptorSetAccelerationStructureKHR moonvulkan_znewchainarrayVkWriteDescriptorSetAccelerationStructureKHR
VkWriteDescriptorSetAccelerationStructureKHR* znewchainarrayVkWriteDescriptorSetAccelerationStructureKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkWriteDescriptorSetAccelerationStructureKHR moonvulkan_zcheckVkWriteDescriptorSetAccelerationStructureKHR
VkWriteDescriptorSetAccelerationStructureKHR* zcheckVkWriteDescriptorSetAccelerationStructureKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkWriteDescriptorSetAccelerationStructureKHR moonvulkan_zcheckarrayVkWriteDescriptorSetAccelerationStructureKHR
VkWriteDescriptorSetAccelerationStructureKHR* zcheckarrayVkWriteDescriptorSetAccelerationStructureKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkWriteDescriptorSetAccelerationStructureKHR moonvulkan_zinitVkWriteDescriptorSetAccelerationStructureKHR
int zinitVkWriteDescriptorSetAccelerationStructureKHR(lua_State *L, VkWriteDescriptorSetAccelerationStructureKHR* p, int *err);
#define zfreeVkWriteDescriptorSetAccelerationStructureKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkWriteDescriptorSetAccelerationStructureKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkWriteDescriptorSetAccelerationStructureKHR), (count), (base))
#define zpushVkWriteDescriptorSetAccelerationStructureKHR moonvulkan_zpushVkWriteDescriptorSetAccelerationStructureKHR
int zpushVkWriteDescriptorSetAccelerationStructureKHR(lua_State *L, const VkWriteDescriptorSetAccelerationStructureKHR *p);

#define znewVkAccelerationStructureDeviceAddressInfoKHR(L, err) (VkAccelerationStructureDeviceAddressInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, sizeof(VkAccelerationStructureDeviceAddressInfoKHR), (err))
#define znewarrayVkAccelerationStructureDeviceAddressInfoKHR(L, count, err) (VkAccelerationStructureDeviceAddressInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, sizeof(VkAccelerationStructureDeviceAddressInfoKHR), (count), (err))
#define znewchainVkAccelerationStructureDeviceAddressInfoKHR moonvulkan_znewchainVkAccelerationStructureDeviceAddressInfoKHR
VkAccelerationStructureDeviceAddressInfoKHR* znewchainVkAccelerationStructureDeviceAddressInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureDeviceAddressInfoKHR moonvulkan_znewchainarrayVkAccelerationStructureDeviceAddressInfoKHR
VkAccelerationStructureDeviceAddressInfoKHR* znewchainarrayVkAccelerationStructureDeviceAddressInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureDeviceAddressInfoKHR moonvulkan_zcheckVkAccelerationStructureDeviceAddressInfoKHR
VkAccelerationStructureDeviceAddressInfoKHR* zcheckVkAccelerationStructureDeviceAddressInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureDeviceAddressInfoKHR moonvulkan_zcheckarrayVkAccelerationStructureDeviceAddressInfoKHR
VkAccelerationStructureDeviceAddressInfoKHR* zcheckarrayVkAccelerationStructureDeviceAddressInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureDeviceAddressInfoKHR moonvulkan_zinitVkAccelerationStructureDeviceAddressInfoKHR
int zinitVkAccelerationStructureDeviceAddressInfoKHR(lua_State *L, VkAccelerationStructureDeviceAddressInfoKHR* p, int *err);
#define zfreeVkAccelerationStructureDeviceAddressInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureDeviceAddressInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureDeviceAddressInfoKHR), (count), (base))
#define zpushVkAccelerationStructureDeviceAddressInfoKHR moonvulkan_zpushVkAccelerationStructureDeviceAddressInfoKHR
int zpushVkAccelerationStructureDeviceAddressInfoKHR(lua_State *L, const VkAccelerationStructureDeviceAddressInfoKHR *p);

#define znewVkAccelerationStructureVersionInfoKHR(L, err) (VkAccelerationStructureVersionInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, sizeof(VkAccelerationStructureVersionInfoKHR), (err))
#define znewarrayVkAccelerationStructureVersionInfoKHR(L, count, err) (VkAccelerationStructureVersionInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, sizeof(VkAccelerationStructureVersionInfoKHR), (count), (err))
#define znewchainVkAccelerationStructureVersionInfoKHR moonvulkan_znewchainVkAccelerationStructureVersionInfoKHR
VkAccelerationStructureVersionInfoKHR* znewchainVkAccelerationStructureVersionInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureVersionInfoKHR moonvulkan_znewchainarrayVkAccelerationStructureVersionInfoKHR
VkAccelerationStructureVersionInfoKHR* znewchainarrayVkAccelerationStructureVersionInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureVersionInfoKHR moonvulkan_zcheckVkAccelerationStructureVersionInfoKHR
VkAccelerationStructureVersionInfoKHR* zcheckVkAccelerationStructureVersionInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureVersionInfoKHR moonvulkan_zcheckarrayVkAccelerationStructureVersionInfoKHR
VkAccelerationStructureVersionInfoKHR* zcheckarrayVkAccelerationStructureVersionInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureVersionInfoKHR moonvulkan_zinitVkAccelerationStructureVersionInfoKHR
int zinitVkAccelerationStructureVersionInfoKHR(lua_State *L, VkAccelerationStructureVersionInfoKHR* p, int *err);
#define zfreeVkAccelerationStructureVersionInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureVersionInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureVersionInfoKHR), (count), (base))
#define zpushVkAccelerationStructureVersionInfoKHR moonvulkan_zpushVkAccelerationStructureVersionInfoKHR
int zpushVkAccelerationStructureVersionInfoKHR(lua_State *L, const VkAccelerationStructureVersionInfoKHR *p);

#define znewVkCopyAccelerationStructureToMemoryInfoKHR(L, err) (VkCopyAccelerationStructureToMemoryInfoKHR*)znew((L), VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR), (err))
#define znewarrayVkCopyAccelerationStructureToMemoryInfoKHR(L, count, err) (VkCopyAccelerationStructureToMemoryInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR), (count), (err))
#define znewchainVkCopyAccelerationStructureToMemoryInfoKHR moonvulkan_znewchainVkCopyAccelerationStructureToMemoryInfoKHR
VkCopyAccelerationStructureToMemoryInfoKHR* znewchainVkCopyAccelerationStructureToMemoryInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkCopyAccelerationStructureToMemoryInfoKHR moonvulkan_znewchainarrayVkCopyAccelerationStructureToMemoryInfoKHR
VkCopyAccelerationStructureToMemoryInfoKHR* znewchainarrayVkCopyAccelerationStructureToMemoryInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyAccelerationStructureToMemoryInfoKHR moonvulkan_zcheckVkCopyAccelerationStructureToMemoryInfoKHR
VkCopyAccelerationStructureToMemoryInfoKHR* zcheckVkCopyAccelerationStructureToMemoryInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyAccelerationStructureToMemoryInfoKHR moonvulkan_zcheckarrayVkCopyAccelerationStructureToMemoryInfoKHR
VkCopyAccelerationStructureToMemoryInfoKHR* zcheckarrayVkCopyAccelerationStructureToMemoryInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyAccelerationStructureToMemoryInfoKHR moonvulkan_zinitVkCopyAccelerationStructureToMemoryInfoKHR
int zinitVkCopyAccelerationStructureToMemoryInfoKHR(lua_State *L, VkCopyAccelerationStructureToMemoryInfoKHR* p, int *err);
#define zfreeVkCopyAccelerationStructureToMemoryInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyAccelerationStructureToMemoryInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyAccelerationStructureToMemoryInfoKHR), (count), (base))
#define zpushVkCopyAccelerationStructureToMemoryInfoKHR moonvulkan_zpushVkCopyAccelerationStructureToMemoryInfoKHR
int zpushVkCopyAccelerationStructureToMemoryInfoKHR(lua_State *L, const VkCopyAccelerationStructureToMemoryInfoKHR *p);

#define znewVkCopyMemoryToAccelerationStructureInfoKHR(L, err) (VkCopyMemoryToAccelerationStructureInfoKHR*)znew((L), VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR), (err))
#define znewarrayVkCopyMemoryToAccelerationStructureInfoKHR(L, count, err) (VkCopyMemoryToAccelerationStructureInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR), (count), (err))
#define znewchainVkCopyMemoryToAccelerationStructureInfoKHR moonvulkan_znewchainVkCopyMemoryToAccelerationStructureInfoKHR
VkCopyMemoryToAccelerationStructureInfoKHR* znewchainVkCopyMemoryToAccelerationStructureInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkCopyMemoryToAccelerationStructureInfoKHR moonvulkan_znewchainarrayVkCopyMemoryToAccelerationStructureInfoKHR
VkCopyMemoryToAccelerationStructureInfoKHR* znewchainarrayVkCopyMemoryToAccelerationStructureInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyMemoryToAccelerationStructureInfoKHR moonvulkan_zcheckVkCopyMemoryToAccelerationStructureInfoKHR
VkCopyMemoryToAccelerationStructureInfoKHR* zcheckVkCopyMemoryToAccelerationStructureInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyMemoryToAccelerationStructureInfoKHR moonvulkan_zcheckarrayVkCopyMemoryToAccelerationStructureInfoKHR
VkCopyMemoryToAccelerationStructureInfoKHR* zcheckarrayVkCopyMemoryToAccelerationStructureInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyMemoryToAccelerationStructureInfoKHR moonvulkan_zinitVkCopyMemoryToAccelerationStructureInfoKHR
int zinitVkCopyMemoryToAccelerationStructureInfoKHR(lua_State *L, VkCopyMemoryToAccelerationStructureInfoKHR* p, int *err);
#define zfreeVkCopyMemoryToAccelerationStructureInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyMemoryToAccelerationStructureInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyMemoryToAccelerationStructureInfoKHR), (count), (base))
#define zpushVkCopyMemoryToAccelerationStructureInfoKHR moonvulkan_zpushVkCopyMemoryToAccelerationStructureInfoKHR
int zpushVkCopyMemoryToAccelerationStructureInfoKHR(lua_State *L, const VkCopyMemoryToAccelerationStructureInfoKHR *p);

#define znewVkCopyAccelerationStructureInfoKHR(L, err) (VkCopyAccelerationStructureInfoKHR*)znew((L), VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyAccelerationStructureInfoKHR), (err))
#define znewarrayVkCopyAccelerationStructureInfoKHR(L, count, err) (VkCopyAccelerationStructureInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyAccelerationStructureInfoKHR), (count), (err))
#define znewchainVkCopyAccelerationStructureInfoKHR moonvulkan_znewchainVkCopyAccelerationStructureInfoKHR
VkCopyAccelerationStructureInfoKHR* znewchainVkCopyAccelerationStructureInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkCopyAccelerationStructureInfoKHR moonvulkan_znewchainarrayVkCopyAccelerationStructureInfoKHR
VkCopyAccelerationStructureInfoKHR* znewchainarrayVkCopyAccelerationStructureInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCopyAccelerationStructureInfoKHR moonvulkan_zcheckVkCopyAccelerationStructureInfoKHR
VkCopyAccelerationStructureInfoKHR* zcheckVkCopyAccelerationStructureInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCopyAccelerationStructureInfoKHR moonvulkan_zcheckarrayVkCopyAccelerationStructureInfoKHR
VkCopyAccelerationStructureInfoKHR* zcheckarrayVkCopyAccelerationStructureInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCopyAccelerationStructureInfoKHR moonvulkan_zinitVkCopyAccelerationStructureInfoKHR
int zinitVkCopyAccelerationStructureInfoKHR(lua_State *L, VkCopyAccelerationStructureInfoKHR* p, int *err);
#define zfreeVkCopyAccelerationStructureInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCopyAccelerationStructureInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCopyAccelerationStructureInfoKHR), (count), (base))
#define zpushVkCopyAccelerationStructureInfoKHR moonvulkan_zpushVkCopyAccelerationStructureInfoKHR
int zpushVkCopyAccelerationStructureInfoKHR(lua_State *L, const VkCopyAccelerationStructureInfoKHR *p);

#define znewVkAccelerationStructureBuildSizesInfoKHR(L, err) (VkAccelerationStructureBuildSizesInfoKHR*)znew((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, sizeof(VkAccelerationStructureBuildSizesInfoKHR), (err))
#define znewarrayVkAccelerationStructureBuildSizesInfoKHR(L, count, err) (VkAccelerationStructureBuildSizesInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, sizeof(VkAccelerationStructureBuildSizesInfoKHR), (count), (err))
#define znewchainVkAccelerationStructureBuildSizesInfoKHR moonvulkan_znewchainVkAccelerationStructureBuildSizesInfoKHR
VkAccelerationStructureBuildSizesInfoKHR* znewchainVkAccelerationStructureBuildSizesInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkAccelerationStructureBuildSizesInfoKHR moonvulkan_znewchainarrayVkAccelerationStructureBuildSizesInfoKHR
VkAccelerationStructureBuildSizesInfoKHR* znewchainarrayVkAccelerationStructureBuildSizesInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkAccelerationStructureBuildSizesInfoKHR moonvulkan_zcheckVkAccelerationStructureBuildSizesInfoKHR
VkAccelerationStructureBuildSizesInfoKHR* zcheckVkAccelerationStructureBuildSizesInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureBuildSizesInfoKHR moonvulkan_zcheckarrayVkAccelerationStructureBuildSizesInfoKHR
VkAccelerationStructureBuildSizesInfoKHR* zcheckarrayVkAccelerationStructureBuildSizesInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureBuildSizesInfoKHR moonvulkan_zinitVkAccelerationStructureBuildSizesInfoKHR
int zinitVkAccelerationStructureBuildSizesInfoKHR(lua_State *L, VkAccelerationStructureBuildSizesInfoKHR* p, int *err);
#define zfreeVkAccelerationStructureBuildSizesInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkAccelerationStructureBuildSizesInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkAccelerationStructureBuildSizesInfoKHR), (count), (base))
#define zpushVkAccelerationStructureBuildSizesInfoKHR moonvulkan_zpushVkAccelerationStructureBuildSizesInfoKHR
int zpushVkAccelerationStructureBuildSizesInfoKHR(lua_State *L, const VkAccelerationStructureBuildSizesInfoKHR *p);

#define znewVkRayTracingShaderGroupCreateInfoKHR(L, err) (VkRayTracingShaderGroupCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, sizeof(VkRayTracingShaderGroupCreateInfoKHR), (err))
#define znewarrayVkRayTracingShaderGroupCreateInfoKHR(L, count, err) (VkRayTracingShaderGroupCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, sizeof(VkRayTracingShaderGroupCreateInfoKHR), (count), (err))
#define znewchainVkRayTracingShaderGroupCreateInfoKHR moonvulkan_znewchainVkRayTracingShaderGroupCreateInfoKHR
VkRayTracingShaderGroupCreateInfoKHR* znewchainVkRayTracingShaderGroupCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRayTracingShaderGroupCreateInfoKHR moonvulkan_znewchainarrayVkRayTracingShaderGroupCreateInfoKHR
VkRayTracingShaderGroupCreateInfoKHR* znewchainarrayVkRayTracingShaderGroupCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRayTracingShaderGroupCreateInfoKHR moonvulkan_zcheckVkRayTracingShaderGroupCreateInfoKHR
VkRayTracingShaderGroupCreateInfoKHR* zcheckVkRayTracingShaderGroupCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRayTracingShaderGroupCreateInfoKHR moonvulkan_zcheckarrayVkRayTracingShaderGroupCreateInfoKHR
VkRayTracingShaderGroupCreateInfoKHR* zcheckarrayVkRayTracingShaderGroupCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRayTracingShaderGroupCreateInfoKHR moonvulkan_zinitVkRayTracingShaderGroupCreateInfoKHR
int zinitVkRayTracingShaderGroupCreateInfoKHR(lua_State *L, VkRayTracingShaderGroupCreateInfoKHR* p, int *err);
#define zfreeVkRayTracingShaderGroupCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRayTracingShaderGroupCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRayTracingShaderGroupCreateInfoKHR), (count), (base))
#define zpushVkRayTracingShaderGroupCreateInfoKHR moonvulkan_zpushVkRayTracingShaderGroupCreateInfoKHR
int zpushVkRayTracingShaderGroupCreateInfoKHR(lua_State *L, const VkRayTracingShaderGroupCreateInfoKHR *p);

#define znewVkRayTracingPipelineInterfaceCreateInfoKHR(L, err) (VkRayTracingPipelineInterfaceCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR), (err))
#define znewarrayVkRayTracingPipelineInterfaceCreateInfoKHR(L, count, err) (VkRayTracingPipelineInterfaceCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR), (count), (err))
#define znewchainVkRayTracingPipelineInterfaceCreateInfoKHR moonvulkan_znewchainVkRayTracingPipelineInterfaceCreateInfoKHR
VkRayTracingPipelineInterfaceCreateInfoKHR* znewchainVkRayTracingPipelineInterfaceCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRayTracingPipelineInterfaceCreateInfoKHR moonvulkan_znewchainarrayVkRayTracingPipelineInterfaceCreateInfoKHR
VkRayTracingPipelineInterfaceCreateInfoKHR* znewchainarrayVkRayTracingPipelineInterfaceCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRayTracingPipelineInterfaceCreateInfoKHR moonvulkan_zcheckVkRayTracingPipelineInterfaceCreateInfoKHR
VkRayTracingPipelineInterfaceCreateInfoKHR* zcheckVkRayTracingPipelineInterfaceCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRayTracingPipelineInterfaceCreateInfoKHR moonvulkan_zcheckarrayVkRayTracingPipelineInterfaceCreateInfoKHR
VkRayTracingPipelineInterfaceCreateInfoKHR* zcheckarrayVkRayTracingPipelineInterfaceCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRayTracingPipelineInterfaceCreateInfoKHR moonvulkan_zinitVkRayTracingPipelineInterfaceCreateInfoKHR
int zinitVkRayTracingPipelineInterfaceCreateInfoKHR(lua_State *L, VkRayTracingPipelineInterfaceCreateInfoKHR* p, int *err);
#define zfreeVkRayTracingPipelineInterfaceCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRayTracingPipelineInterfaceCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR), (count), (base))
#define zpushVkRayTracingPipelineInterfaceCreateInfoKHR moonvulkan_zpushVkRayTracingPipelineInterfaceCreateInfoKHR
int zpushVkRayTracingPipelineInterfaceCreateInfoKHR(lua_State *L, const VkRayTracingPipelineInterfaceCreateInfoKHR *p);

#define znewVkRayTracingPipelineCreateInfoKHR(L, err) (VkRayTracingPipelineCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineCreateInfoKHR), (err))
#define znewarrayVkRayTracingPipelineCreateInfoKHR(L, count, err) (VkRayTracingPipelineCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineCreateInfoKHR), (count), (err))
#define znewchainVkRayTracingPipelineCreateInfoKHR moonvulkan_znewchainVkRayTracingPipelineCreateInfoKHR
VkRayTracingPipelineCreateInfoKHR* znewchainVkRayTracingPipelineCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRayTracingPipelineCreateInfoKHR moonvulkan_znewchainarrayVkRayTracingPipelineCreateInfoKHR
VkRayTracingPipelineCreateInfoKHR* znewchainarrayVkRayTracingPipelineCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRayTracingPipelineCreateInfoKHR moonvulkan_zcheckVkRayTracingPipelineCreateInfoKHR
VkRayTracingPipelineCreateInfoKHR* zcheckVkRayTracingPipelineCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRayTracingPipelineCreateInfoKHR moonvulkan_zcheckarrayVkRayTracingPipelineCreateInfoKHR
VkRayTracingPipelineCreateInfoKHR* zcheckarrayVkRayTracingPipelineCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRayTracingPipelineCreateInfoKHR moonvulkan_zinitVkRayTracingPipelineCreateInfoKHR
int zinitVkRayTracingPipelineCreateInfoKHR(lua_State *L, VkRayTracingPipelineCreateInfoKHR* p, int *err);
#define zfreeVkRayTracingPipelineCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRayTracingPipelineCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRayTracingPipelineCreateInfoKHR), (count), (base))
#define zpushVkRayTracingPipelineCreateInfoKHR moonvulkan_zpushVkRayTracingPipelineCreateInfoKHR
int zpushVkRayTracingPipelineCreateInfoKHR(lua_State *L, const VkRayTracingPipelineCreateInfoKHR *p);

#define znewVkTraceRaysIndirectCommandKHR(L, err) (VkTraceRaysIndirectCommandKHR*)znew((L), VK_STRUCTURE_TYPE_TRACE_RAYS_INDIRECT_COMMAND_KHR, sizeof(VkTraceRaysIndirectCommandKHR), (err))
#define znewarrayVkTraceRaysIndirectCommandKHR(L, count, err) (VkTraceRaysIndirectCommandKHR*)znewarray((L), VK_STRUCTURE_TYPE_TRACE_RAYS_INDIRECT_COMMAND_KHR, sizeof(VkTraceRaysIndirectCommandKHR), (count), (err))
#define znewchainVkTraceRaysIndirectCommandKHR moonvulkan_znewchainVkTraceRaysIndirectCommandKHR
VkTraceRaysIndirectCommandKHR* znewchainVkTraceRaysIndirectCommandKHR(lua_State *L, int *err);
#define znewchainarrayVkTraceRaysIndirectCommandKHR moonvulkan_znewchainarrayVkTraceRaysIndirectCommandKHR
VkTraceRaysIndirectCommandKHR* znewchainarrayVkTraceRaysIndirectCommandKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkTraceRaysIndirectCommandKHR moonvulkan_zcheckVkTraceRaysIndirectCommandKHR
VkTraceRaysIndirectCommandKHR* zcheckVkTraceRaysIndirectCommandKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkTraceRaysIndirectCommandKHR moonvulkan_zcheckarrayVkTraceRaysIndirectCommandKHR
VkTraceRaysIndirectCommandKHR* zcheckarrayVkTraceRaysIndirectCommandKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkTraceRaysIndirectCommandKHR moonvulkan_zinitVkTraceRaysIndirectCommandKHR
int zinitVkTraceRaysIndirectCommandKHR(lua_State *L, VkTraceRaysIndirectCommandKHR* p, int *err);
#define zfreeVkTraceRaysIndirectCommandKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkTraceRaysIndirectCommandKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkTraceRaysIndirectCommandKHR), (count), (base))
#define zpushVkTraceRaysIndirectCommandKHR moonvulkan_zpushVkTraceRaysIndirectCommandKHR
int zpushVkTraceRaysIndirectCommandKHR(lua_State *L, const VkTraceRaysIndirectCommandKHR *p);

#define znewVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(L, err) (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT), (err))
#define znewarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(L, count, err) (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT), (count), (err))
#define znewchainVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT moonvulkan_znewchainVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* znewchainVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT moonvulkan_znewchainarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* znewchainarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT moonvulkan_zcheckVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* zcheckVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT moonvulkan_zcheckarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* zcheckarrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT moonvulkan_zinitVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
int zinitVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(lua_State *L, VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* p, int *err);
#define zfreeVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT), (count), (base))
#define zpushVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT moonvulkan_zpushVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
int zpushVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(lua_State *L, const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT *p);

#define znewVkPhysicalDeviceToolPropertiesEXT(L, err) (VkPhysicalDeviceToolPropertiesEXT*)znew((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT, sizeof(VkPhysicalDeviceToolPropertiesEXT), (err))
#define znewarrayVkPhysicalDeviceToolPropertiesEXT(L, count, err) (VkPhysicalDeviceToolPropertiesEXT*)znewarray((L), VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT, sizeof(VkPhysicalDeviceToolPropertiesEXT), (count), (err))
#define znewchainVkPhysicalDeviceToolPropertiesEXT moonvulkan_znewchainVkPhysicalDeviceToolPropertiesEXT
VkPhysicalDeviceToolPropertiesEXT* znewchainVkPhysicalDeviceToolPropertiesEXT(lua_State *L, int *err);
#define znewchainarrayVkPhysicalDeviceToolPropertiesEXT moonvulkan_znewchainarrayVkPhysicalDeviceToolPropertiesEXT
VkPhysicalDeviceToolPropertiesEXT* znewchainarrayVkPhysicalDeviceToolPropertiesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPhysicalDeviceToolPropertiesEXT moonvulkan_zcheckVkPhysicalDeviceToolPropertiesEXT
VkPhysicalDeviceToolPropertiesEXT* zcheckVkPhysicalDeviceToolPropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceToolPropertiesEXT moonvulkan_zcheckarrayVkPhysicalDeviceToolPropertiesEXT
VkPhysicalDeviceToolPropertiesEXT* zcheckarrayVkPhysicalDeviceToolPropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceToolPropertiesEXT moonvulkan_zinitVkPhysicalDeviceToolPropertiesEXT
int zinitVkPhysicalDeviceToolPropertiesEXT(lua_State *L, VkPhysicalDeviceToolPropertiesEXT* p, int *err);
#define zfreeVkPhysicalDeviceToolPropertiesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPhysicalDeviceToolPropertiesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPhysicalDeviceToolPropertiesEXT), (count), (base))
#define zpushVkPhysicalDeviceToolPropertiesEXT moonvulkan_zpushVkPhysicalDeviceToolPropertiesEXT
int zpushVkPhysicalDeviceToolPropertiesEXT(lua_State *L, const VkPhysicalDeviceToolPropertiesEXT *p);

#define znewVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(L, err) (VkPipelineRasterizationProvokingVertexStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT), (err))
#define znewarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(L, count, err) (VkPipelineRasterizationProvokingVertexStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineRasterizationProvokingVertexStateCreateInfoEXT moonvulkan_znewchainVkPipelineRasterizationProvokingVertexStateCreateInfoEXT
VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* znewchainVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT
VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* znewchainarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRasterizationProvokingVertexStateCreateInfoEXT moonvulkan_zcheckVkPipelineRasterizationProvokingVertexStateCreateInfoEXT
VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* zcheckVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT
VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* zcheckarrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRasterizationProvokingVertexStateCreateInfoEXT moonvulkan_zinitVkPipelineRasterizationProvokingVertexStateCreateInfoEXT
int zinitVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(lua_State *L, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineRasterizationProvokingVertexStateCreateInfoEXT moonvulkan_zpushVkPipelineRasterizationProvokingVertexStateCreateInfoEXT
int zpushVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(lua_State *L, const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT *p);

#define znewVkPipelineRasterizationLineStateCreateInfoEXT(L, err) (VkPipelineRasterizationLineStateCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT), (err))
#define znewarrayVkPipelineRasterizationLineStateCreateInfoEXT(L, count, err) (VkPipelineRasterizationLineStateCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT), (count), (err))
#define znewchainVkPipelineRasterizationLineStateCreateInfoEXT moonvulkan_znewchainVkPipelineRasterizationLineStateCreateInfoEXT
VkPipelineRasterizationLineStateCreateInfoEXT* znewchainVkPipelineRasterizationLineStateCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineRasterizationLineStateCreateInfoEXT moonvulkan_znewchainarrayVkPipelineRasterizationLineStateCreateInfoEXT
VkPipelineRasterizationLineStateCreateInfoEXT* znewchainarrayVkPipelineRasterizationLineStateCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRasterizationLineStateCreateInfoEXT moonvulkan_zcheckVkPipelineRasterizationLineStateCreateInfoEXT
VkPipelineRasterizationLineStateCreateInfoEXT* zcheckVkPipelineRasterizationLineStateCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRasterizationLineStateCreateInfoEXT moonvulkan_zcheckarrayVkPipelineRasterizationLineStateCreateInfoEXT
VkPipelineRasterizationLineStateCreateInfoEXT* zcheckarrayVkPipelineRasterizationLineStateCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRasterizationLineStateCreateInfoEXT moonvulkan_zinitVkPipelineRasterizationLineStateCreateInfoEXT
int zinitVkPipelineRasterizationLineStateCreateInfoEXT(lua_State *L, VkPipelineRasterizationLineStateCreateInfoEXT* p, int *err);
#define zfreeVkPipelineRasterizationLineStateCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRasterizationLineStateCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRasterizationLineStateCreateInfoEXT), (count), (base))
#define zpushVkPipelineRasterizationLineStateCreateInfoEXT moonvulkan_zpushVkPipelineRasterizationLineStateCreateInfoEXT
int zpushVkPipelineRasterizationLineStateCreateInfoEXT(lua_State *L, const VkPipelineRasterizationLineStateCreateInfoEXT *p);

#define znewVkDeviceMemoryReportCallbackDataEXT(L, err) (VkDeviceMemoryReportCallbackDataEXT*)znew((L), VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, sizeof(VkDeviceMemoryReportCallbackDataEXT), (err))
#define znewarrayVkDeviceMemoryReportCallbackDataEXT(L, count, err) (VkDeviceMemoryReportCallbackDataEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, sizeof(VkDeviceMemoryReportCallbackDataEXT), (count), (err))
#define znewchainVkDeviceMemoryReportCallbackDataEXT moonvulkan_znewchainVkDeviceMemoryReportCallbackDataEXT
VkDeviceMemoryReportCallbackDataEXT* znewchainVkDeviceMemoryReportCallbackDataEXT(lua_State *L, int *err);
#define znewchainarrayVkDeviceMemoryReportCallbackDataEXT moonvulkan_znewchainarrayVkDeviceMemoryReportCallbackDataEXT
VkDeviceMemoryReportCallbackDataEXT* znewchainarrayVkDeviceMemoryReportCallbackDataEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceMemoryReportCallbackDataEXT moonvulkan_zcheckVkDeviceMemoryReportCallbackDataEXT
VkDeviceMemoryReportCallbackDataEXT* zcheckVkDeviceMemoryReportCallbackDataEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceMemoryReportCallbackDataEXT moonvulkan_zcheckarrayVkDeviceMemoryReportCallbackDataEXT
VkDeviceMemoryReportCallbackDataEXT* zcheckarrayVkDeviceMemoryReportCallbackDataEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceMemoryReportCallbackDataEXT moonvulkan_zinitVkDeviceMemoryReportCallbackDataEXT
int zinitVkDeviceMemoryReportCallbackDataEXT(lua_State *L, VkDeviceMemoryReportCallbackDataEXT* p, int *err);
#define zfreeVkDeviceMemoryReportCallbackDataEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceMemoryReportCallbackDataEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceMemoryReportCallbackDataEXT), (count), (base))
#define zpushVkDeviceMemoryReportCallbackDataEXT moonvulkan_zpushVkDeviceMemoryReportCallbackDataEXT
int zpushVkDeviceMemoryReportCallbackDataEXT(lua_State *L, const VkDeviceMemoryReportCallbackDataEXT *p);

#define znewVkDeviceDeviceMemoryReportCreateInfoEXT(L, err) (VkDeviceDeviceMemoryReportCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT), (err))
#define znewarrayVkDeviceDeviceMemoryReportCreateInfoEXT(L, count, err) (VkDeviceDeviceMemoryReportCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT), (count), (err))
#define znewchainVkDeviceDeviceMemoryReportCreateInfoEXT moonvulkan_znewchainVkDeviceDeviceMemoryReportCreateInfoEXT
VkDeviceDeviceMemoryReportCreateInfoEXT* znewchainVkDeviceDeviceMemoryReportCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDeviceDeviceMemoryReportCreateInfoEXT moonvulkan_znewchainarrayVkDeviceDeviceMemoryReportCreateInfoEXT
VkDeviceDeviceMemoryReportCreateInfoEXT* znewchainarrayVkDeviceDeviceMemoryReportCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceDeviceMemoryReportCreateInfoEXT moonvulkan_zcheckVkDeviceDeviceMemoryReportCreateInfoEXT
VkDeviceDeviceMemoryReportCreateInfoEXT* zcheckVkDeviceDeviceMemoryReportCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceDeviceMemoryReportCreateInfoEXT moonvulkan_zcheckarrayVkDeviceDeviceMemoryReportCreateInfoEXT
VkDeviceDeviceMemoryReportCreateInfoEXT* zcheckarrayVkDeviceDeviceMemoryReportCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceDeviceMemoryReportCreateInfoEXT moonvulkan_zinitVkDeviceDeviceMemoryReportCreateInfoEXT
int zinitVkDeviceDeviceMemoryReportCreateInfoEXT(lua_State *L, VkDeviceDeviceMemoryReportCreateInfoEXT* p, int *err);
#define zfreeVkDeviceDeviceMemoryReportCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceDeviceMemoryReportCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT), (count), (base))
#define zpushVkDeviceDeviceMemoryReportCreateInfoEXT moonvulkan_zpushVkDeviceDeviceMemoryReportCreateInfoEXT
int zpushVkDeviceDeviceMemoryReportCreateInfoEXT(lua_State *L, const VkDeviceDeviceMemoryReportCreateInfoEXT *p);

#define znewVkSamplerCustomBorderColorCreateInfoEXT(L, err) (VkSamplerCustomBorderColorCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, sizeof(VkSamplerCustomBorderColorCreateInfoEXT), (err))
#define znewarrayVkSamplerCustomBorderColorCreateInfoEXT(L, count, err) (VkSamplerCustomBorderColorCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, sizeof(VkSamplerCustomBorderColorCreateInfoEXT), (count), (err))
#define znewchainVkSamplerCustomBorderColorCreateInfoEXT moonvulkan_znewchainVkSamplerCustomBorderColorCreateInfoEXT
VkSamplerCustomBorderColorCreateInfoEXT* znewchainVkSamplerCustomBorderColorCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkSamplerCustomBorderColorCreateInfoEXT moonvulkan_znewchainarrayVkSamplerCustomBorderColorCreateInfoEXT
VkSamplerCustomBorderColorCreateInfoEXT* znewchainarrayVkSamplerCustomBorderColorCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkSamplerCustomBorderColorCreateInfoEXT moonvulkan_zcheckVkSamplerCustomBorderColorCreateInfoEXT
VkSamplerCustomBorderColorCreateInfoEXT* zcheckVkSamplerCustomBorderColorCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSamplerCustomBorderColorCreateInfoEXT moonvulkan_zcheckarrayVkSamplerCustomBorderColorCreateInfoEXT
VkSamplerCustomBorderColorCreateInfoEXT* zcheckarrayVkSamplerCustomBorderColorCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSamplerCustomBorderColorCreateInfoEXT moonvulkan_zinitVkSamplerCustomBorderColorCreateInfoEXT
int zinitVkSamplerCustomBorderColorCreateInfoEXT(lua_State *L, VkSamplerCustomBorderColorCreateInfoEXT* p, int *err);
#define zfreeVkSamplerCustomBorderColorCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSamplerCustomBorderColorCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkSamplerCustomBorderColorCreateInfoEXT), (count), (base))
#define zpushVkSamplerCustomBorderColorCreateInfoEXT moonvulkan_zpushVkSamplerCustomBorderColorCreateInfoEXT
int zpushVkSamplerCustomBorderColorCreateInfoEXT(lua_State *L, const VkSamplerCustomBorderColorCreateInfoEXT *p);

#define znewVkDevicePrivateDataCreateInfoEXT(L, err) (VkDevicePrivateDataCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, sizeof(VkDevicePrivateDataCreateInfoEXT), (err))
#define znewarrayVkDevicePrivateDataCreateInfoEXT(L, count, err) (VkDevicePrivateDataCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, sizeof(VkDevicePrivateDataCreateInfoEXT), (count), (err))
#define znewchainVkDevicePrivateDataCreateInfoEXT moonvulkan_znewchainVkDevicePrivateDataCreateInfoEXT
VkDevicePrivateDataCreateInfoEXT* znewchainVkDevicePrivateDataCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkDevicePrivateDataCreateInfoEXT moonvulkan_znewchainarrayVkDevicePrivateDataCreateInfoEXT
VkDevicePrivateDataCreateInfoEXT* znewchainarrayVkDevicePrivateDataCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDevicePrivateDataCreateInfoEXT moonvulkan_zcheckVkDevicePrivateDataCreateInfoEXT
VkDevicePrivateDataCreateInfoEXT* zcheckVkDevicePrivateDataCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDevicePrivateDataCreateInfoEXT moonvulkan_zcheckarrayVkDevicePrivateDataCreateInfoEXT
VkDevicePrivateDataCreateInfoEXT* zcheckarrayVkDevicePrivateDataCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDevicePrivateDataCreateInfoEXT moonvulkan_zinitVkDevicePrivateDataCreateInfoEXT
int zinitVkDevicePrivateDataCreateInfoEXT(lua_State *L, VkDevicePrivateDataCreateInfoEXT* p, int *err);
#define zfreeVkDevicePrivateDataCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDevicePrivateDataCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDevicePrivateDataCreateInfoEXT), (count), (base))
#define zpushVkDevicePrivateDataCreateInfoEXT moonvulkan_zpushVkDevicePrivateDataCreateInfoEXT
int zpushVkDevicePrivateDataCreateInfoEXT(lua_State *L, const VkDevicePrivateDataCreateInfoEXT *p);

#define znewVkPrivateDataSlotCreateInfoEXT(L, err) (VkPrivateDataSlotCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, sizeof(VkPrivateDataSlotCreateInfoEXT), (err))
#define znewarrayVkPrivateDataSlotCreateInfoEXT(L, count, err) (VkPrivateDataSlotCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, sizeof(VkPrivateDataSlotCreateInfoEXT), (count), (err))
#define znewchainVkPrivateDataSlotCreateInfoEXT moonvulkan_znewchainVkPrivateDataSlotCreateInfoEXT
VkPrivateDataSlotCreateInfoEXT* znewchainVkPrivateDataSlotCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPrivateDataSlotCreateInfoEXT moonvulkan_znewchainarrayVkPrivateDataSlotCreateInfoEXT
VkPrivateDataSlotCreateInfoEXT* znewchainarrayVkPrivateDataSlotCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPrivateDataSlotCreateInfoEXT moonvulkan_zcheckVkPrivateDataSlotCreateInfoEXT
VkPrivateDataSlotCreateInfoEXT* zcheckVkPrivateDataSlotCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPrivateDataSlotCreateInfoEXT moonvulkan_zcheckarrayVkPrivateDataSlotCreateInfoEXT
VkPrivateDataSlotCreateInfoEXT* zcheckarrayVkPrivateDataSlotCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPrivateDataSlotCreateInfoEXT moonvulkan_zinitVkPrivateDataSlotCreateInfoEXT
int zinitVkPrivateDataSlotCreateInfoEXT(lua_State *L, VkPrivateDataSlotCreateInfoEXT* p, int *err);
#define zfreeVkPrivateDataSlotCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPrivateDataSlotCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPrivateDataSlotCreateInfoEXT), (count), (base))
#define zpushVkPrivateDataSlotCreateInfoEXT moonvulkan_zpushVkPrivateDataSlotCreateInfoEXT
int zpushVkPrivateDataSlotCreateInfoEXT(lua_State *L, const VkPrivateDataSlotCreateInfoEXT *p);

#define znewVkVertexInputBindingDescription2EXT(L, err) (VkVertexInputBindingDescription2EXT*)znew((L), VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, sizeof(VkVertexInputBindingDescription2EXT), (err))
#define znewarrayVkVertexInputBindingDescription2EXT(L, count, err) (VkVertexInputBindingDescription2EXT*)znewarray((L), VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, sizeof(VkVertexInputBindingDescription2EXT), (count), (err))
#define znewchainVkVertexInputBindingDescription2EXT moonvulkan_znewchainVkVertexInputBindingDescription2EXT
VkVertexInputBindingDescription2EXT* znewchainVkVertexInputBindingDescription2EXT(lua_State *L, int *err);
#define znewchainarrayVkVertexInputBindingDescription2EXT moonvulkan_znewchainarrayVkVertexInputBindingDescription2EXT
VkVertexInputBindingDescription2EXT* znewchainarrayVkVertexInputBindingDescription2EXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkVertexInputBindingDescription2EXT moonvulkan_zcheckVkVertexInputBindingDescription2EXT
VkVertexInputBindingDescription2EXT* zcheckVkVertexInputBindingDescription2EXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkVertexInputBindingDescription2EXT moonvulkan_zcheckarrayVkVertexInputBindingDescription2EXT
VkVertexInputBindingDescription2EXT* zcheckarrayVkVertexInputBindingDescription2EXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkVertexInputBindingDescription2EXT moonvulkan_zinitVkVertexInputBindingDescription2EXT
int zinitVkVertexInputBindingDescription2EXT(lua_State *L, VkVertexInputBindingDescription2EXT* p, int *err);
#define zfreeVkVertexInputBindingDescription2EXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkVertexInputBindingDescription2EXT(L, p, count, base) zfreearray((L), (p), sizeof(VkVertexInputBindingDescription2EXT), (count), (base))
#define zpushVkVertexInputBindingDescription2EXT moonvulkan_zpushVkVertexInputBindingDescription2EXT
int zpushVkVertexInputBindingDescription2EXT(lua_State *L, const VkVertexInputBindingDescription2EXT *p);

#define znewVkVertexInputAttributeDescription2EXT(L, err) (VkVertexInputAttributeDescription2EXT*)znew((L), VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, sizeof(VkVertexInputAttributeDescription2EXT), (err))
#define znewarrayVkVertexInputAttributeDescription2EXT(L, count, err) (VkVertexInputAttributeDescription2EXT*)znewarray((L), VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, sizeof(VkVertexInputAttributeDescription2EXT), (count), (err))
#define znewchainVkVertexInputAttributeDescription2EXT moonvulkan_znewchainVkVertexInputAttributeDescription2EXT
VkVertexInputAttributeDescription2EXT* znewchainVkVertexInputAttributeDescription2EXT(lua_State *L, int *err);
#define znewchainarrayVkVertexInputAttributeDescription2EXT moonvulkan_znewchainarrayVkVertexInputAttributeDescription2EXT
VkVertexInputAttributeDescription2EXT* znewchainarrayVkVertexInputAttributeDescription2EXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkVertexInputAttributeDescription2EXT moonvulkan_zcheckVkVertexInputAttributeDescription2EXT
VkVertexInputAttributeDescription2EXT* zcheckVkVertexInputAttributeDescription2EXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkVertexInputAttributeDescription2EXT moonvulkan_zcheckarrayVkVertexInputAttributeDescription2EXT
VkVertexInputAttributeDescription2EXT* zcheckarrayVkVertexInputAttributeDescription2EXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkVertexInputAttributeDescription2EXT moonvulkan_zinitVkVertexInputAttributeDescription2EXT
int zinitVkVertexInputAttributeDescription2EXT(lua_State *L, VkVertexInputAttributeDescription2EXT* p, int *err);
#define zfreeVkVertexInputAttributeDescription2EXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkVertexInputAttributeDescription2EXT(L, p, count, base) zfreearray((L), (p), sizeof(VkVertexInputAttributeDescription2EXT), (count), (base))
#define zpushVkVertexInputAttributeDescription2EXT moonvulkan_zpushVkVertexInputAttributeDescription2EXT
int zpushVkVertexInputAttributeDescription2EXT(lua_State *L, const VkVertexInputAttributeDescription2EXT *p);

#define znewVkPipelineColorWriteCreateInfoEXT(L, err) (VkPipelineColorWriteCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, sizeof(VkPipelineColorWriteCreateInfoEXT), (err))
#define znewarrayVkPipelineColorWriteCreateInfoEXT(L, count, err) (VkPipelineColorWriteCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, sizeof(VkPipelineColorWriteCreateInfoEXT), (count), (err))
#define znewchainVkPipelineColorWriteCreateInfoEXT moonvulkan_znewchainVkPipelineColorWriteCreateInfoEXT
VkPipelineColorWriteCreateInfoEXT* znewchainVkPipelineColorWriteCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkPipelineColorWriteCreateInfoEXT moonvulkan_znewchainarrayVkPipelineColorWriteCreateInfoEXT
VkPipelineColorWriteCreateInfoEXT* znewchainarrayVkPipelineColorWriteCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineColorWriteCreateInfoEXT moonvulkan_zcheckVkPipelineColorWriteCreateInfoEXT
VkPipelineColorWriteCreateInfoEXT* zcheckVkPipelineColorWriteCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineColorWriteCreateInfoEXT moonvulkan_zcheckarrayVkPipelineColorWriteCreateInfoEXT
VkPipelineColorWriteCreateInfoEXT* zcheckarrayVkPipelineColorWriteCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineColorWriteCreateInfoEXT moonvulkan_zinitVkPipelineColorWriteCreateInfoEXT
int zinitVkPipelineColorWriteCreateInfoEXT(lua_State *L, VkPipelineColorWriteCreateInfoEXT* p, int *err);
#define zfreeVkPipelineColorWriteCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineColorWriteCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineColorWriteCreateInfoEXT), (count), (base))
#define zpushVkPipelineColorWriteCreateInfoEXT moonvulkan_zpushVkPipelineColorWriteCreateInfoEXT
int zpushVkPipelineColorWriteCreateInfoEXT(lua_State *L, const VkPipelineColorWriteCreateInfoEXT *p);

#define znewVkQueueFamilyGlobalPriorityPropertiesEXT(L, err) (VkQueueFamilyGlobalPriorityPropertiesEXT*)znew((L), VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT, sizeof(VkQueueFamilyGlobalPriorityPropertiesEXT), (err))
#define znewarrayVkQueueFamilyGlobalPriorityPropertiesEXT(L, count, err) (VkQueueFamilyGlobalPriorityPropertiesEXT*)znewarray((L), VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT, sizeof(VkQueueFamilyGlobalPriorityPropertiesEXT), (count), (err))
#define znewchainVkQueueFamilyGlobalPriorityPropertiesEXT moonvulkan_znewchainVkQueueFamilyGlobalPriorityPropertiesEXT
VkQueueFamilyGlobalPriorityPropertiesEXT* znewchainVkQueueFamilyGlobalPriorityPropertiesEXT(lua_State *L, int *err);
#define znewchainarrayVkQueueFamilyGlobalPriorityPropertiesEXT moonvulkan_znewchainarrayVkQueueFamilyGlobalPriorityPropertiesEXT
VkQueueFamilyGlobalPriorityPropertiesEXT* znewchainarrayVkQueueFamilyGlobalPriorityPropertiesEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkQueueFamilyGlobalPriorityPropertiesEXT moonvulkan_zcheckVkQueueFamilyGlobalPriorityPropertiesEXT
VkQueueFamilyGlobalPriorityPropertiesEXT* zcheckVkQueueFamilyGlobalPriorityPropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkQueueFamilyGlobalPriorityPropertiesEXT moonvulkan_zcheckarrayVkQueueFamilyGlobalPriorityPropertiesEXT
VkQueueFamilyGlobalPriorityPropertiesEXT* zcheckarrayVkQueueFamilyGlobalPriorityPropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkQueueFamilyGlobalPriorityPropertiesEXT moonvulkan_zinitVkQueueFamilyGlobalPriorityPropertiesEXT
int zinitVkQueueFamilyGlobalPriorityPropertiesEXT(lua_State *L, VkQueueFamilyGlobalPriorityPropertiesEXT* p, int *err);
#define zfreeVkQueueFamilyGlobalPriorityPropertiesEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkQueueFamilyGlobalPriorityPropertiesEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkQueueFamilyGlobalPriorityPropertiesEXT), (count), (base))
#define zpushVkQueueFamilyGlobalPriorityPropertiesEXT moonvulkan_zpushVkQueueFamilyGlobalPriorityPropertiesEXT
int zpushVkQueueFamilyGlobalPriorityPropertiesEXT(lua_State *L, const VkQueueFamilyGlobalPriorityPropertiesEXT *p);

#define znewVkSamplerBorderColorComponentMappingCreateInfoEXT(L, err) (VkSamplerBorderColorComponentMappingCreateInfoEXT*)znew((L), VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, sizeof(VkSamplerBorderColorComponentMappingCreateInfoEXT), (err))
#define znewarrayVkSamplerBorderColorComponentMappingCreateInfoEXT(L, count, err) (VkSamplerBorderColorComponentMappingCreateInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, sizeof(VkSamplerBorderColorComponentMappingCreateInfoEXT), (count), (err))
#define znewchainVkSamplerBorderColorComponentMappingCreateInfoEXT moonvulkan_znewchainVkSamplerBorderColorComponentMappingCreateInfoEXT
VkSamplerBorderColorComponentMappingCreateInfoEXT* znewchainVkSamplerBorderColorComponentMappingCreateInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkSamplerBorderColorComponentMappingCreateInfoEXT moonvulkan_znewchainarrayVkSamplerBorderColorComponentMappingCreateInfoEXT
VkSamplerBorderColorComponentMappingCreateInfoEXT* znewchainarrayVkSamplerBorderColorComponentMappingCreateInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkSamplerBorderColorComponentMappingCreateInfoEXT moonvulkan_zcheckVkSamplerBorderColorComponentMappingCreateInfoEXT
VkSamplerBorderColorComponentMappingCreateInfoEXT* zcheckVkSamplerBorderColorComponentMappingCreateInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSamplerBorderColorComponentMappingCreateInfoEXT moonvulkan_zcheckarrayVkSamplerBorderColorComponentMappingCreateInfoEXT
VkSamplerBorderColorComponentMappingCreateInfoEXT* zcheckarrayVkSamplerBorderColorComponentMappingCreateInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSamplerBorderColorComponentMappingCreateInfoEXT moonvulkan_zinitVkSamplerBorderColorComponentMappingCreateInfoEXT
int zinitVkSamplerBorderColorComponentMappingCreateInfoEXT(lua_State *L, VkSamplerBorderColorComponentMappingCreateInfoEXT* p, int *err);
#define zfreeVkSamplerBorderColorComponentMappingCreateInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSamplerBorderColorComponentMappingCreateInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkSamplerBorderColorComponentMappingCreateInfoEXT), (count), (base))
#define zpushVkSamplerBorderColorComponentMappingCreateInfoEXT moonvulkan_zpushVkSamplerBorderColorComponentMappingCreateInfoEXT
int zpushVkSamplerBorderColorComponentMappingCreateInfoEXT(lua_State *L, const VkSamplerBorderColorComponentMappingCreateInfoEXT *p);

#define znewVkDeviceBufferMemoryRequirementsKHR(L, err) (VkDeviceBufferMemoryRequirementsKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR, sizeof(VkDeviceBufferMemoryRequirementsKHR), (err))
#define znewarrayVkDeviceBufferMemoryRequirementsKHR(L, count, err) (VkDeviceBufferMemoryRequirementsKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR, sizeof(VkDeviceBufferMemoryRequirementsKHR), (count), (err))
#define znewchainVkDeviceBufferMemoryRequirementsKHR moonvulkan_znewchainVkDeviceBufferMemoryRequirementsKHR
VkDeviceBufferMemoryRequirementsKHR* znewchainVkDeviceBufferMemoryRequirementsKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceBufferMemoryRequirementsKHR moonvulkan_znewchainarrayVkDeviceBufferMemoryRequirementsKHR
VkDeviceBufferMemoryRequirementsKHR* znewchainarrayVkDeviceBufferMemoryRequirementsKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceBufferMemoryRequirementsKHR moonvulkan_zcheckVkDeviceBufferMemoryRequirementsKHR
VkDeviceBufferMemoryRequirementsKHR* zcheckVkDeviceBufferMemoryRequirementsKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceBufferMemoryRequirementsKHR moonvulkan_zcheckarrayVkDeviceBufferMemoryRequirementsKHR
VkDeviceBufferMemoryRequirementsKHR* zcheckarrayVkDeviceBufferMemoryRequirementsKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceBufferMemoryRequirementsKHR moonvulkan_zinitVkDeviceBufferMemoryRequirementsKHR
int zinitVkDeviceBufferMemoryRequirementsKHR(lua_State *L, VkDeviceBufferMemoryRequirementsKHR* p, int *err);
#define zfreeVkDeviceBufferMemoryRequirementsKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceBufferMemoryRequirementsKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceBufferMemoryRequirementsKHR), (count), (base))
#define zpushVkDeviceBufferMemoryRequirementsKHR moonvulkan_zpushVkDeviceBufferMemoryRequirementsKHR
int zpushVkDeviceBufferMemoryRequirementsKHR(lua_State *L, const VkDeviceBufferMemoryRequirementsKHR *p);

#define znewVkDeviceImageMemoryRequirementsKHR(L, err) (VkDeviceImageMemoryRequirementsKHR*)znew((L), VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR, sizeof(VkDeviceImageMemoryRequirementsKHR), (err))
#define znewarrayVkDeviceImageMemoryRequirementsKHR(L, count, err) (VkDeviceImageMemoryRequirementsKHR*)znewarray((L), VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR, sizeof(VkDeviceImageMemoryRequirementsKHR), (count), (err))
#define znewchainVkDeviceImageMemoryRequirementsKHR moonvulkan_znewchainVkDeviceImageMemoryRequirementsKHR
VkDeviceImageMemoryRequirementsKHR* znewchainVkDeviceImageMemoryRequirementsKHR(lua_State *L, int *err);
#define znewchainarrayVkDeviceImageMemoryRequirementsKHR moonvulkan_znewchainarrayVkDeviceImageMemoryRequirementsKHR
VkDeviceImageMemoryRequirementsKHR* znewchainarrayVkDeviceImageMemoryRequirementsKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkDeviceImageMemoryRequirementsKHR moonvulkan_zcheckVkDeviceImageMemoryRequirementsKHR
VkDeviceImageMemoryRequirementsKHR* zcheckVkDeviceImageMemoryRequirementsKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceImageMemoryRequirementsKHR moonvulkan_zcheckarrayVkDeviceImageMemoryRequirementsKHR
VkDeviceImageMemoryRequirementsKHR* zcheckarrayVkDeviceImageMemoryRequirementsKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceImageMemoryRequirementsKHR moonvulkan_zinitVkDeviceImageMemoryRequirementsKHR
int zinitVkDeviceImageMemoryRequirementsKHR(lua_State *L, VkDeviceImageMemoryRequirementsKHR* p, int *err);
#define zfreeVkDeviceImageMemoryRequirementsKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDeviceImageMemoryRequirementsKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkDeviceImageMemoryRequirementsKHR), (count), (base))
#define zpushVkDeviceImageMemoryRequirementsKHR moonvulkan_zpushVkDeviceImageMemoryRequirementsKHR
int zpushVkDeviceImageMemoryRequirementsKHR(lua_State *L, const VkDeviceImageMemoryRequirementsKHR *p);

#define znewVkDrmFormatModifierProperties2EXT(L, err) (VkDrmFormatModifierProperties2EXT*)znew((L), VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_2_EXT, sizeof(VkDrmFormatModifierProperties2EXT), (err))
#define znewarrayVkDrmFormatModifierProperties2EXT(L, count, err) (VkDrmFormatModifierProperties2EXT*)znewarray((L), VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_2_EXT, sizeof(VkDrmFormatModifierProperties2EXT), (count), (err))
#define znewchainVkDrmFormatModifierProperties2EXT moonvulkan_znewchainVkDrmFormatModifierProperties2EXT
VkDrmFormatModifierProperties2EXT* znewchainVkDrmFormatModifierProperties2EXT(lua_State *L, int *err);
#define znewchainarrayVkDrmFormatModifierProperties2EXT moonvulkan_znewchainarrayVkDrmFormatModifierProperties2EXT
VkDrmFormatModifierProperties2EXT* znewchainarrayVkDrmFormatModifierProperties2EXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDrmFormatModifierProperties2EXT moonvulkan_zcheckVkDrmFormatModifierProperties2EXT
VkDrmFormatModifierProperties2EXT* zcheckVkDrmFormatModifierProperties2EXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDrmFormatModifierProperties2EXT moonvulkan_zcheckarrayVkDrmFormatModifierProperties2EXT
VkDrmFormatModifierProperties2EXT* zcheckarrayVkDrmFormatModifierProperties2EXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDrmFormatModifierProperties2EXT moonvulkan_zinitVkDrmFormatModifierProperties2EXT
int zinitVkDrmFormatModifierProperties2EXT(lua_State *L, VkDrmFormatModifierProperties2EXT* p, int *err);
#define zfreeVkDrmFormatModifierProperties2EXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDrmFormatModifierProperties2EXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDrmFormatModifierProperties2EXT), (count), (base))
#define zpushVkDrmFormatModifierProperties2EXT moonvulkan_zpushVkDrmFormatModifierProperties2EXT
int zpushVkDrmFormatModifierProperties2EXT(lua_State *L, const VkDrmFormatModifierProperties2EXT *p);

#define znewVkDrmFormatModifierPropertiesList2EXT(L, err) (VkDrmFormatModifierPropertiesList2EXT*)znew((L), VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, sizeof(VkDrmFormatModifierPropertiesList2EXT), (err))
#define znewarrayVkDrmFormatModifierPropertiesList2EXT(L, count, err) (VkDrmFormatModifierPropertiesList2EXT*)znewarray((L), VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, sizeof(VkDrmFormatModifierPropertiesList2EXT), (count), (err))
#define znewchainVkDrmFormatModifierPropertiesList2EXT moonvulkan_znewchainVkDrmFormatModifierPropertiesList2EXT
VkDrmFormatModifierPropertiesList2EXT* znewchainVkDrmFormatModifierPropertiesList2EXT(lua_State *L, int *err);
#define znewchainarrayVkDrmFormatModifierPropertiesList2EXT moonvulkan_znewchainarrayVkDrmFormatModifierPropertiesList2EXT
VkDrmFormatModifierPropertiesList2EXT* znewchainarrayVkDrmFormatModifierPropertiesList2EXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkDrmFormatModifierPropertiesList2EXT moonvulkan_zcheckVkDrmFormatModifierPropertiesList2EXT
VkDrmFormatModifierPropertiesList2EXT* zcheckVkDrmFormatModifierPropertiesList2EXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDrmFormatModifierPropertiesList2EXT moonvulkan_zcheckarrayVkDrmFormatModifierPropertiesList2EXT
VkDrmFormatModifierPropertiesList2EXT* zcheckarrayVkDrmFormatModifierPropertiesList2EXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDrmFormatModifierPropertiesList2EXT moonvulkan_zinitVkDrmFormatModifierPropertiesList2EXT
int zinitVkDrmFormatModifierPropertiesList2EXT(lua_State *L, VkDrmFormatModifierPropertiesList2EXT* p, int *err);
#define zfreeVkDrmFormatModifierPropertiesList2EXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkDrmFormatModifierPropertiesList2EXT(L, p, count, base) zfreearray((L), (p), sizeof(VkDrmFormatModifierPropertiesList2EXT), (count), (base))
#define zpushVkDrmFormatModifierPropertiesList2EXT moonvulkan_zpushVkDrmFormatModifierPropertiesList2EXT
int zpushVkDrmFormatModifierPropertiesList2EXT(lua_State *L, const VkDrmFormatModifierPropertiesList2EXT *p);

#define znewVkRenderingAttachmentInfoKHR(L, err) (VkRenderingAttachmentInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR, sizeof(VkRenderingAttachmentInfoKHR), (err))
#define znewarrayVkRenderingAttachmentInfoKHR(L, count, err) (VkRenderingAttachmentInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR, sizeof(VkRenderingAttachmentInfoKHR), (count), (err))
#define znewchainVkRenderingAttachmentInfoKHR moonvulkan_znewchainVkRenderingAttachmentInfoKHR
VkRenderingAttachmentInfoKHR* znewchainVkRenderingAttachmentInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRenderingAttachmentInfoKHR moonvulkan_znewchainarrayVkRenderingAttachmentInfoKHR
VkRenderingAttachmentInfoKHR* znewchainarrayVkRenderingAttachmentInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderingAttachmentInfoKHR moonvulkan_zcheckVkRenderingAttachmentInfoKHR
VkRenderingAttachmentInfoKHR* zcheckVkRenderingAttachmentInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderingAttachmentInfoKHR moonvulkan_zcheckarrayVkRenderingAttachmentInfoKHR
VkRenderingAttachmentInfoKHR* zcheckarrayVkRenderingAttachmentInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderingAttachmentInfoKHR moonvulkan_zinitVkRenderingAttachmentInfoKHR
int zinitVkRenderingAttachmentInfoKHR(lua_State *L, VkRenderingAttachmentInfoKHR* p, int *err);
#define zfreeVkRenderingAttachmentInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderingAttachmentInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderingAttachmentInfoKHR), (count), (base))
#define zpushVkRenderingAttachmentInfoKHR moonvulkan_zpushVkRenderingAttachmentInfoKHR
int zpushVkRenderingAttachmentInfoKHR(lua_State *L, const VkRenderingAttachmentInfoKHR *p);

#define znewVkRenderingInfoKHR(L, err) (VkRenderingInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RENDERING_INFO_KHR, sizeof(VkRenderingInfoKHR), (err))
#define znewarrayVkRenderingInfoKHR(L, count, err) (VkRenderingInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RENDERING_INFO_KHR, sizeof(VkRenderingInfoKHR), (count), (err))
#define znewchainVkRenderingInfoKHR moonvulkan_znewchainVkRenderingInfoKHR
VkRenderingInfoKHR* znewchainVkRenderingInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRenderingInfoKHR moonvulkan_znewchainarrayVkRenderingInfoKHR
VkRenderingInfoKHR* znewchainarrayVkRenderingInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderingInfoKHR moonvulkan_zcheckVkRenderingInfoKHR
VkRenderingInfoKHR* zcheckVkRenderingInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderingInfoKHR moonvulkan_zcheckarrayVkRenderingInfoKHR
VkRenderingInfoKHR* zcheckarrayVkRenderingInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderingInfoKHR moonvulkan_zinitVkRenderingInfoKHR
int zinitVkRenderingInfoKHR(lua_State *L, VkRenderingInfoKHR* p, int *err);
#define zfreeVkRenderingInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderingInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderingInfoKHR), (count), (base))
#define zpushVkRenderingInfoKHR moonvulkan_zpushVkRenderingInfoKHR
int zpushVkRenderingInfoKHR(lua_State *L, const VkRenderingInfoKHR *p);

#define znewVkPipelineRenderingCreateInfoKHR(L, err) (VkPipelineRenderingCreateInfoKHR*)znew((L), VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR, sizeof(VkPipelineRenderingCreateInfoKHR), (err))
#define znewarrayVkPipelineRenderingCreateInfoKHR(L, count, err) (VkPipelineRenderingCreateInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR, sizeof(VkPipelineRenderingCreateInfoKHR), (count), (err))
#define znewchainVkPipelineRenderingCreateInfoKHR moonvulkan_znewchainVkPipelineRenderingCreateInfoKHR
VkPipelineRenderingCreateInfoKHR* znewchainVkPipelineRenderingCreateInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkPipelineRenderingCreateInfoKHR moonvulkan_znewchainarrayVkPipelineRenderingCreateInfoKHR
VkPipelineRenderingCreateInfoKHR* znewchainarrayVkPipelineRenderingCreateInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkPipelineRenderingCreateInfoKHR moonvulkan_zcheckVkPipelineRenderingCreateInfoKHR
VkPipelineRenderingCreateInfoKHR* zcheckVkPipelineRenderingCreateInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineRenderingCreateInfoKHR moonvulkan_zcheckarrayVkPipelineRenderingCreateInfoKHR
VkPipelineRenderingCreateInfoKHR* zcheckarrayVkPipelineRenderingCreateInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineRenderingCreateInfoKHR moonvulkan_zinitVkPipelineRenderingCreateInfoKHR
int zinitVkPipelineRenderingCreateInfoKHR(lua_State *L, VkPipelineRenderingCreateInfoKHR* p, int *err);
#define zfreeVkPipelineRenderingCreateInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkPipelineRenderingCreateInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkPipelineRenderingCreateInfoKHR), (count), (base))
#define zpushVkPipelineRenderingCreateInfoKHR moonvulkan_zpushVkPipelineRenderingCreateInfoKHR
int zpushVkPipelineRenderingCreateInfoKHR(lua_State *L, const VkPipelineRenderingCreateInfoKHR *p);

#define znewVkCommandBufferInheritanceRenderingInfoKHR(L, err) (VkCommandBufferInheritanceRenderingInfoKHR*)znew((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR, sizeof(VkCommandBufferInheritanceRenderingInfoKHR), (err))
#define znewarrayVkCommandBufferInheritanceRenderingInfoKHR(L, count, err) (VkCommandBufferInheritanceRenderingInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR, sizeof(VkCommandBufferInheritanceRenderingInfoKHR), (count), (err))
#define znewchainVkCommandBufferInheritanceRenderingInfoKHR moonvulkan_znewchainVkCommandBufferInheritanceRenderingInfoKHR
VkCommandBufferInheritanceRenderingInfoKHR* znewchainVkCommandBufferInheritanceRenderingInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkCommandBufferInheritanceRenderingInfoKHR moonvulkan_znewchainarrayVkCommandBufferInheritanceRenderingInfoKHR
VkCommandBufferInheritanceRenderingInfoKHR* znewchainarrayVkCommandBufferInheritanceRenderingInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkCommandBufferInheritanceRenderingInfoKHR moonvulkan_zcheckVkCommandBufferInheritanceRenderingInfoKHR
VkCommandBufferInheritanceRenderingInfoKHR* zcheckVkCommandBufferInheritanceRenderingInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkCommandBufferInheritanceRenderingInfoKHR moonvulkan_zcheckarrayVkCommandBufferInheritanceRenderingInfoKHR
VkCommandBufferInheritanceRenderingInfoKHR* zcheckarrayVkCommandBufferInheritanceRenderingInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkCommandBufferInheritanceRenderingInfoKHR moonvulkan_zinitVkCommandBufferInheritanceRenderingInfoKHR
int zinitVkCommandBufferInheritanceRenderingInfoKHR(lua_State *L, VkCommandBufferInheritanceRenderingInfoKHR* p, int *err);
#define zfreeVkCommandBufferInheritanceRenderingInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkCommandBufferInheritanceRenderingInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkCommandBufferInheritanceRenderingInfoKHR), (count), (base))
#define zpushVkCommandBufferInheritanceRenderingInfoKHR moonvulkan_zpushVkCommandBufferInheritanceRenderingInfoKHR
int zpushVkCommandBufferInheritanceRenderingInfoKHR(lua_State *L, const VkCommandBufferInheritanceRenderingInfoKHR *p);

#define znewVkRenderingFragmentShadingRateAttachmentInfoKHR(L, err) (VkRenderingFragmentShadingRateAttachmentInfoKHR*)znew((L), VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkRenderingFragmentShadingRateAttachmentInfoKHR), (err))
#define znewarrayVkRenderingFragmentShadingRateAttachmentInfoKHR(L, count, err) (VkRenderingFragmentShadingRateAttachmentInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkRenderingFragmentShadingRateAttachmentInfoKHR), (count), (err))
#define znewchainVkRenderingFragmentShadingRateAttachmentInfoKHR moonvulkan_znewchainVkRenderingFragmentShadingRateAttachmentInfoKHR
VkRenderingFragmentShadingRateAttachmentInfoKHR* znewchainVkRenderingFragmentShadingRateAttachmentInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkRenderingFragmentShadingRateAttachmentInfoKHR moonvulkan_znewchainarrayVkRenderingFragmentShadingRateAttachmentInfoKHR
VkRenderingFragmentShadingRateAttachmentInfoKHR* znewchainarrayVkRenderingFragmentShadingRateAttachmentInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderingFragmentShadingRateAttachmentInfoKHR moonvulkan_zcheckVkRenderingFragmentShadingRateAttachmentInfoKHR
VkRenderingFragmentShadingRateAttachmentInfoKHR* zcheckVkRenderingFragmentShadingRateAttachmentInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderingFragmentShadingRateAttachmentInfoKHR moonvulkan_zcheckarrayVkRenderingFragmentShadingRateAttachmentInfoKHR
VkRenderingFragmentShadingRateAttachmentInfoKHR* zcheckarrayVkRenderingFragmentShadingRateAttachmentInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderingFragmentShadingRateAttachmentInfoKHR moonvulkan_zinitVkRenderingFragmentShadingRateAttachmentInfoKHR
int zinitVkRenderingFragmentShadingRateAttachmentInfoKHR(lua_State *L, VkRenderingFragmentShadingRateAttachmentInfoKHR* p, int *err);
#define zfreeVkRenderingFragmentShadingRateAttachmentInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderingFragmentShadingRateAttachmentInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderingFragmentShadingRateAttachmentInfoKHR), (count), (base))
#define zpushVkRenderingFragmentShadingRateAttachmentInfoKHR moonvulkan_zpushVkRenderingFragmentShadingRateAttachmentInfoKHR
int zpushVkRenderingFragmentShadingRateAttachmentInfoKHR(lua_State *L, const VkRenderingFragmentShadingRateAttachmentInfoKHR *p);

#define znewVkRenderingFragmentDensityMapAttachmentInfoEXT(L, err) (VkRenderingFragmentDensityMapAttachmentInfoEXT*)znew((L), VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, sizeof(VkRenderingFragmentDensityMapAttachmentInfoEXT), (err))
#define znewarrayVkRenderingFragmentDensityMapAttachmentInfoEXT(L, count, err) (VkRenderingFragmentDensityMapAttachmentInfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, sizeof(VkRenderingFragmentDensityMapAttachmentInfoEXT), (count), (err))
#define znewchainVkRenderingFragmentDensityMapAttachmentInfoEXT moonvulkan_znewchainVkRenderingFragmentDensityMapAttachmentInfoEXT
VkRenderingFragmentDensityMapAttachmentInfoEXT* znewchainVkRenderingFragmentDensityMapAttachmentInfoEXT(lua_State *L, int *err);
#define znewchainarrayVkRenderingFragmentDensityMapAttachmentInfoEXT moonvulkan_znewchainarrayVkRenderingFragmentDensityMapAttachmentInfoEXT
VkRenderingFragmentDensityMapAttachmentInfoEXT* znewchainarrayVkRenderingFragmentDensityMapAttachmentInfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkRenderingFragmentDensityMapAttachmentInfoEXT moonvulkan_zcheckVkRenderingFragmentDensityMapAttachmentInfoEXT
VkRenderingFragmentDensityMapAttachmentInfoEXT* zcheckVkRenderingFragmentDensityMapAttachmentInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkRenderingFragmentDensityMapAttachmentInfoEXT moonvulkan_zcheckarrayVkRenderingFragmentDensityMapAttachmentInfoEXT
VkRenderingFragmentDensityMapAttachmentInfoEXT* zcheckarrayVkRenderingFragmentDensityMapAttachmentInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRenderingFragmentDensityMapAttachmentInfoEXT moonvulkan_zinitVkRenderingFragmentDensityMapAttachmentInfoEXT
int zinitVkRenderingFragmentDensityMapAttachmentInfoEXT(lua_State *L, VkRenderingFragmentDensityMapAttachmentInfoEXT* p, int *err);
#define zfreeVkRenderingFragmentDensityMapAttachmentInfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkRenderingFragmentDensityMapAttachmentInfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkRenderingFragmentDensityMapAttachmentInfoEXT), (count), (base))
#define zpushVkRenderingFragmentDensityMapAttachmentInfoEXT moonvulkan_zpushVkRenderingFragmentDensityMapAttachmentInfoEXT
int zpushVkRenderingFragmentDensityMapAttachmentInfoEXT(lua_State *L, const VkRenderingFragmentDensityMapAttachmentInfoEXT *p);


#ifdef VK_USE_PLATFORM_WIN32_KHR

#define znewVkImportSemaphoreWin32HandleInfoKHR(L, err) (VkImportSemaphoreWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, sizeof(VkImportSemaphoreWin32HandleInfoKHR), (err))
#define znewarrayVkImportSemaphoreWin32HandleInfoKHR(L, count, err) (VkImportSemaphoreWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, sizeof(VkImportSemaphoreWin32HandleInfoKHR), (count), (err))
#define znewchainVkImportSemaphoreWin32HandleInfoKHR moonvulkan_znewchainVkImportSemaphoreWin32HandleInfoKHR
VkImportSemaphoreWin32HandleInfoKHR* znewchainVkImportSemaphoreWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImportSemaphoreWin32HandleInfoKHR moonvulkan_znewchainarrayVkImportSemaphoreWin32HandleInfoKHR
VkImportSemaphoreWin32HandleInfoKHR* znewchainarrayVkImportSemaphoreWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportSemaphoreWin32HandleInfoKHR moonvulkan_zcheckVkImportSemaphoreWin32HandleInfoKHR
VkImportSemaphoreWin32HandleInfoKHR* zcheckVkImportSemaphoreWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportSemaphoreWin32HandleInfoKHR moonvulkan_zcheckarrayVkImportSemaphoreWin32HandleInfoKHR
VkImportSemaphoreWin32HandleInfoKHR* zcheckarrayVkImportSemaphoreWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportSemaphoreWin32HandleInfoKHR moonvulkan_zinitVkImportSemaphoreWin32HandleInfoKHR
int zinitVkImportSemaphoreWin32HandleInfoKHR(lua_State *L, VkImportSemaphoreWin32HandleInfoKHR* p, int *err);
#define zfreeVkImportSemaphoreWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportSemaphoreWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImportSemaphoreWin32HandleInfoKHR), (count), (base))
#define zpushVkImportSemaphoreWin32HandleInfoKHR moonvulkan_zpushVkImportSemaphoreWin32HandleInfoKHR
int zpushVkImportSemaphoreWin32HandleInfoKHR(lua_State *L, const VkImportSemaphoreWin32HandleInfoKHR *p);

#define znewVkSemaphoreGetWin32HandleInfoKHR(L, err) (VkSemaphoreGetWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, sizeof(VkSemaphoreGetWin32HandleInfoKHR), (err))
#define znewarrayVkSemaphoreGetWin32HandleInfoKHR(L, count, err) (VkSemaphoreGetWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, sizeof(VkSemaphoreGetWin32HandleInfoKHR), (count), (err))
#define znewchainVkSemaphoreGetWin32HandleInfoKHR moonvulkan_znewchainVkSemaphoreGetWin32HandleInfoKHR
VkSemaphoreGetWin32HandleInfoKHR* znewchainVkSemaphoreGetWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkSemaphoreGetWin32HandleInfoKHR moonvulkan_znewchainarrayVkSemaphoreGetWin32HandleInfoKHR
VkSemaphoreGetWin32HandleInfoKHR* znewchainarrayVkSemaphoreGetWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkSemaphoreGetWin32HandleInfoKHR moonvulkan_zcheckVkSemaphoreGetWin32HandleInfoKHR
VkSemaphoreGetWin32HandleInfoKHR* zcheckVkSemaphoreGetWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSemaphoreGetWin32HandleInfoKHR moonvulkan_zcheckarrayVkSemaphoreGetWin32HandleInfoKHR
VkSemaphoreGetWin32HandleInfoKHR* zcheckarrayVkSemaphoreGetWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSemaphoreGetWin32HandleInfoKHR moonvulkan_zinitVkSemaphoreGetWin32HandleInfoKHR
int zinitVkSemaphoreGetWin32HandleInfoKHR(lua_State *L, VkSemaphoreGetWin32HandleInfoKHR* p, int *err);
#define zfreeVkSemaphoreGetWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSemaphoreGetWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkSemaphoreGetWin32HandleInfoKHR), (count), (base))
#define zpushVkSemaphoreGetWin32HandleInfoKHR moonvulkan_zpushVkSemaphoreGetWin32HandleInfoKHR
int zpushVkSemaphoreGetWin32HandleInfoKHR(lua_State *L, const VkSemaphoreGetWin32HandleInfoKHR *p);

#define znewVkImportFenceWin32HandleInfoKHR(L, err) (VkImportFenceWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, sizeof(VkImportFenceWin32HandleInfoKHR), (err))
#define znewarrayVkImportFenceWin32HandleInfoKHR(L, count, err) (VkImportFenceWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, sizeof(VkImportFenceWin32HandleInfoKHR), (count), (err))
#define znewchainVkImportFenceWin32HandleInfoKHR moonvulkan_znewchainVkImportFenceWin32HandleInfoKHR
VkImportFenceWin32HandleInfoKHR* znewchainVkImportFenceWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImportFenceWin32HandleInfoKHR moonvulkan_znewchainarrayVkImportFenceWin32HandleInfoKHR
VkImportFenceWin32HandleInfoKHR* znewchainarrayVkImportFenceWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportFenceWin32HandleInfoKHR moonvulkan_zcheckVkImportFenceWin32HandleInfoKHR
VkImportFenceWin32HandleInfoKHR* zcheckVkImportFenceWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportFenceWin32HandleInfoKHR moonvulkan_zcheckarrayVkImportFenceWin32HandleInfoKHR
VkImportFenceWin32HandleInfoKHR* zcheckarrayVkImportFenceWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportFenceWin32HandleInfoKHR moonvulkan_zinitVkImportFenceWin32HandleInfoKHR
int zinitVkImportFenceWin32HandleInfoKHR(lua_State *L, VkImportFenceWin32HandleInfoKHR* p, int *err);
#define zfreeVkImportFenceWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportFenceWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImportFenceWin32HandleInfoKHR), (count), (base))
#define zpushVkImportFenceWin32HandleInfoKHR moonvulkan_zpushVkImportFenceWin32HandleInfoKHR
int zpushVkImportFenceWin32HandleInfoKHR(lua_State *L, const VkImportFenceWin32HandleInfoKHR *p);

#define znewVkExportFenceWin32HandleInfoKHR(L, err) (VkExportFenceWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, sizeof(VkExportFenceWin32HandleInfoKHR), (err))
#define znewarrayVkExportFenceWin32HandleInfoKHR(L, count, err) (VkExportFenceWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, sizeof(VkExportFenceWin32HandleInfoKHR), (count), (err))
#define znewchainVkExportFenceWin32HandleInfoKHR moonvulkan_znewchainVkExportFenceWin32HandleInfoKHR
VkExportFenceWin32HandleInfoKHR* znewchainVkExportFenceWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkExportFenceWin32HandleInfoKHR moonvulkan_znewchainarrayVkExportFenceWin32HandleInfoKHR
VkExportFenceWin32HandleInfoKHR* znewchainarrayVkExportFenceWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExportFenceWin32HandleInfoKHR moonvulkan_zcheckVkExportFenceWin32HandleInfoKHR
VkExportFenceWin32HandleInfoKHR* zcheckVkExportFenceWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExportFenceWin32HandleInfoKHR moonvulkan_zcheckarrayVkExportFenceWin32HandleInfoKHR
VkExportFenceWin32HandleInfoKHR* zcheckarrayVkExportFenceWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExportFenceWin32HandleInfoKHR moonvulkan_zinitVkExportFenceWin32HandleInfoKHR
int zinitVkExportFenceWin32HandleInfoKHR(lua_State *L, VkExportFenceWin32HandleInfoKHR* p, int *err);
#define zfreeVkExportFenceWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExportFenceWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExportFenceWin32HandleInfoKHR), (count), (base))
#define zpushVkExportFenceWin32HandleInfoKHR moonvulkan_zpushVkExportFenceWin32HandleInfoKHR
int zpushVkExportFenceWin32HandleInfoKHR(lua_State *L, const VkExportFenceWin32HandleInfoKHR *p);

#define znewVkFenceGetWin32HandleInfoKHR(L, err) (VkFenceGetWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, sizeof(VkFenceGetWin32HandleInfoKHR), (err))
#define znewarrayVkFenceGetWin32HandleInfoKHR(L, count, err) (VkFenceGetWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, sizeof(VkFenceGetWin32HandleInfoKHR), (count), (err))
#define znewchainVkFenceGetWin32HandleInfoKHR moonvulkan_znewchainVkFenceGetWin32HandleInfoKHR
VkFenceGetWin32HandleInfoKHR* znewchainVkFenceGetWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkFenceGetWin32HandleInfoKHR moonvulkan_znewchainarrayVkFenceGetWin32HandleInfoKHR
VkFenceGetWin32HandleInfoKHR* znewchainarrayVkFenceGetWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkFenceGetWin32HandleInfoKHR moonvulkan_zcheckVkFenceGetWin32HandleInfoKHR
VkFenceGetWin32HandleInfoKHR* zcheckVkFenceGetWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkFenceGetWin32HandleInfoKHR moonvulkan_zcheckarrayVkFenceGetWin32HandleInfoKHR
VkFenceGetWin32HandleInfoKHR* zcheckarrayVkFenceGetWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFenceGetWin32HandleInfoKHR moonvulkan_zinitVkFenceGetWin32HandleInfoKHR
int zinitVkFenceGetWin32HandleInfoKHR(lua_State *L, VkFenceGetWin32HandleInfoKHR* p, int *err);
#define zfreeVkFenceGetWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFenceGetWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkFenceGetWin32HandleInfoKHR), (count), (base))
#define zpushVkFenceGetWin32HandleInfoKHR moonvulkan_zpushVkFenceGetWin32HandleInfoKHR
int zpushVkFenceGetWin32HandleInfoKHR(lua_State *L, const VkFenceGetWin32HandleInfoKHR *p);

#define znewVkImportMemoryWin32HandleInfoKHR(L, err) (VkImportMemoryWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, sizeof(VkImportMemoryWin32HandleInfoKHR), (err))
#define znewarrayVkImportMemoryWin32HandleInfoKHR(L, count, err) (VkImportMemoryWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, sizeof(VkImportMemoryWin32HandleInfoKHR), (count), (err))
#define znewchainVkImportMemoryWin32HandleInfoKHR moonvulkan_znewchainVkImportMemoryWin32HandleInfoKHR
VkImportMemoryWin32HandleInfoKHR* znewchainVkImportMemoryWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkImportMemoryWin32HandleInfoKHR moonvulkan_znewchainarrayVkImportMemoryWin32HandleInfoKHR
VkImportMemoryWin32HandleInfoKHR* znewchainarrayVkImportMemoryWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkImportMemoryWin32HandleInfoKHR moonvulkan_zcheckVkImportMemoryWin32HandleInfoKHR
VkImportMemoryWin32HandleInfoKHR* zcheckVkImportMemoryWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkImportMemoryWin32HandleInfoKHR moonvulkan_zcheckarrayVkImportMemoryWin32HandleInfoKHR
VkImportMemoryWin32HandleInfoKHR* zcheckarrayVkImportMemoryWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImportMemoryWin32HandleInfoKHR moonvulkan_zinitVkImportMemoryWin32HandleInfoKHR
int zinitVkImportMemoryWin32HandleInfoKHR(lua_State *L, VkImportMemoryWin32HandleInfoKHR* p, int *err);
#define zfreeVkImportMemoryWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkImportMemoryWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkImportMemoryWin32HandleInfoKHR), (count), (base))
#define zpushVkImportMemoryWin32HandleInfoKHR moonvulkan_zpushVkImportMemoryWin32HandleInfoKHR
int zpushVkImportMemoryWin32HandleInfoKHR(lua_State *L, const VkImportMemoryWin32HandleInfoKHR *p);

#define znewVkExportMemoryWin32HandleInfoKHR(L, err) (VkExportMemoryWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, sizeof(VkExportMemoryWin32HandleInfoKHR), (err))
#define znewarrayVkExportMemoryWin32HandleInfoKHR(L, count, err) (VkExportMemoryWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, sizeof(VkExportMemoryWin32HandleInfoKHR), (count), (err))
#define znewchainVkExportMemoryWin32HandleInfoKHR moonvulkan_znewchainVkExportMemoryWin32HandleInfoKHR
VkExportMemoryWin32HandleInfoKHR* znewchainVkExportMemoryWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkExportMemoryWin32HandleInfoKHR moonvulkan_znewchainarrayVkExportMemoryWin32HandleInfoKHR
VkExportMemoryWin32HandleInfoKHR* znewchainarrayVkExportMemoryWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkExportMemoryWin32HandleInfoKHR moonvulkan_zcheckVkExportMemoryWin32HandleInfoKHR
VkExportMemoryWin32HandleInfoKHR* zcheckVkExportMemoryWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkExportMemoryWin32HandleInfoKHR moonvulkan_zcheckarrayVkExportMemoryWin32HandleInfoKHR
VkExportMemoryWin32HandleInfoKHR* zcheckarrayVkExportMemoryWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExportMemoryWin32HandleInfoKHR moonvulkan_zinitVkExportMemoryWin32HandleInfoKHR
int zinitVkExportMemoryWin32HandleInfoKHR(lua_State *L, VkExportMemoryWin32HandleInfoKHR* p, int *err);
#define zfreeVkExportMemoryWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkExportMemoryWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkExportMemoryWin32HandleInfoKHR), (count), (base))
#define zpushVkExportMemoryWin32HandleInfoKHR moonvulkan_zpushVkExportMemoryWin32HandleInfoKHR
int zpushVkExportMemoryWin32HandleInfoKHR(lua_State *L, const VkExportMemoryWin32HandleInfoKHR *p);

#define znewVkMemoryWin32HandlePropertiesKHR(L, err) (VkMemoryWin32HandlePropertiesKHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, sizeof(VkMemoryWin32HandlePropertiesKHR), (err))
#define znewarrayVkMemoryWin32HandlePropertiesKHR(L, count, err) (VkMemoryWin32HandlePropertiesKHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, sizeof(VkMemoryWin32HandlePropertiesKHR), (count), (err))
#define znewchainVkMemoryWin32HandlePropertiesKHR moonvulkan_znewchainVkMemoryWin32HandlePropertiesKHR
VkMemoryWin32HandlePropertiesKHR* znewchainVkMemoryWin32HandlePropertiesKHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryWin32HandlePropertiesKHR moonvulkan_znewchainarrayVkMemoryWin32HandlePropertiesKHR
VkMemoryWin32HandlePropertiesKHR* znewchainarrayVkMemoryWin32HandlePropertiesKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryWin32HandlePropertiesKHR moonvulkan_zcheckVkMemoryWin32HandlePropertiesKHR
VkMemoryWin32HandlePropertiesKHR* zcheckVkMemoryWin32HandlePropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryWin32HandlePropertiesKHR moonvulkan_zcheckarrayVkMemoryWin32HandlePropertiesKHR
VkMemoryWin32HandlePropertiesKHR* zcheckarrayVkMemoryWin32HandlePropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryWin32HandlePropertiesKHR moonvulkan_zinitVkMemoryWin32HandlePropertiesKHR
int zinitVkMemoryWin32HandlePropertiesKHR(lua_State *L, VkMemoryWin32HandlePropertiesKHR* p, int *err);
#define zfreeVkMemoryWin32HandlePropertiesKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryWin32HandlePropertiesKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryWin32HandlePropertiesKHR), (count), (base))
#define zpushVkMemoryWin32HandlePropertiesKHR moonvulkan_zpushVkMemoryWin32HandlePropertiesKHR
int zpushVkMemoryWin32HandlePropertiesKHR(lua_State *L, const VkMemoryWin32HandlePropertiesKHR *p);

#define znewVkMemoryGetWin32HandleInfoKHR(L, err) (VkMemoryGetWin32HandleInfoKHR*)znew((L), VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, sizeof(VkMemoryGetWin32HandleInfoKHR), (err))
#define znewarrayVkMemoryGetWin32HandleInfoKHR(L, count, err) (VkMemoryGetWin32HandleInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, sizeof(VkMemoryGetWin32HandleInfoKHR), (count), (err))
#define znewchainVkMemoryGetWin32HandleInfoKHR moonvulkan_znewchainVkMemoryGetWin32HandleInfoKHR
VkMemoryGetWin32HandleInfoKHR* znewchainVkMemoryGetWin32HandleInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkMemoryGetWin32HandleInfoKHR moonvulkan_znewchainarrayVkMemoryGetWin32HandleInfoKHR
VkMemoryGetWin32HandleInfoKHR* znewchainarrayVkMemoryGetWin32HandleInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkMemoryGetWin32HandleInfoKHR moonvulkan_zcheckVkMemoryGetWin32HandleInfoKHR
VkMemoryGetWin32HandleInfoKHR* zcheckVkMemoryGetWin32HandleInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryGetWin32HandleInfoKHR moonvulkan_zcheckarrayVkMemoryGetWin32HandleInfoKHR
VkMemoryGetWin32HandleInfoKHR* zcheckarrayVkMemoryGetWin32HandleInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryGetWin32HandleInfoKHR moonvulkan_zinitVkMemoryGetWin32HandleInfoKHR
int zinitVkMemoryGetWin32HandleInfoKHR(lua_State *L, VkMemoryGetWin32HandleInfoKHR* p, int *err);
#define zfreeVkMemoryGetWin32HandleInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkMemoryGetWin32HandleInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkMemoryGetWin32HandleInfoKHR), (count), (base))
#define zpushVkMemoryGetWin32HandleInfoKHR moonvulkan_zpushVkMemoryGetWin32HandleInfoKHR
int zpushVkMemoryGetWin32HandleInfoKHR(lua_State *L, const VkMemoryGetWin32HandleInfoKHR *p);

#define znewVkWin32KeyedMutexAcquireReleaseInfoKHR(L, err) (VkWin32KeyedMutexAcquireReleaseInfoKHR*)znew((L), VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR), (err))
#define znewarrayVkWin32KeyedMutexAcquireReleaseInfoKHR(L, count, err) (VkWin32KeyedMutexAcquireReleaseInfoKHR*)znewarray((L), VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR), (count), (err))
#define znewchainVkWin32KeyedMutexAcquireReleaseInfoKHR moonvulkan_znewchainVkWin32KeyedMutexAcquireReleaseInfoKHR
VkWin32KeyedMutexAcquireReleaseInfoKHR* znewchainVkWin32KeyedMutexAcquireReleaseInfoKHR(lua_State *L, int *err);
#define znewchainarrayVkWin32KeyedMutexAcquireReleaseInfoKHR moonvulkan_znewchainarrayVkWin32KeyedMutexAcquireReleaseInfoKHR
VkWin32KeyedMutexAcquireReleaseInfoKHR* znewchainarrayVkWin32KeyedMutexAcquireReleaseInfoKHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkWin32KeyedMutexAcquireReleaseInfoKHR moonvulkan_zcheckVkWin32KeyedMutexAcquireReleaseInfoKHR
VkWin32KeyedMutexAcquireReleaseInfoKHR* zcheckVkWin32KeyedMutexAcquireReleaseInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkWin32KeyedMutexAcquireReleaseInfoKHR moonvulkan_zcheckarrayVkWin32KeyedMutexAcquireReleaseInfoKHR
VkWin32KeyedMutexAcquireReleaseInfoKHR* zcheckarrayVkWin32KeyedMutexAcquireReleaseInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkWin32KeyedMutexAcquireReleaseInfoKHR moonvulkan_zinitVkWin32KeyedMutexAcquireReleaseInfoKHR
int zinitVkWin32KeyedMutexAcquireReleaseInfoKHR(lua_State *L, VkWin32KeyedMutexAcquireReleaseInfoKHR* p, int *err);
#define zfreeVkWin32KeyedMutexAcquireReleaseInfoKHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkWin32KeyedMutexAcquireReleaseInfoKHR(L, p, count, base) zfreearray((L), (p), sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR), (count), (base))
#define zpushVkWin32KeyedMutexAcquireReleaseInfoKHR moonvulkan_zpushVkWin32KeyedMutexAcquireReleaseInfoKHR
int zpushVkWin32KeyedMutexAcquireReleaseInfoKHR(lua_State *L, const VkWin32KeyedMutexAcquireReleaseInfoKHR *p);

#define znewVkSurfaceFullScreenExclusiveWin32InfoEXT(L, err) (VkSurfaceFullScreenExclusiveWin32InfoEXT*)znew((L), VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT), (err))
#define znewarrayVkSurfaceFullScreenExclusiveWin32InfoEXT(L, count, err) (VkSurfaceFullScreenExclusiveWin32InfoEXT*)znewarray((L), VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT), (count), (err))
#define znewchainVkSurfaceFullScreenExclusiveWin32InfoEXT moonvulkan_znewchainVkSurfaceFullScreenExclusiveWin32InfoEXT
VkSurfaceFullScreenExclusiveWin32InfoEXT* znewchainVkSurfaceFullScreenExclusiveWin32InfoEXT(lua_State *L, int *err);
#define znewchainarrayVkSurfaceFullScreenExclusiveWin32InfoEXT moonvulkan_znewchainarrayVkSurfaceFullScreenExclusiveWin32InfoEXT
VkSurfaceFullScreenExclusiveWin32InfoEXT* znewchainarrayVkSurfaceFullScreenExclusiveWin32InfoEXT(lua_State *L, uint32_t count, int *err);
#define zcheckVkSurfaceFullScreenExclusiveWin32InfoEXT moonvulkan_zcheckVkSurfaceFullScreenExclusiveWin32InfoEXT
VkSurfaceFullScreenExclusiveWin32InfoEXT* zcheckVkSurfaceFullScreenExclusiveWin32InfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSurfaceFullScreenExclusiveWin32InfoEXT moonvulkan_zcheckarrayVkSurfaceFullScreenExclusiveWin32InfoEXT
VkSurfaceFullScreenExclusiveWin32InfoEXT* zcheckarrayVkSurfaceFullScreenExclusiveWin32InfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSurfaceFullScreenExclusiveWin32InfoEXT moonvulkan_zinitVkSurfaceFullScreenExclusiveWin32InfoEXT
int zinitVkSurfaceFullScreenExclusiveWin32InfoEXT(lua_State *L, VkSurfaceFullScreenExclusiveWin32InfoEXT* p, int *err);
#define zfreeVkSurfaceFullScreenExclusiveWin32InfoEXT(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkSurfaceFullScreenExclusiveWin32InfoEXT(L, p, count, base) zfreearray((L), (p), sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT), (count), (base))
#define zpushVkSurfaceFullScreenExclusiveWin32InfoEXT moonvulkan_zpushVkSurfaceFullScreenExclusiveWin32InfoEXT
int zpushVkSurfaceFullScreenExclusiveWin32InfoEXT(lua_State *L, const VkSurfaceFullScreenExclusiveWin32InfoEXT *p);

#define znewVkFormatProperties3KHR(L, err) (VkFormatProperties3KHR*)znew((L), VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR, sizeof(VkFormatProperties3KHR), (err))
#define znewarrayVkFormatProperties3KHR(L, count, err) (VkFormatProperties3KHR*)znewarray((L), VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR, sizeof(VkFormatProperties3KHR), (count), (err))
#define znewchainVkFormatProperties3KHR moonvulkan_znewchainVkFormatProperties3KHR
VkFormatProperties3KHR* znewchainVkFormatProperties3KHR(lua_State *L, int *err);
#define znewchainarrayVkFormatProperties3KHR moonvulkan_znewchainarrayVkFormatProperties3KHR
VkFormatProperties3KHR* znewchainarrayVkFormatProperties3KHR(lua_State *L, uint32_t count, int *err);
#define zcheckVkFormatProperties3KHR moonvulkan_zcheckVkFormatProperties3KHR
VkFormatProperties3KHR* zcheckVkFormatProperties3KHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkFormatProperties3KHR moonvulkan_zcheckarrayVkFormatProperties3KHR
VkFormatProperties3KHR* zcheckarrayVkFormatProperties3KHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFormatProperties3KHR moonvulkan_zinitVkFormatProperties3KHR
int zinitVkFormatProperties3KHR(lua_State *L, VkFormatProperties3KHR* p, int *err);
#define zfreeVkFormatProperties3KHR(L, p, base) zfree((L), (p), (base))
#define zfreearrayVkFormatProperties3KHR(L, p, count, base) zfreearray((L), (p), sizeof(VkFormatProperties3KHR), (count), (base))
#define zpushVkFormatProperties3KHR moonvulkan_zpushVkFormatProperties3KHR
int zpushVkFormatProperties3KHR(lua_State *L, const VkFormatProperties3KHR *p);


#endif /* VK_USE_PLATFORM_WIN32_KHR */

/*------------------------------------------------------------------------------*
 | Untyped structs                                                              |
 *------------------------------------------------------------------------------*/

#define zclearVkViewport NULL
#define znewVkViewport(L, err) (VkViewport*)znew((L), -1, sizeof(VkViewport),(err))
#define znewarrayVkViewport(L, count, err) (VkViewport*)znewarray((L),-1, sizeof(VkViewport), (count), (err))
#define zcheckVkViewport moonvulkan_zcheckVkViewport
VkViewport* zcheckVkViewport(lua_State *L, int arg, int *err);
#define zcheckarrayVkViewport moonvulkan_zcheckarrayVkViewport
VkViewport* zcheckarrayVkViewport(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkViewport moonvulkan_zinitVkViewport
int zinitVkViewport(lua_State *L, VkViewport* p, int *err);
#define zfreeVkViewport(L, p, base) zfree_untyped((L), (p), (base), zclearVkViewport)
#define zfreearrayVkViewport(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkViewport), (count), (base), zclearVkViewport)
#define zpushVkViewport moonvulkan_zpushVkViewport
int zpushVkViewport(lua_State *L, const VkViewport *p);

#define zclearVkOffset2D NULL
#define znewVkOffset2D(L, err) (VkOffset2D*)znew((L), -1, sizeof(VkOffset2D),(err))
#define znewarrayVkOffset2D(L, count, err) (VkOffset2D*)znewarray((L),-1, sizeof(VkOffset2D), (count), (err))
#define zcheckVkOffset2D moonvulkan_zcheckVkOffset2D
VkOffset2D* zcheckVkOffset2D(lua_State *L, int arg, int *err);
#define zcheckarrayVkOffset2D moonvulkan_zcheckarrayVkOffset2D
VkOffset2D* zcheckarrayVkOffset2D(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkOffset2D moonvulkan_zinitVkOffset2D
int zinitVkOffset2D(lua_State *L, VkOffset2D* p, int *err);
#define zfreeVkOffset2D(L, p, base) zfree_untyped((L), (p), (base), zclearVkOffset2D)
#define zfreearrayVkOffset2D(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkOffset2D), (count), (base), zclearVkOffset2D)
#define zpushVkOffset2D moonvulkan_zpushVkOffset2D
int zpushVkOffset2D(lua_State *L, const VkOffset2D *p);

#define zclearVkOffset3D NULL
#define znewVkOffset3D(L, err) (VkOffset3D*)znew((L), -1, sizeof(VkOffset3D),(err))
#define znewarrayVkOffset3D(L, count, err) (VkOffset3D*)znewarray((L),-1, sizeof(VkOffset3D), (count), (err))
#define zcheckVkOffset3D moonvulkan_zcheckVkOffset3D
VkOffset3D* zcheckVkOffset3D(lua_State *L, int arg, int *err);
#define zcheckarrayVkOffset3D moonvulkan_zcheckarrayVkOffset3D
VkOffset3D* zcheckarrayVkOffset3D(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkOffset3D moonvulkan_zinitVkOffset3D
int zinitVkOffset3D(lua_State *L, VkOffset3D* p, int *err);
#define zfreeVkOffset3D(L, p, base) zfree_untyped((L), (p), (base), zclearVkOffset3D)
#define zfreearrayVkOffset3D(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkOffset3D), (count), (base), zclearVkOffset3D)
#define zpushVkOffset3D moonvulkan_zpushVkOffset3D
int zpushVkOffset3D(lua_State *L, const VkOffset3D *p);

#define zclearVkExtent2D NULL
#define znewVkExtent2D(L, err) (VkExtent2D*)znew((L), -1, sizeof(VkExtent2D),(err))
#define znewarrayVkExtent2D(L, count, err) (VkExtent2D*)znewarray((L),-1, sizeof(VkExtent2D), (count), (err))
#define zcheckVkExtent2D moonvulkan_zcheckVkExtent2D
VkExtent2D* zcheckVkExtent2D(lua_State *L, int arg, int *err);
#define zcheckarrayVkExtent2D moonvulkan_zcheckarrayVkExtent2D
VkExtent2D* zcheckarrayVkExtent2D(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExtent2D moonvulkan_zinitVkExtent2D
int zinitVkExtent2D(lua_State *L, VkExtent2D* p, int *err);
#define zfreeVkExtent2D(L, p, base) zfree_untyped((L), (p), (base), zclearVkExtent2D)
#define zfreearrayVkExtent2D(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkExtent2D), (count), (base), zclearVkExtent2D)
#define zpushVkExtent2D moonvulkan_zpushVkExtent2D
int zpushVkExtent2D(lua_State *L, const VkExtent2D *p);

#define zclearVkExtent3D NULL
#define znewVkExtent3D(L, err) (VkExtent3D*)znew((L), -1, sizeof(VkExtent3D),(err))
#define znewarrayVkExtent3D(L, count, err) (VkExtent3D*)znewarray((L),-1, sizeof(VkExtent3D), (count), (err))
#define zcheckVkExtent3D moonvulkan_zcheckVkExtent3D
VkExtent3D* zcheckVkExtent3D(lua_State *L, int arg, int *err);
#define zcheckarrayVkExtent3D moonvulkan_zcheckarrayVkExtent3D
VkExtent3D* zcheckarrayVkExtent3D(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExtent3D moonvulkan_zinitVkExtent3D
int zinitVkExtent3D(lua_State *L, VkExtent3D* p, int *err);
#define zfreeVkExtent3D(L, p, base) zfree_untyped((L), (p), (base), zclearVkExtent3D)
#define zfreearrayVkExtent3D(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkExtent3D), (count), (base), zclearVkExtent3D)
#define zpushVkExtent3D moonvulkan_zpushVkExtent3D
int zpushVkExtent3D(lua_State *L, const VkExtent3D *p);

#define zclearVkRect2D NULL
#define znewVkRect2D(L, err) (VkRect2D*)znew((L), -1, sizeof(VkRect2D),(err))
#define znewarrayVkRect2D(L, count, err) (VkRect2D*)znewarray((L),-1, sizeof(VkRect2D), (count), (err))
#define zcheckVkRect2D moonvulkan_zcheckVkRect2D
VkRect2D* zcheckVkRect2D(lua_State *L, int arg, int *err);
#define zcheckarrayVkRect2D moonvulkan_zcheckarrayVkRect2D
VkRect2D* zcheckarrayVkRect2D(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRect2D moonvulkan_zinitVkRect2D
int zinitVkRect2D(lua_State *L, VkRect2D* p, int *err);
#define zfreeVkRect2D(L, p, base) zfree_untyped((L), (p), (base), zclearVkRect2D)
#define zfreearrayVkRect2D(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkRect2D), (count), (base), zclearVkRect2D)
#define zpushVkRect2D moonvulkan_zpushVkRect2D
int zpushVkRect2D(lua_State *L, const VkRect2D *p);

#define zclearVkXYColorEXT NULL
#define znewVkXYColorEXT(L, err) (VkXYColorEXT*)znew((L), -1, sizeof(VkXYColorEXT),(err))
#define znewarrayVkXYColorEXT(L, count, err) (VkXYColorEXT*)znewarray((L),-1, sizeof(VkXYColorEXT), (count), (err))
#define zcheckVkXYColorEXT moonvulkan_zcheckVkXYColorEXT
VkXYColorEXT* zcheckVkXYColorEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkXYColorEXT moonvulkan_zcheckarrayVkXYColorEXT
VkXYColorEXT* zcheckarrayVkXYColorEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkXYColorEXT moonvulkan_zinitVkXYColorEXT
int zinitVkXYColorEXT(lua_State *L, VkXYColorEXT* p, int *err);
#define zfreeVkXYColorEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkXYColorEXT)
#define zfreearrayVkXYColorEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkXYColorEXT), (count), (base), zclearVkXYColorEXT)
#define zpushVkXYColorEXT moonvulkan_zpushVkXYColorEXT
int zpushVkXYColorEXT(lua_State *L, const VkXYColorEXT *p);

#define zclearVkComponentMapping NULL
#define znewVkComponentMapping(L, err) (VkComponentMapping*)znew((L), -1, sizeof(VkComponentMapping),(err))
#define znewarrayVkComponentMapping(L, count, err) (VkComponentMapping*)znewarray((L),-1, sizeof(VkComponentMapping), (count), (err))
#define zcheckVkComponentMapping moonvulkan_zcheckVkComponentMapping
VkComponentMapping* zcheckVkComponentMapping(lua_State *L, int arg, int *err);
#define zcheckarrayVkComponentMapping moonvulkan_zcheckarrayVkComponentMapping
VkComponentMapping* zcheckarrayVkComponentMapping(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkComponentMapping moonvulkan_zinitVkComponentMapping
int zinitVkComponentMapping(lua_State *L, VkComponentMapping* p, int *err);
#define zfreeVkComponentMapping(L, p, base) zfree_untyped((L), (p), (base), zclearVkComponentMapping)
#define zfreearrayVkComponentMapping(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkComponentMapping), (count), (base), zclearVkComponentMapping)
#define zpushVkComponentMapping moonvulkan_zpushVkComponentMapping
int zpushVkComponentMapping(lua_State *L, const VkComponentMapping *p);

#define zclearVkSampleLocationEXT NULL
#define znewVkSampleLocationEXT(L, err) (VkSampleLocationEXT*)znew((L), -1, sizeof(VkSampleLocationEXT),(err))
#define znewarrayVkSampleLocationEXT(L, count, err) (VkSampleLocationEXT*)znewarray((L),-1, sizeof(VkSampleLocationEXT), (count), (err))
#define zcheckVkSampleLocationEXT moonvulkan_zcheckVkSampleLocationEXT
VkSampleLocationEXT* zcheckVkSampleLocationEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSampleLocationEXT moonvulkan_zcheckarrayVkSampleLocationEXT
VkSampleLocationEXT* zcheckarrayVkSampleLocationEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSampleLocationEXT moonvulkan_zinitVkSampleLocationEXT
int zinitVkSampleLocationEXT(lua_State *L, VkSampleLocationEXT* p, int *err);
#define zfreeVkSampleLocationEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkSampleLocationEXT)
#define zfreearrayVkSampleLocationEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSampleLocationEXT), (count), (base), zclearVkSampleLocationEXT)
#define zpushVkSampleLocationEXT moonvulkan_zpushVkSampleLocationEXT
int zpushVkSampleLocationEXT(lua_State *L, const VkSampleLocationEXT *p);

#define zclearVkImageSubresourceRange NULL
#define znewVkImageSubresourceRange(L, err) (VkImageSubresourceRange*)znew((L), -1, sizeof(VkImageSubresourceRange),(err))
#define znewarrayVkImageSubresourceRange(L, count, err) (VkImageSubresourceRange*)znewarray((L),-1, sizeof(VkImageSubresourceRange), (count), (err))
#define zcheckVkImageSubresourceRange moonvulkan_zcheckVkImageSubresourceRange
VkImageSubresourceRange* zcheckVkImageSubresourceRange(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageSubresourceRange moonvulkan_zcheckarrayVkImageSubresourceRange
VkImageSubresourceRange* zcheckarrayVkImageSubresourceRange(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageSubresourceRange moonvulkan_zinitVkImageSubresourceRange
int zinitVkImageSubresourceRange(lua_State *L, VkImageSubresourceRange* p, int *err);
#define zfreeVkImageSubresourceRange(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageSubresourceRange)
#define zfreearrayVkImageSubresourceRange(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageSubresourceRange), (count), (base), zclearVkImageSubresourceRange)
#define zpushVkImageSubresourceRange moonvulkan_zpushVkImageSubresourceRange
int zpushVkImageSubresourceRange(lua_State *L, const VkImageSubresourceRange *p);

#define zclearVkImageSubresourceRange NULL
#define znewVkImageSubresourceRange(L, err) (VkImageSubresourceRange*)znew((L), -1, sizeof(VkImageSubresourceRange),(err))
#define znewarrayVkImageSubresourceRange(L, count, err) (VkImageSubresourceRange*)znewarray((L),-1, sizeof(VkImageSubresourceRange), (count), (err))
#define zcheckVkImageSubresourceRange moonvulkan_zcheckVkImageSubresourceRange
VkImageSubresourceRange* zcheckVkImageSubresourceRange(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageSubresourceRange moonvulkan_zcheckarrayVkImageSubresourceRange
VkImageSubresourceRange* zcheckarrayVkImageSubresourceRange(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageSubresourceRange moonvulkan_zinitVkImageSubresourceRange
int zinitVkImageSubresourceRange(lua_State *L, VkImageSubresourceRange* p, int *err);
#define zfreeVkImageSubresourceRange(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageSubresourceRange)
#define zfreearrayVkImageSubresourceRange(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageSubresourceRange), (count), (base), zclearVkImageSubresourceRange)
#define zpushVkImageSubresourceRange moonvulkan_zpushVkImageSubresourceRange
int zpushVkImageSubresourceRange(lua_State *L, const VkImageSubresourceRange *p);

#define zclearVkExtensionProperties NULL
#define znewVkExtensionProperties(L, err) (VkExtensionProperties*)znew((L), -1, sizeof(VkExtensionProperties),(err))
#define znewarrayVkExtensionProperties(L, count, err) (VkExtensionProperties*)znewarray((L),-1, sizeof(VkExtensionProperties), (count), (err))
#define zcheckVkExtensionProperties moonvulkan_zcheckVkExtensionProperties
VkExtensionProperties* zcheckVkExtensionProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkExtensionProperties moonvulkan_zcheckarrayVkExtensionProperties
VkExtensionProperties* zcheckarrayVkExtensionProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExtensionProperties moonvulkan_zinitVkExtensionProperties
int zinitVkExtensionProperties(lua_State *L, VkExtensionProperties* p, int *err);
#define zfreeVkExtensionProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkExtensionProperties)
#define zfreearrayVkExtensionProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkExtensionProperties), (count), (base), zclearVkExtensionProperties)
#define zpushVkExtensionProperties moonvulkan_zpushVkExtensionProperties
int zpushVkExtensionProperties(lua_State *L, const VkExtensionProperties *p);

#define zclearVkLayerProperties NULL
#define znewVkLayerProperties(L, err) (VkLayerProperties*)znew((L), -1, sizeof(VkLayerProperties),(err))
#define znewarrayVkLayerProperties(L, count, err) (VkLayerProperties*)znewarray((L),-1, sizeof(VkLayerProperties), (count), (err))
#define zcheckVkLayerProperties moonvulkan_zcheckVkLayerProperties
VkLayerProperties* zcheckVkLayerProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkLayerProperties moonvulkan_zcheckarrayVkLayerProperties
VkLayerProperties* zcheckarrayVkLayerProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkLayerProperties moonvulkan_zinitVkLayerProperties
int zinitVkLayerProperties(lua_State *L, VkLayerProperties* p, int *err);
#define zfreeVkLayerProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkLayerProperties)
#define zfreearrayVkLayerProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkLayerProperties), (count), (base), zclearVkLayerProperties)
#define zpushVkLayerProperties moonvulkan_zpushVkLayerProperties
int zpushVkLayerProperties(lua_State *L, const VkLayerProperties *p);

#define zclearVkClearColorValue NULL
#define znewVkClearColorValue(L, err) (VkClearColorValue*)znew((L), -1, sizeof(VkClearColorValue),(err))
#define znewarrayVkClearColorValue(L, count, err) (VkClearColorValue*)znewarray((L),-1, sizeof(VkClearColorValue), (count), (err))
#define zcheckVkClearColorValue moonvulkan_zcheckVkClearColorValue
VkClearColorValue* zcheckVkClearColorValue(lua_State *L, int arg, int *err);
#define zcheckarrayVkClearColorValue moonvulkan_zcheckarrayVkClearColorValue
VkClearColorValue* zcheckarrayVkClearColorValue(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkClearColorValue moonvulkan_zinitVkClearColorValue
int zinitVkClearColorValue(lua_State *L, VkClearColorValue* p, int *err);
#define zfreeVkClearColorValue(L, p, base) zfree_untyped((L), (p), (base), zclearVkClearColorValue)
#define zfreearrayVkClearColorValue(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkClearColorValue), (count), (base), zclearVkClearColorValue)
#define zpushVkClearColorValue moonvulkan_zpushVkClearColorValue
int zpushVkClearColorValue(lua_State *L, const VkClearColorValue *p);

#define zclearVkClearValue NULL
#define znewVkClearValue(L, err) (VkClearValue*)znew((L), -1, sizeof(VkClearValue),(err))
#define znewarrayVkClearValue(L, count, err) (VkClearValue*)znewarray((L),-1, sizeof(VkClearValue), (count), (err))
#define zcheckVkClearValue moonvulkan_zcheckVkClearValue
VkClearValue* zcheckVkClearValue(lua_State *L, int arg, int *err);
#define zcheckarrayVkClearValue moonvulkan_zcheckarrayVkClearValue
VkClearValue* zcheckarrayVkClearValue(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkClearValue moonvulkan_zinitVkClearValue
int zinitVkClearValue(lua_State *L, VkClearValue* p, int *err);
#define zfreeVkClearValue(L, p, base) zfree_untyped((L), (p), (base), zclearVkClearValue)
#define zfreearrayVkClearValue(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkClearValue), (count), (base), zclearVkClearValue)
#define zpushVkClearValue moonvulkan_zpushVkClearValue
int zpushVkClearValue(lua_State *L, const VkClearValue *p);

#define zclearVkClearAttachment NULL
#define znewVkClearAttachment(L, err) (VkClearAttachment*)znew((L), -1, sizeof(VkClearAttachment),(err))
#define znewarrayVkClearAttachment(L, count, err) (VkClearAttachment*)znewarray((L),-1, sizeof(VkClearAttachment), (count), (err))
#define zcheckVkClearAttachment moonvulkan_zcheckVkClearAttachment
VkClearAttachment* zcheckVkClearAttachment(lua_State *L, int arg, int *err);
#define zcheckarrayVkClearAttachment moonvulkan_zcheckarrayVkClearAttachment
VkClearAttachment* zcheckarrayVkClearAttachment(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkClearAttachment moonvulkan_zinitVkClearAttachment
int zinitVkClearAttachment(lua_State *L, VkClearAttachment* p, int *err);
#define zfreeVkClearAttachment(L, p, base) zfree_untyped((L), (p), (base), zclearVkClearAttachment)
#define zfreearrayVkClearAttachment(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkClearAttachment), (count), (base), zclearVkClearAttachment)
#define zpushVkClearAttachment moonvulkan_zpushVkClearAttachment
int zpushVkClearAttachment(lua_State *L, const VkClearAttachment *p);

#define zclearVkClearRect NULL
#define znewVkClearRect(L, err) (VkClearRect*)znew((L), -1, sizeof(VkClearRect),(err))
#define znewarrayVkClearRect(L, count, err) (VkClearRect*)znewarray((L),-1, sizeof(VkClearRect), (count), (err))
#define zcheckVkClearRect moonvulkan_zcheckVkClearRect
VkClearRect* zcheckVkClearRect(lua_State *L, int arg, int *err);
#define zcheckarrayVkClearRect moonvulkan_zcheckarrayVkClearRect
VkClearRect* zcheckarrayVkClearRect(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkClearRect moonvulkan_zinitVkClearRect
int zinitVkClearRect(lua_State *L, VkClearRect* p, int *err);
#define zfreeVkClearRect(L, p, base) zfree_untyped((L), (p), (base), zclearVkClearRect)
#define zfreearrayVkClearRect(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkClearRect), (count), (base), zclearVkClearRect)
#define zpushVkClearRect moonvulkan_zpushVkClearRect
int zpushVkClearRect(lua_State *L, const VkClearRect *p);

#define zclearVkImageSubresourceLayers NULL
#define znewVkImageSubresourceLayers(L, err) (VkImageSubresourceLayers*)znew((L), -1, sizeof(VkImageSubresourceLayers),(err))
#define znewarrayVkImageSubresourceLayers(L, count, err) (VkImageSubresourceLayers*)znewarray((L),-1, sizeof(VkImageSubresourceLayers), (count), (err))
#define zcheckVkImageSubresourceLayers moonvulkan_zcheckVkImageSubresourceLayers
VkImageSubresourceLayers* zcheckVkImageSubresourceLayers(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageSubresourceLayers moonvulkan_zcheckarrayVkImageSubresourceLayers
VkImageSubresourceLayers* zcheckarrayVkImageSubresourceLayers(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageSubresourceLayers moonvulkan_zinitVkImageSubresourceLayers
int zinitVkImageSubresourceLayers(lua_State *L, VkImageSubresourceLayers* p, int *err);
#define zfreeVkImageSubresourceLayers(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageSubresourceLayers)
#define zfreearrayVkImageSubresourceLayers(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageSubresourceLayers), (count), (base), zclearVkImageSubresourceLayers)
#define zpushVkImageSubresourceLayers moonvulkan_zpushVkImageSubresourceLayers
int zpushVkImageSubresourceLayers(lua_State *L, const VkImageSubresourceLayers *p);

#define zclearVkImageCopy NULL
#define znewVkImageCopy(L, err) (VkImageCopy*)znew((L), -1, sizeof(VkImageCopy),(err))
#define znewarrayVkImageCopy(L, count, err) (VkImageCopy*)znewarray((L),-1, sizeof(VkImageCopy), (count), (err))
#define zcheckVkImageCopy moonvulkan_zcheckVkImageCopy
VkImageCopy* zcheckVkImageCopy(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageCopy moonvulkan_zcheckarrayVkImageCopy
VkImageCopy* zcheckarrayVkImageCopy(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageCopy moonvulkan_zinitVkImageCopy
int zinitVkImageCopy(lua_State *L, VkImageCopy* p, int *err);
#define zfreeVkImageCopy(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageCopy)
#define zfreearrayVkImageCopy(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageCopy), (count), (base), zclearVkImageCopy)
#define zpushVkImageCopy moonvulkan_zpushVkImageCopy
int zpushVkImageCopy(lua_State *L, const VkImageCopy *p);

#define zclearVkImageBlit NULL
#define znewVkImageBlit(L, err) (VkImageBlit*)znew((L), -1, sizeof(VkImageBlit),(err))
#define znewarrayVkImageBlit(L, count, err) (VkImageBlit*)znewarray((L),-1, sizeof(VkImageBlit), (count), (err))
#define zcheckVkImageBlit moonvulkan_zcheckVkImageBlit
VkImageBlit* zcheckVkImageBlit(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageBlit moonvulkan_zcheckarrayVkImageBlit
VkImageBlit* zcheckarrayVkImageBlit(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageBlit moonvulkan_zinitVkImageBlit
int zinitVkImageBlit(lua_State *L, VkImageBlit* p, int *err);
#define zfreeVkImageBlit(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageBlit)
#define zfreearrayVkImageBlit(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageBlit), (count), (base), zclearVkImageBlit)
#define zpushVkImageBlit moonvulkan_zpushVkImageBlit
int zpushVkImageBlit(lua_State *L, const VkImageBlit *p);

#define zclearVkBufferImageCopy NULL
#define znewVkBufferImageCopy(L, err) (VkBufferImageCopy*)znew((L), -1, sizeof(VkBufferImageCopy),(err))
#define znewarrayVkBufferImageCopy(L, count, err) (VkBufferImageCopy*)znewarray((L),-1, sizeof(VkBufferImageCopy), (count), (err))
#define zcheckVkBufferImageCopy moonvulkan_zcheckVkBufferImageCopy
VkBufferImageCopy* zcheckVkBufferImageCopy(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferImageCopy moonvulkan_zcheckarrayVkBufferImageCopy
VkBufferImageCopy* zcheckarrayVkBufferImageCopy(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferImageCopy moonvulkan_zinitVkBufferImageCopy
int zinitVkBufferImageCopy(lua_State *L, VkBufferImageCopy* p, int *err);
#define zfreeVkBufferImageCopy(L, p, base) zfree_untyped((L), (p), (base), zclearVkBufferImageCopy)
#define zfreearrayVkBufferImageCopy(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkBufferImageCopy), (count), (base), zclearVkBufferImageCopy)
#define zpushVkBufferImageCopy moonvulkan_zpushVkBufferImageCopy
int zpushVkBufferImageCopy(lua_State *L, const VkBufferImageCopy *p);

#define zclearVkImageResolve NULL
#define znewVkImageResolve(L, err) (VkImageResolve*)znew((L), -1, sizeof(VkImageResolve),(err))
#define znewarrayVkImageResolve(L, count, err) (VkImageResolve*)znewarray((L),-1, sizeof(VkImageResolve), (count), (err))
#define zcheckVkImageResolve moonvulkan_zcheckVkImageResolve
VkImageResolve* zcheckVkImageResolve(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageResolve moonvulkan_zcheckarrayVkImageResolve
VkImageResolve* zcheckarrayVkImageResolve(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageResolve moonvulkan_zinitVkImageResolve
int zinitVkImageResolve(lua_State *L, VkImageResolve* p, int *err);
#define zfreeVkImageResolve(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageResolve)
#define zfreearrayVkImageResolve(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageResolve), (count), (base), zclearVkImageResolve)
#define zpushVkImageResolve moonvulkan_zpushVkImageResolve
int zpushVkImageResolve(lua_State *L, const VkImageResolve *p);

#define zclearVkBufferCopy NULL
#define znewVkBufferCopy(L, err) (VkBufferCopy*)znew((L), -1, sizeof(VkBufferCopy),(err))
#define znewarrayVkBufferCopy(L, count, err) (VkBufferCopy*)znewarray((L),-1, sizeof(VkBufferCopy), (count), (err))
#define zcheckVkBufferCopy moonvulkan_zcheckVkBufferCopy
VkBufferCopy* zcheckVkBufferCopy(lua_State *L, int arg, int *err);
#define zcheckarrayVkBufferCopy moonvulkan_zcheckarrayVkBufferCopy
VkBufferCopy* zcheckarrayVkBufferCopy(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkBufferCopy moonvulkan_zinitVkBufferCopy
int zinitVkBufferCopy(lua_State *L, VkBufferCopy* p, int *err);
#define zfreeVkBufferCopy(L, p, base) zfree_untyped((L), (p), (base), zclearVkBufferCopy)
#define zfreearrayVkBufferCopy(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkBufferCopy), (count), (base), zclearVkBufferCopy)
#define zpushVkBufferCopy moonvulkan_zpushVkBufferCopy
int zpushVkBufferCopy(lua_State *L, const VkBufferCopy *p);

#define zclearVkSparseMemoryBind NULL
#define znewVkSparseMemoryBind(L, err) (VkSparseMemoryBind*)znew((L), -1, sizeof(VkSparseMemoryBind),(err))
#define znewarrayVkSparseMemoryBind(L, count, err) (VkSparseMemoryBind*)znewarray((L),-1, sizeof(VkSparseMemoryBind), (count), (err))
#define zcheckVkSparseMemoryBind moonvulkan_zcheckVkSparseMemoryBind
VkSparseMemoryBind* zcheckVkSparseMemoryBind(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseMemoryBind moonvulkan_zcheckarrayVkSparseMemoryBind
VkSparseMemoryBind* zcheckarrayVkSparseMemoryBind(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseMemoryBind moonvulkan_zinitVkSparseMemoryBind
int zinitVkSparseMemoryBind(lua_State *L, VkSparseMemoryBind* p, int *err);
#define zfreeVkSparseMemoryBind(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseMemoryBind)
#define zfreearrayVkSparseMemoryBind(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseMemoryBind), (count), (base), zclearVkSparseMemoryBind)
#define zpushVkSparseMemoryBind moonvulkan_zpushVkSparseMemoryBind
int zpushVkSparseMemoryBind(lua_State *L, const VkSparseMemoryBind *p);

#define zclearVkImageSubresource NULL
#define znewVkImageSubresource(L, err) (VkImageSubresource*)znew((L), -1, sizeof(VkImageSubresource),(err))
#define znewarrayVkImageSubresource(L, count, err) (VkImageSubresource*)znewarray((L),-1, sizeof(VkImageSubresource), (count), (err))
#define zcheckVkImageSubresource moonvulkan_zcheckVkImageSubresource
VkImageSubresource* zcheckVkImageSubresource(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageSubresource moonvulkan_zcheckarrayVkImageSubresource
VkImageSubresource* zcheckarrayVkImageSubresource(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageSubresource moonvulkan_zinitVkImageSubresource
int zinitVkImageSubresource(lua_State *L, VkImageSubresource* p, int *err);
#define zfreeVkImageSubresource(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageSubresource)
#define zfreearrayVkImageSubresource(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageSubresource), (count), (base), zclearVkImageSubresource)
#define zpushVkImageSubresource moonvulkan_zpushVkImageSubresource
int zpushVkImageSubresource(lua_State *L, const VkImageSubresource *p);

#define zclearVkSparseImageMemoryBind NULL
#define znewVkSparseImageMemoryBind(L, err) (VkSparseImageMemoryBind*)znew((L), -1, sizeof(VkSparseImageMemoryBind),(err))
#define znewarrayVkSparseImageMemoryBind(L, count, err) (VkSparseImageMemoryBind*)znewarray((L),-1, sizeof(VkSparseImageMemoryBind), (count), (err))
#define zcheckVkSparseImageMemoryBind moonvulkan_zcheckVkSparseImageMemoryBind
VkSparseImageMemoryBind* zcheckVkSparseImageMemoryBind(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageMemoryBind moonvulkan_zcheckarrayVkSparseImageMemoryBind
VkSparseImageMemoryBind* zcheckarrayVkSparseImageMemoryBind(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageMemoryBind moonvulkan_zinitVkSparseImageMemoryBind
int zinitVkSparseImageMemoryBind(lua_State *L, VkSparseImageMemoryBind* p, int *err);
#define zfreeVkSparseImageMemoryBind(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseImageMemoryBind)
#define zfreearrayVkSparseImageMemoryBind(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseImageMemoryBind), (count), (base), zclearVkSparseImageMemoryBind)
#define zpushVkSparseImageMemoryBind moonvulkan_zpushVkSparseImageMemoryBind
int zpushVkSparseImageMemoryBind(lua_State *L, const VkSparseImageMemoryBind *p);

#define zclearVkSparseBufferMemoryBindInfo moonvulkan_zclearVkSparseBufferMemoryBindInfo 
void zclearVkSparseBufferMemoryBindInfo(lua_State *L, const void *p);
#define znewVkSparseBufferMemoryBindInfo(L, err) (VkSparseBufferMemoryBindInfo*)znew((L), -1, sizeof(VkSparseBufferMemoryBindInfo),(err))
#define znewarrayVkSparseBufferMemoryBindInfo(L, count, err) (VkSparseBufferMemoryBindInfo*)znewarray((L),-1, sizeof(VkSparseBufferMemoryBindInfo), (count), (err))
#define zcheckVkSparseBufferMemoryBindInfo moonvulkan_zcheckVkSparseBufferMemoryBindInfo
VkSparseBufferMemoryBindInfo* zcheckVkSparseBufferMemoryBindInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseBufferMemoryBindInfo moonvulkan_zcheckarrayVkSparseBufferMemoryBindInfo
VkSparseBufferMemoryBindInfo* zcheckarrayVkSparseBufferMemoryBindInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseBufferMemoryBindInfo moonvulkan_zinitVkSparseBufferMemoryBindInfo
int zinitVkSparseBufferMemoryBindInfo(lua_State *L, VkSparseBufferMemoryBindInfo* p, int *err);
#define zfreeVkSparseBufferMemoryBindInfo(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseBufferMemoryBindInfo)
#define zfreearrayVkSparseBufferMemoryBindInfo(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseBufferMemoryBindInfo), (count), (base), zclearVkSparseBufferMemoryBindInfo)
#define zpushVkSparseBufferMemoryBindInfo moonvulkan_zpushVkSparseBufferMemoryBindInfo
int zpushVkSparseBufferMemoryBindInfo(lua_State *L, const VkSparseBufferMemoryBindInfo *p);

#define zclearVkSparseImageOpaqueMemoryBindInfo moonvulkan_zclearVkSparseImageOpaqueMemoryBindInfo 
void zclearVkSparseImageOpaqueMemoryBindInfo(lua_State *L, const void *p);
#define znewVkSparseImageOpaqueMemoryBindInfo(L, err) (VkSparseImageOpaqueMemoryBindInfo*)znew((L), -1, sizeof(VkSparseImageOpaqueMemoryBindInfo),(err))
#define znewarrayVkSparseImageOpaqueMemoryBindInfo(L, count, err) (VkSparseImageOpaqueMemoryBindInfo*)znewarray((L),-1, sizeof(VkSparseImageOpaqueMemoryBindInfo), (count), (err))
#define zcheckVkSparseImageOpaqueMemoryBindInfo moonvulkan_zcheckVkSparseImageOpaqueMemoryBindInfo
VkSparseImageOpaqueMemoryBindInfo* zcheckVkSparseImageOpaqueMemoryBindInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageOpaqueMemoryBindInfo moonvulkan_zcheckarrayVkSparseImageOpaqueMemoryBindInfo
VkSparseImageOpaqueMemoryBindInfo* zcheckarrayVkSparseImageOpaqueMemoryBindInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageOpaqueMemoryBindInfo moonvulkan_zinitVkSparseImageOpaqueMemoryBindInfo
int zinitVkSparseImageOpaqueMemoryBindInfo(lua_State *L, VkSparseImageOpaqueMemoryBindInfo* p, int *err);
#define zfreeVkSparseImageOpaqueMemoryBindInfo(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseImageOpaqueMemoryBindInfo)
#define zfreearrayVkSparseImageOpaqueMemoryBindInfo(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseImageOpaqueMemoryBindInfo), (count), (base), zclearVkSparseImageOpaqueMemoryBindInfo)
#define zpushVkSparseImageOpaqueMemoryBindInfo moonvulkan_zpushVkSparseImageOpaqueMemoryBindInfo
int zpushVkSparseImageOpaqueMemoryBindInfo(lua_State *L, const VkSparseImageOpaqueMemoryBindInfo *p);

#define zclearVkSparseImageMemoryBindInfo moonvulkan_zclearVkSparseImageMemoryBindInfo 
void zclearVkSparseImageMemoryBindInfo(lua_State *L, const void *p);
#define znewVkSparseImageMemoryBindInfo(L, err) (VkSparseImageMemoryBindInfo*)znew((L), -1, sizeof(VkSparseImageMemoryBindInfo),(err))
#define znewarrayVkSparseImageMemoryBindInfo(L, count, err) (VkSparseImageMemoryBindInfo*)znewarray((L),-1, sizeof(VkSparseImageMemoryBindInfo), (count), (err))
#define zcheckVkSparseImageMemoryBindInfo moonvulkan_zcheckVkSparseImageMemoryBindInfo
VkSparseImageMemoryBindInfo* zcheckVkSparseImageMemoryBindInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageMemoryBindInfo moonvulkan_zcheckarrayVkSparseImageMemoryBindInfo
VkSparseImageMemoryBindInfo* zcheckarrayVkSparseImageMemoryBindInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageMemoryBindInfo moonvulkan_zinitVkSparseImageMemoryBindInfo
int zinitVkSparseImageMemoryBindInfo(lua_State *L, VkSparseImageMemoryBindInfo* p, int *err);
#define zfreeVkSparseImageMemoryBindInfo(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseImageMemoryBindInfo)
#define zfreearrayVkSparseImageMemoryBindInfo(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseImageMemoryBindInfo), (count), (base), zclearVkSparseImageMemoryBindInfo)
#define zpushVkSparseImageMemoryBindInfo moonvulkan_zpushVkSparseImageMemoryBindInfo
int zpushVkSparseImageMemoryBindInfo(lua_State *L, const VkSparseImageMemoryBindInfo *p);

#define zclearVkSubresourceLayout NULL
#define znewVkSubresourceLayout(L, err) (VkSubresourceLayout*)znew((L), -1, sizeof(VkSubresourceLayout),(err))
#define znewarrayVkSubresourceLayout(L, count, err) (VkSubresourceLayout*)znewarray((L),-1, sizeof(VkSubresourceLayout), (count), (err))
#define zcheckVkSubresourceLayout moonvulkan_zcheckVkSubresourceLayout
VkSubresourceLayout* zcheckVkSubresourceLayout(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubresourceLayout moonvulkan_zcheckarrayVkSubresourceLayout
VkSubresourceLayout* zcheckarrayVkSubresourceLayout(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubresourceLayout moonvulkan_zinitVkSubresourceLayout
int zinitVkSubresourceLayout(lua_State *L, VkSubresourceLayout* p, int *err);
#define zfreeVkSubresourceLayout(L, p, base) zfree_untyped((L), (p), (base), zclearVkSubresourceLayout)
#define zfreearrayVkSubresourceLayout(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSubresourceLayout), (count), (base), zclearVkSubresourceLayout)
#define zpushVkSubresourceLayout moonvulkan_zpushVkSubresourceLayout
int zpushVkSubresourceLayout(lua_State *L, const VkSubresourceLayout *p);

#define zclearVkSpecializationMapEntry NULL
#define znewVkSpecializationMapEntry(L, err) (VkSpecializationMapEntry*)znew((L), -1, sizeof(VkSpecializationMapEntry),(err))
#define znewarrayVkSpecializationMapEntry(L, count, err) (VkSpecializationMapEntry*)znewarray((L),-1, sizeof(VkSpecializationMapEntry), (count), (err))
#define zcheckVkSpecializationMapEntry moonvulkan_zcheckVkSpecializationMapEntry
VkSpecializationMapEntry* zcheckVkSpecializationMapEntry(lua_State *L, int arg, int *err);
#define zcheckarrayVkSpecializationMapEntry moonvulkan_zcheckarrayVkSpecializationMapEntry
VkSpecializationMapEntry* zcheckarrayVkSpecializationMapEntry(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSpecializationMapEntry moonvulkan_zinitVkSpecializationMapEntry
int zinitVkSpecializationMapEntry(lua_State *L, VkSpecializationMapEntry* p, int *err);
#define zfreeVkSpecializationMapEntry(L, p, base) zfree_untyped((L), (p), (base), zclearVkSpecializationMapEntry)
#define zfreearrayVkSpecializationMapEntry(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSpecializationMapEntry), (count), (base), zclearVkSpecializationMapEntry)
#define zpushVkSpecializationMapEntry moonvulkan_zpushVkSpecializationMapEntry
int zpushVkSpecializationMapEntry(lua_State *L, const VkSpecializationMapEntry *p);

#define zclearVkSpecializationInfo moonvulkan_zclearVkSpecializationInfo 
void zclearVkSpecializationInfo(lua_State *L, const void *p);
#define znewVkSpecializationInfo(L, err) (VkSpecializationInfo*)znew((L), -1, sizeof(VkSpecializationInfo),(err))
#define znewarrayVkSpecializationInfo(L, count, err) (VkSpecializationInfo*)znewarray((L),-1, sizeof(VkSpecializationInfo), (count), (err))
#define zcheckVkSpecializationInfo moonvulkan_zcheckVkSpecializationInfo
VkSpecializationInfo* zcheckVkSpecializationInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkSpecializationInfo moonvulkan_zcheckarrayVkSpecializationInfo
VkSpecializationInfo* zcheckarrayVkSpecializationInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSpecializationInfo moonvulkan_zinitVkSpecializationInfo
int zinitVkSpecializationInfo(lua_State *L, VkSpecializationInfo* p, int *err);
#define zfreeVkSpecializationInfo(L, p, base) zfree_untyped((L), (p), (base), zclearVkSpecializationInfo)
#define zfreearrayVkSpecializationInfo(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSpecializationInfo), (count), (base), zclearVkSpecializationInfo)
#define zpushVkSpecializationInfo moonvulkan_zpushVkSpecializationInfo
int zpushVkSpecializationInfo(lua_State *L, const VkSpecializationInfo *p);

#define zclearVkVertexInputBindingDescription NULL
#define znewVkVertexInputBindingDescription(L, err) (VkVertexInputBindingDescription*)znew((L), -1, sizeof(VkVertexInputBindingDescription),(err))
#define znewarrayVkVertexInputBindingDescription(L, count, err) (VkVertexInputBindingDescription*)znewarray((L),-1, sizeof(VkVertexInputBindingDescription), (count), (err))
#define zcheckVkVertexInputBindingDescription moonvulkan_zcheckVkVertexInputBindingDescription
VkVertexInputBindingDescription* zcheckVkVertexInputBindingDescription(lua_State *L, int arg, int *err);
#define zcheckarrayVkVertexInputBindingDescription moonvulkan_zcheckarrayVkVertexInputBindingDescription
VkVertexInputBindingDescription* zcheckarrayVkVertexInputBindingDescription(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkVertexInputBindingDescription moonvulkan_zinitVkVertexInputBindingDescription
int zinitVkVertexInputBindingDescription(lua_State *L, VkVertexInputBindingDescription* p, int *err);
#define zfreeVkVertexInputBindingDescription(L, p, base) zfree_untyped((L), (p), (base), zclearVkVertexInputBindingDescription)
#define zfreearrayVkVertexInputBindingDescription(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkVertexInputBindingDescription), (count), (base), zclearVkVertexInputBindingDescription)
#define zpushVkVertexInputBindingDescription moonvulkan_zpushVkVertexInputBindingDescription
int zpushVkVertexInputBindingDescription(lua_State *L, const VkVertexInputBindingDescription *p);

#define zclearVkVertexInputAttributeDescription NULL
#define znewVkVertexInputAttributeDescription(L, err) (VkVertexInputAttributeDescription*)znew((L), -1, sizeof(VkVertexInputAttributeDescription),(err))
#define znewarrayVkVertexInputAttributeDescription(L, count, err) (VkVertexInputAttributeDescription*)znewarray((L),-1, sizeof(VkVertexInputAttributeDescription), (count), (err))
#define zcheckVkVertexInputAttributeDescription moonvulkan_zcheckVkVertexInputAttributeDescription
VkVertexInputAttributeDescription* zcheckVkVertexInputAttributeDescription(lua_State *L, int arg, int *err);
#define zcheckarrayVkVertexInputAttributeDescription moonvulkan_zcheckarrayVkVertexInputAttributeDescription
VkVertexInputAttributeDescription* zcheckarrayVkVertexInputAttributeDescription(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkVertexInputAttributeDescription moonvulkan_zinitVkVertexInputAttributeDescription
int zinitVkVertexInputAttributeDescription(lua_State *L, VkVertexInputAttributeDescription* p, int *err);
#define zfreeVkVertexInputAttributeDescription(L, p, base) zfree_untyped((L), (p), (base), zclearVkVertexInputAttributeDescription)
#define zfreearrayVkVertexInputAttributeDescription(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkVertexInputAttributeDescription), (count), (base), zclearVkVertexInputAttributeDescription)
#define zpushVkVertexInputAttributeDescription moonvulkan_zpushVkVertexInputAttributeDescription
int zpushVkVertexInputAttributeDescription(lua_State *L, const VkVertexInputAttributeDescription *p);

#define zclearVkStencilOpState NULL
#define znewVkStencilOpState(L, err) (VkStencilOpState*)znew((L), -1, sizeof(VkStencilOpState),(err))
#define znewarrayVkStencilOpState(L, count, err) (VkStencilOpState*)znewarray((L),-1, sizeof(VkStencilOpState), (count), (err))
#define zcheckVkStencilOpState moonvulkan_zcheckVkStencilOpState
VkStencilOpState* zcheckVkStencilOpState(lua_State *L, int arg, int *err);
#define zcheckarrayVkStencilOpState moonvulkan_zcheckarrayVkStencilOpState
VkStencilOpState* zcheckarrayVkStencilOpState(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkStencilOpState moonvulkan_zinitVkStencilOpState
int zinitVkStencilOpState(lua_State *L, VkStencilOpState* p, int *err);
#define zfreeVkStencilOpState(L, p, base) zfree_untyped((L), (p), (base), zclearVkStencilOpState)
#define zfreearrayVkStencilOpState(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkStencilOpState), (count), (base), zclearVkStencilOpState)
#define zpushVkStencilOpState moonvulkan_zpushVkStencilOpState
int zpushVkStencilOpState(lua_State *L, const VkStencilOpState *p);

#define zclearVkPipelineColorBlendAttachmentState NULL
#define znewVkPipelineColorBlendAttachmentState(L, err) (VkPipelineColorBlendAttachmentState*)znew((L), -1, sizeof(VkPipelineColorBlendAttachmentState),(err))
#define znewarrayVkPipelineColorBlendAttachmentState(L, count, err) (VkPipelineColorBlendAttachmentState*)znewarray((L),-1, sizeof(VkPipelineColorBlendAttachmentState), (count), (err))
#define zcheckVkPipelineColorBlendAttachmentState moonvulkan_zcheckVkPipelineColorBlendAttachmentState
VkPipelineColorBlendAttachmentState* zcheckVkPipelineColorBlendAttachmentState(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineColorBlendAttachmentState moonvulkan_zcheckarrayVkPipelineColorBlendAttachmentState
VkPipelineColorBlendAttachmentState* zcheckarrayVkPipelineColorBlendAttachmentState(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineColorBlendAttachmentState moonvulkan_zinitVkPipelineColorBlendAttachmentState
int zinitVkPipelineColorBlendAttachmentState(lua_State *L, VkPipelineColorBlendAttachmentState* p, int *err);
#define zfreeVkPipelineColorBlendAttachmentState(L, p, base) zfree_untyped((L), (p), (base), zclearVkPipelineColorBlendAttachmentState)
#define zfreearrayVkPipelineColorBlendAttachmentState(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPipelineColorBlendAttachmentState), (count), (base), zclearVkPipelineColorBlendAttachmentState)
#define zpushVkPipelineColorBlendAttachmentState moonvulkan_zpushVkPipelineColorBlendAttachmentState
int zpushVkPipelineColorBlendAttachmentState(lua_State *L, const VkPipelineColorBlendAttachmentState *p);

#define zclearVkRectLayerKHR NULL
#define znewVkRectLayerKHR(L, err) (VkRectLayerKHR*)znew((L), -1, sizeof(VkRectLayerKHR),(err))
#define znewarrayVkRectLayerKHR(L, count, err) (VkRectLayerKHR*)znewarray((L),-1, sizeof(VkRectLayerKHR), (count), (err))
#define zcheckVkRectLayerKHR moonvulkan_zcheckVkRectLayerKHR
VkRectLayerKHR* zcheckVkRectLayerKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkRectLayerKHR moonvulkan_zcheckarrayVkRectLayerKHR
VkRectLayerKHR* zcheckarrayVkRectLayerKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkRectLayerKHR moonvulkan_zinitVkRectLayerKHR
int zinitVkRectLayerKHR(lua_State *L, VkRectLayerKHR* p, int *err);
#define zfreeVkRectLayerKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkRectLayerKHR)
#define zfreearrayVkRectLayerKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkRectLayerKHR), (count), (base), zclearVkRectLayerKHR)
#define zpushVkRectLayerKHR moonvulkan_zpushVkRectLayerKHR
int zpushVkRectLayerKHR(lua_State *L, const VkRectLayerKHR *p);

#define zclearVkPresentRegionKHR moonvulkan_zclearVkPresentRegionKHR 
void zclearVkPresentRegionKHR(lua_State *L, const void *p);
#define znewVkPresentRegionKHR(L, err) (VkPresentRegionKHR*)znew((L), -1, sizeof(VkPresentRegionKHR),(err))
#define znewarrayVkPresentRegionKHR(L, count, err) (VkPresentRegionKHR*)znewarray((L),-1, sizeof(VkPresentRegionKHR), (count), (err))
#define zcheckVkPresentRegionKHR moonvulkan_zcheckVkPresentRegionKHR
VkPresentRegionKHR* zcheckVkPresentRegionKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPresentRegionKHR moonvulkan_zcheckarrayVkPresentRegionKHR
VkPresentRegionKHR* zcheckarrayVkPresentRegionKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPresentRegionKHR moonvulkan_zinitVkPresentRegionKHR
int zinitVkPresentRegionKHR(lua_State *L, VkPresentRegionKHR* p, int *err);
#define zfreeVkPresentRegionKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkPresentRegionKHR)
#define zfreearrayVkPresentRegionKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPresentRegionKHR), (count), (base), zclearVkPresentRegionKHR)
#define zpushVkPresentRegionKHR moonvulkan_zpushVkPresentRegionKHR
int zpushVkPresentRegionKHR(lua_State *L, const VkPresentRegionKHR *p);

#define zclearVkDescriptorImageInfo NULL
#define znewVkDescriptorImageInfo(L, err) (VkDescriptorImageInfo*)znew((L), -1, sizeof(VkDescriptorImageInfo),(err))
#define znewarrayVkDescriptorImageInfo(L, count, err) (VkDescriptorImageInfo*)znewarray((L),-1, sizeof(VkDescriptorImageInfo), (count), (err))
#define zcheckVkDescriptorImageInfo moonvulkan_zcheckVkDescriptorImageInfo
VkDescriptorImageInfo* zcheckVkDescriptorImageInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorImageInfo moonvulkan_zcheckarrayVkDescriptorImageInfo
VkDescriptorImageInfo* zcheckarrayVkDescriptorImageInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorImageInfo moonvulkan_zinitVkDescriptorImageInfo
int zinitVkDescriptorImageInfo(lua_State *L, VkDescriptorImageInfo* p, int *err);
#define zfreeVkDescriptorImageInfo(L, p, base) zfree_untyped((L), (p), (base), zclearVkDescriptorImageInfo)
#define zfreearrayVkDescriptorImageInfo(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDescriptorImageInfo), (count), (base), zclearVkDescriptorImageInfo)
#define zpushVkDescriptorImageInfo moonvulkan_zpushVkDescriptorImageInfo
int zpushVkDescriptorImageInfo(lua_State *L, const VkDescriptorImageInfo *p);

#define zclearVkDescriptorBufferInfo NULL
#define znewVkDescriptorBufferInfo(L, err) (VkDescriptorBufferInfo*)znew((L), -1, sizeof(VkDescriptorBufferInfo),(err))
#define znewarrayVkDescriptorBufferInfo(L, count, err) (VkDescriptorBufferInfo*)znewarray((L),-1, sizeof(VkDescriptorBufferInfo), (count), (err))
#define zcheckVkDescriptorBufferInfo moonvulkan_zcheckVkDescriptorBufferInfo
VkDescriptorBufferInfo* zcheckVkDescriptorBufferInfo(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorBufferInfo moonvulkan_zcheckarrayVkDescriptorBufferInfo
VkDescriptorBufferInfo* zcheckarrayVkDescriptorBufferInfo(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorBufferInfo moonvulkan_zinitVkDescriptorBufferInfo
int zinitVkDescriptorBufferInfo(lua_State *L, VkDescriptorBufferInfo* p, int *err);
#define zfreeVkDescriptorBufferInfo(L, p, base) zfree_untyped((L), (p), (base), zclearVkDescriptorBufferInfo)
#define zfreearrayVkDescriptorBufferInfo(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDescriptorBufferInfo), (count), (base), zclearVkDescriptorBufferInfo)
#define zpushVkDescriptorBufferInfo moonvulkan_zpushVkDescriptorBufferInfo
int zpushVkDescriptorBufferInfo(lua_State *L, const VkDescriptorBufferInfo *p);

#define zclearVkDisplayModeParametersKHR NULL
#define znewVkDisplayModeParametersKHR(L, err) (VkDisplayModeParametersKHR*)znew((L), -1, sizeof(VkDisplayModeParametersKHR),(err))
#define znewarrayVkDisplayModeParametersKHR(L, count, err) (VkDisplayModeParametersKHR*)znewarray((L),-1, sizeof(VkDisplayModeParametersKHR), (count), (err))
#define zcheckVkDisplayModeParametersKHR moonvulkan_zcheckVkDisplayModeParametersKHR
VkDisplayModeParametersKHR* zcheckVkDisplayModeParametersKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayModeParametersKHR moonvulkan_zcheckarrayVkDisplayModeParametersKHR
VkDisplayModeParametersKHR* zcheckarrayVkDisplayModeParametersKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayModeParametersKHR moonvulkan_zinitVkDisplayModeParametersKHR
int zinitVkDisplayModeParametersKHR(lua_State *L, VkDisplayModeParametersKHR* p, int *err);
#define zfreeVkDisplayModeParametersKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkDisplayModeParametersKHR)
#define zfreearrayVkDisplayModeParametersKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDisplayModeParametersKHR), (count), (base), zclearVkDisplayModeParametersKHR)
#define zpushVkDisplayModeParametersKHR moonvulkan_zpushVkDisplayModeParametersKHR
int zpushVkDisplayModeParametersKHR(lua_State *L, const VkDisplayModeParametersKHR *p);

#define zclearVkDisplayModePropertiesKHR NULL
#define znewVkDisplayModePropertiesKHR(L, err) (VkDisplayModePropertiesKHR*)znew((L), -1, sizeof(VkDisplayModePropertiesKHR),(err))
#define znewarrayVkDisplayModePropertiesKHR(L, count, err) (VkDisplayModePropertiesKHR*)znewarray((L),-1, sizeof(VkDisplayModePropertiesKHR), (count), (err))
#define zcheckVkDisplayModePropertiesKHR moonvulkan_zcheckVkDisplayModePropertiesKHR
VkDisplayModePropertiesKHR* zcheckVkDisplayModePropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayModePropertiesKHR moonvulkan_zcheckarrayVkDisplayModePropertiesKHR
VkDisplayModePropertiesKHR* zcheckarrayVkDisplayModePropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayModePropertiesKHR moonvulkan_zinitVkDisplayModePropertiesKHR
int zinitVkDisplayModePropertiesKHR(lua_State *L, VkDisplayModePropertiesKHR* p, int *err);
#define zfreeVkDisplayModePropertiesKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkDisplayModePropertiesKHR)
#define zfreearrayVkDisplayModePropertiesKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDisplayModePropertiesKHR), (count), (base), zclearVkDisplayModePropertiesKHR)
#define zpushVkDisplayModePropertiesKHR moonvulkan_zpushVkDisplayModePropertiesKHR
int zpushVkDisplayModePropertiesKHR(lua_State *L, const VkDisplayModePropertiesKHR *p);

#define zclearVkDisplayPlaneCapabilitiesKHR NULL
#define znewVkDisplayPlaneCapabilitiesKHR(L, err) (VkDisplayPlaneCapabilitiesKHR*)znew((L), -1, sizeof(VkDisplayPlaneCapabilitiesKHR),(err))
#define znewarrayVkDisplayPlaneCapabilitiesKHR(L, count, err) (VkDisplayPlaneCapabilitiesKHR*)znewarray((L),-1, sizeof(VkDisplayPlaneCapabilitiesKHR), (count), (err))
#define zcheckVkDisplayPlaneCapabilitiesKHR moonvulkan_zcheckVkDisplayPlaneCapabilitiesKHR
VkDisplayPlaneCapabilitiesKHR* zcheckVkDisplayPlaneCapabilitiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPlaneCapabilitiesKHR moonvulkan_zcheckarrayVkDisplayPlaneCapabilitiesKHR
VkDisplayPlaneCapabilitiesKHR* zcheckarrayVkDisplayPlaneCapabilitiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPlaneCapabilitiesKHR moonvulkan_zinitVkDisplayPlaneCapabilitiesKHR
int zinitVkDisplayPlaneCapabilitiesKHR(lua_State *L, VkDisplayPlaneCapabilitiesKHR* p, int *err);
#define zfreeVkDisplayPlaneCapabilitiesKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkDisplayPlaneCapabilitiesKHR)
#define zfreearrayVkDisplayPlaneCapabilitiesKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDisplayPlaneCapabilitiesKHR), (count), (base), zclearVkDisplayPlaneCapabilitiesKHR)
#define zpushVkDisplayPlaneCapabilitiesKHR moonvulkan_zpushVkDisplayPlaneCapabilitiesKHR
int zpushVkDisplayPlaneCapabilitiesKHR(lua_State *L, const VkDisplayPlaneCapabilitiesKHR *p);

#define zclearVkDescriptorUpdateTemplateEntry NULL
#define znewVkDescriptorUpdateTemplateEntry(L, err) (VkDescriptorUpdateTemplateEntry*)znew((L), -1, sizeof(VkDescriptorUpdateTemplateEntry),(err))
#define znewarrayVkDescriptorUpdateTemplateEntry(L, count, err) (VkDescriptorUpdateTemplateEntry*)znewarray((L),-1, sizeof(VkDescriptorUpdateTemplateEntry), (count), (err))
#define zcheckVkDescriptorUpdateTemplateEntry moonvulkan_zcheckVkDescriptorUpdateTemplateEntry
VkDescriptorUpdateTemplateEntry* zcheckVkDescriptorUpdateTemplateEntry(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorUpdateTemplateEntry moonvulkan_zcheckarrayVkDescriptorUpdateTemplateEntry
VkDescriptorUpdateTemplateEntry* zcheckarrayVkDescriptorUpdateTemplateEntry(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorUpdateTemplateEntry moonvulkan_zinitVkDescriptorUpdateTemplateEntry
int zinitVkDescriptorUpdateTemplateEntry(lua_State *L, VkDescriptorUpdateTemplateEntry* p, int *err);
#define zfreeVkDescriptorUpdateTemplateEntry(L, p, base) zfree_untyped((L), (p), (base), zclearVkDescriptorUpdateTemplateEntry)
#define zfreearrayVkDescriptorUpdateTemplateEntry(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDescriptorUpdateTemplateEntry), (count), (base), zclearVkDescriptorUpdateTemplateEntry)
#define zpushVkDescriptorUpdateTemplateEntry moonvulkan_zpushVkDescriptorUpdateTemplateEntry
int zpushVkDescriptorUpdateTemplateEntry(lua_State *L, const VkDescriptorUpdateTemplateEntry *p);

#define zclearVkAttachmentDescription NULL
#define znewVkAttachmentDescription(L, err) (VkAttachmentDescription*)znew((L), -1, sizeof(VkAttachmentDescription),(err))
#define znewarrayVkAttachmentDescription(L, count, err) (VkAttachmentDescription*)znewarray((L),-1, sizeof(VkAttachmentDescription), (count), (err))
#define zcheckVkAttachmentDescription moonvulkan_zcheckVkAttachmentDescription
VkAttachmentDescription* zcheckVkAttachmentDescription(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentDescription moonvulkan_zcheckarrayVkAttachmentDescription
VkAttachmentDescription* zcheckarrayVkAttachmentDescription(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentDescription moonvulkan_zinitVkAttachmentDescription
int zinitVkAttachmentDescription(lua_State *L, VkAttachmentDescription* p, int *err);
#define zfreeVkAttachmentDescription(L, p, base) zfree_untyped((L), (p), (base), zclearVkAttachmentDescription)
#define zfreearrayVkAttachmentDescription(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkAttachmentDescription), (count), (base), zclearVkAttachmentDescription)
#define zpushVkAttachmentDescription moonvulkan_zpushVkAttachmentDescription
int zpushVkAttachmentDescription(lua_State *L, const VkAttachmentDescription *p);

#define zclearVkSubpassDependency NULL
#define znewVkSubpassDependency(L, err) (VkSubpassDependency*)znew((L), -1, sizeof(VkSubpassDependency),(err))
#define znewarrayVkSubpassDependency(L, count, err) (VkSubpassDependency*)znewarray((L),-1, sizeof(VkSubpassDependency), (count), (err))
#define zcheckVkSubpassDependency moonvulkan_zcheckVkSubpassDependency
VkSubpassDependency* zcheckVkSubpassDependency(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassDependency moonvulkan_zcheckarrayVkSubpassDependency
VkSubpassDependency* zcheckarrayVkSubpassDependency(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassDependency moonvulkan_zinitVkSubpassDependency
int zinitVkSubpassDependency(lua_State *L, VkSubpassDependency* p, int *err);
#define zfreeVkSubpassDependency(L, p, base) zfree_untyped((L), (p), (base), zclearVkSubpassDependency)
#define zfreearrayVkSubpassDependency(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSubpassDependency), (count), (base), zclearVkSubpassDependency)
#define zpushVkSubpassDependency moonvulkan_zpushVkSubpassDependency
int zpushVkSubpassDependency(lua_State *L, const VkSubpassDependency *p);

#define zclearVkAttachmentReference NULL
#define znewVkAttachmentReference(L, err) (VkAttachmentReference*)znew((L), -1, sizeof(VkAttachmentReference),(err))
#define znewarrayVkAttachmentReference(L, count, err) (VkAttachmentReference*)znewarray((L),-1, sizeof(VkAttachmentReference), (count), (err))
#define zcheckVkAttachmentReference moonvulkan_zcheckVkAttachmentReference
VkAttachmentReference* zcheckVkAttachmentReference(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentReference moonvulkan_zcheckarrayVkAttachmentReference
VkAttachmentReference* zcheckarrayVkAttachmentReference(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentReference moonvulkan_zinitVkAttachmentReference
int zinitVkAttachmentReference(lua_State *L, VkAttachmentReference* p, int *err);
#define zfreeVkAttachmentReference(L, p, base) zfree_untyped((L), (p), (base), zclearVkAttachmentReference)
#define zfreearrayVkAttachmentReference(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkAttachmentReference), (count), (base), zclearVkAttachmentReference)
#define zpushVkAttachmentReference moonvulkan_zpushVkAttachmentReference
int zpushVkAttachmentReference(lua_State *L, const VkAttachmentReference *p);

#define zclearVkDescriptorPoolSize NULL
#define znewVkDescriptorPoolSize(L, err) (VkDescriptorPoolSize*)znew((L), -1, sizeof(VkDescriptorPoolSize),(err))
#define znewarrayVkDescriptorPoolSize(L, count, err) (VkDescriptorPoolSize*)znewarray((L),-1, sizeof(VkDescriptorPoolSize), (count), (err))
#define zcheckVkDescriptorPoolSize moonvulkan_zcheckVkDescriptorPoolSize
VkDescriptorPoolSize* zcheckVkDescriptorPoolSize(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorPoolSize moonvulkan_zcheckarrayVkDescriptorPoolSize
VkDescriptorPoolSize* zcheckarrayVkDescriptorPoolSize(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorPoolSize moonvulkan_zinitVkDescriptorPoolSize
int zinitVkDescriptorPoolSize(lua_State *L, VkDescriptorPoolSize* p, int *err);
#define zfreeVkDescriptorPoolSize(L, p, base) zfree_untyped((L), (p), (base), zclearVkDescriptorPoolSize)
#define zfreearrayVkDescriptorPoolSize(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDescriptorPoolSize), (count), (base), zclearVkDescriptorPoolSize)
#define zpushVkDescriptorPoolSize moonvulkan_zpushVkDescriptorPoolSize
int zpushVkDescriptorPoolSize(lua_State *L, const VkDescriptorPoolSize *p);

#define zclearVkPushConstantRange NULL
#define znewVkPushConstantRange(L, err) (VkPushConstantRange*)znew((L), -1, sizeof(VkPushConstantRange),(err))
#define znewarrayVkPushConstantRange(L, count, err) (VkPushConstantRange*)znewarray((L),-1, sizeof(VkPushConstantRange), (count), (err))
#define zcheckVkPushConstantRange moonvulkan_zcheckVkPushConstantRange
VkPushConstantRange* zcheckVkPushConstantRange(lua_State *L, int arg, int *err);
#define zcheckarrayVkPushConstantRange moonvulkan_zcheckarrayVkPushConstantRange
VkPushConstantRange* zcheckarrayVkPushConstantRange(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPushConstantRange moonvulkan_zinitVkPushConstantRange
int zinitVkPushConstantRange(lua_State *L, VkPushConstantRange* p, int *err);
#define zfreeVkPushConstantRange(L, p, base) zfree_untyped((L), (p), (base), zclearVkPushConstantRange)
#define zfreearrayVkPushConstantRange(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPushConstantRange), (count), (base), zclearVkPushConstantRange)
#define zpushVkPushConstantRange moonvulkan_zpushVkPushConstantRange
int zpushVkPushConstantRange(lua_State *L, const VkPushConstantRange *p);

#define zclearVkSubpassDescription moonvulkan_zclearVkSubpassDescription 
void zclearVkSubpassDescription(lua_State *L, const void *p);
#define znewVkSubpassDescription(L, err) (VkSubpassDescription*)znew((L), -1, sizeof(VkSubpassDescription),(err))
#define znewarrayVkSubpassDescription(L, count, err) (VkSubpassDescription*)znewarray((L),-1, sizeof(VkSubpassDescription), (count), (err))
#define zcheckVkSubpassDescription moonvulkan_zcheckVkSubpassDescription
VkSubpassDescription* zcheckVkSubpassDescription(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassDescription moonvulkan_zcheckarrayVkSubpassDescription
VkSubpassDescription* zcheckarrayVkSubpassDescription(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassDescription moonvulkan_zinitVkSubpassDescription
int zinitVkSubpassDescription(lua_State *L, VkSubpassDescription* p, int *err);
#define zfreeVkSubpassDescription(L, p, base) zfree_untyped((L), (p), (base), zclearVkSubpassDescription)
#define zfreearrayVkSubpassDescription(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSubpassDescription), (count), (base), zclearVkSubpassDescription)
#define zpushVkSubpassDescription moonvulkan_zpushVkSubpassDescription
int zpushVkSubpassDescription(lua_State *L, const VkSubpassDescription *p);

#define zclearVkPhysicalDeviceFeatures NULL
#define znewVkPhysicalDeviceFeatures(L, err) (VkPhysicalDeviceFeatures*)znew((L), -1, sizeof(VkPhysicalDeviceFeatures),(err))
#define znewarrayVkPhysicalDeviceFeatures(L, count, err) (VkPhysicalDeviceFeatures*)znewarray((L),-1, sizeof(VkPhysicalDeviceFeatures), (count), (err))
#define zcheckVkPhysicalDeviceFeatures moonvulkan_zcheckVkPhysicalDeviceFeatures
VkPhysicalDeviceFeatures* zcheckVkPhysicalDeviceFeatures(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceFeatures moonvulkan_zcheckarrayVkPhysicalDeviceFeatures
VkPhysicalDeviceFeatures* zcheckarrayVkPhysicalDeviceFeatures(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceFeatures moonvulkan_zinitVkPhysicalDeviceFeatures
int zinitVkPhysicalDeviceFeatures(lua_State *L, VkPhysicalDeviceFeatures* p, int *err);
#define zfreeVkPhysicalDeviceFeatures(L, p, base) zfree_untyped((L), (p), (base), zclearVkPhysicalDeviceFeatures)
#define zfreearrayVkPhysicalDeviceFeatures(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPhysicalDeviceFeatures), (count), (base), zclearVkPhysicalDeviceFeatures)
#define zpushVkPhysicalDeviceFeatures moonvulkan_zpushVkPhysicalDeviceFeatures
int zpushVkPhysicalDeviceFeatures(lua_State *L, const VkPhysicalDeviceFeatures *p);

#define zclearVkPhysicalDeviceLimits NULL
#define znewVkPhysicalDeviceLimits(L, err) (VkPhysicalDeviceLimits*)znew((L), -1, sizeof(VkPhysicalDeviceLimits),(err))
#define znewarrayVkPhysicalDeviceLimits(L, count, err) (VkPhysicalDeviceLimits*)znewarray((L),-1, sizeof(VkPhysicalDeviceLimits), (count), (err))
#define zcheckVkPhysicalDeviceLimits moonvulkan_zcheckVkPhysicalDeviceLimits
VkPhysicalDeviceLimits* zcheckVkPhysicalDeviceLimits(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceLimits moonvulkan_zcheckarrayVkPhysicalDeviceLimits
VkPhysicalDeviceLimits* zcheckarrayVkPhysicalDeviceLimits(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceLimits moonvulkan_zinitVkPhysicalDeviceLimits
int zinitVkPhysicalDeviceLimits(lua_State *L, VkPhysicalDeviceLimits* p, int *err);
#define zfreeVkPhysicalDeviceLimits(L, p, base) zfree_untyped((L), (p), (base), zclearVkPhysicalDeviceLimits)
#define zfreearrayVkPhysicalDeviceLimits(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPhysicalDeviceLimits), (count), (base), zclearVkPhysicalDeviceLimits)
#define zpushVkPhysicalDeviceLimits moonvulkan_zpushVkPhysicalDeviceLimits
int zpushVkPhysicalDeviceLimits(lua_State *L, const VkPhysicalDeviceLimits *p);

#define zclearVkPhysicalDeviceSparseProperties NULL
#define znewVkPhysicalDeviceSparseProperties(L, err) (VkPhysicalDeviceSparseProperties*)znew((L), -1, sizeof(VkPhysicalDeviceSparseProperties),(err))
#define znewarrayVkPhysicalDeviceSparseProperties(L, count, err) (VkPhysicalDeviceSparseProperties*)znewarray((L),-1, sizeof(VkPhysicalDeviceSparseProperties), (count), (err))
#define zcheckVkPhysicalDeviceSparseProperties moonvulkan_zcheckVkPhysicalDeviceSparseProperties
VkPhysicalDeviceSparseProperties* zcheckVkPhysicalDeviceSparseProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceSparseProperties moonvulkan_zcheckarrayVkPhysicalDeviceSparseProperties
VkPhysicalDeviceSparseProperties* zcheckarrayVkPhysicalDeviceSparseProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceSparseProperties moonvulkan_zinitVkPhysicalDeviceSparseProperties
int zinitVkPhysicalDeviceSparseProperties(lua_State *L, VkPhysicalDeviceSparseProperties* p, int *err);
#define zfreeVkPhysicalDeviceSparseProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkPhysicalDeviceSparseProperties)
#define zfreearrayVkPhysicalDeviceSparseProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPhysicalDeviceSparseProperties), (count), (base), zclearVkPhysicalDeviceSparseProperties)
#define zpushVkPhysicalDeviceSparseProperties moonvulkan_zpushVkPhysicalDeviceSparseProperties
int zpushVkPhysicalDeviceSparseProperties(lua_State *L, const VkPhysicalDeviceSparseProperties *p);

#define zclearVkPhysicalDeviceProperties NULL
#define znewVkPhysicalDeviceProperties(L, err) (VkPhysicalDeviceProperties*)znew((L), -1, sizeof(VkPhysicalDeviceProperties),(err))
#define znewarrayVkPhysicalDeviceProperties(L, count, err) (VkPhysicalDeviceProperties*)znewarray((L),-1, sizeof(VkPhysicalDeviceProperties), (count), (err))
#define zcheckVkPhysicalDeviceProperties moonvulkan_zcheckVkPhysicalDeviceProperties
VkPhysicalDeviceProperties* zcheckVkPhysicalDeviceProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceProperties moonvulkan_zcheckarrayVkPhysicalDeviceProperties
VkPhysicalDeviceProperties* zcheckarrayVkPhysicalDeviceProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceProperties moonvulkan_zinitVkPhysicalDeviceProperties
int zinitVkPhysicalDeviceProperties(lua_State *L, VkPhysicalDeviceProperties* p, int *err);
#define zfreeVkPhysicalDeviceProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkPhysicalDeviceProperties)
#define zfreearrayVkPhysicalDeviceProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPhysicalDeviceProperties), (count), (base), zclearVkPhysicalDeviceProperties)
#define zpushVkPhysicalDeviceProperties moonvulkan_zpushVkPhysicalDeviceProperties
int zpushVkPhysicalDeviceProperties(lua_State *L, const VkPhysicalDeviceProperties *p);

#define zclearVkInputAttachmentAspectReference NULL
#define znewVkInputAttachmentAspectReference(L, err) (VkInputAttachmentAspectReference*)znew((L), -1, sizeof(VkInputAttachmentAspectReference),(err))
#define znewarrayVkInputAttachmentAspectReference(L, count, err) (VkInputAttachmentAspectReference*)znewarray((L),-1, sizeof(VkInputAttachmentAspectReference), (count), (err))
#define zcheckVkInputAttachmentAspectReference moonvulkan_zcheckVkInputAttachmentAspectReference
VkInputAttachmentAspectReference* zcheckVkInputAttachmentAspectReference(lua_State *L, int arg, int *err);
#define zcheckarrayVkInputAttachmentAspectReference moonvulkan_zcheckarrayVkInputAttachmentAspectReference
VkInputAttachmentAspectReference* zcheckarrayVkInputAttachmentAspectReference(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkInputAttachmentAspectReference moonvulkan_zinitVkInputAttachmentAspectReference
int zinitVkInputAttachmentAspectReference(lua_State *L, VkInputAttachmentAspectReference* p, int *err);
#define zfreeVkInputAttachmentAspectReference(L, p, base) zfree_untyped((L), (p), (base), zclearVkInputAttachmentAspectReference)
#define zfreearrayVkInputAttachmentAspectReference(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkInputAttachmentAspectReference), (count), (base), zclearVkInputAttachmentAspectReference)
#define zpushVkInputAttachmentAspectReference moonvulkan_zpushVkInputAttachmentAspectReference
int zpushVkInputAttachmentAspectReference(lua_State *L, const VkInputAttachmentAspectReference *p);

#define zclearVkAttachmentSampleLocationsEXT moonvulkan_zclearVkAttachmentSampleLocationsEXT 
void zclearVkAttachmentSampleLocationsEXT(lua_State *L, const void *p);
#define znewVkAttachmentSampleLocationsEXT(L, err) (VkAttachmentSampleLocationsEXT*)znew((L), -1, sizeof(VkAttachmentSampleLocationsEXT),(err))
#define znewarrayVkAttachmentSampleLocationsEXT(L, count, err) (VkAttachmentSampleLocationsEXT*)znewarray((L),-1, sizeof(VkAttachmentSampleLocationsEXT), (count), (err))
#define zcheckVkAttachmentSampleLocationsEXT moonvulkan_zcheckVkAttachmentSampleLocationsEXT
VkAttachmentSampleLocationsEXT* zcheckVkAttachmentSampleLocationsEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkAttachmentSampleLocationsEXT moonvulkan_zcheckarrayVkAttachmentSampleLocationsEXT
VkAttachmentSampleLocationsEXT* zcheckarrayVkAttachmentSampleLocationsEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAttachmentSampleLocationsEXT moonvulkan_zinitVkAttachmentSampleLocationsEXT
int zinitVkAttachmentSampleLocationsEXT(lua_State *L, VkAttachmentSampleLocationsEXT* p, int *err);
#define zfreeVkAttachmentSampleLocationsEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkAttachmentSampleLocationsEXT)
#define zfreearrayVkAttachmentSampleLocationsEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkAttachmentSampleLocationsEXT), (count), (base), zclearVkAttachmentSampleLocationsEXT)
#define zpushVkAttachmentSampleLocationsEXT moonvulkan_zpushVkAttachmentSampleLocationsEXT
int zpushVkAttachmentSampleLocationsEXT(lua_State *L, const VkAttachmentSampleLocationsEXT *p);

#define zclearVkSubpassSampleLocationsEXT moonvulkan_zclearVkSubpassSampleLocationsEXT 
void zclearVkSubpassSampleLocationsEXT(lua_State *L, const void *p);
#define znewVkSubpassSampleLocationsEXT(L, err) (VkSubpassSampleLocationsEXT*)znew((L), -1, sizeof(VkSubpassSampleLocationsEXT),(err))
#define znewarrayVkSubpassSampleLocationsEXT(L, count, err) (VkSubpassSampleLocationsEXT*)znewarray((L),-1, sizeof(VkSubpassSampleLocationsEXT), (count), (err))
#define zcheckVkSubpassSampleLocationsEXT moonvulkan_zcheckVkSubpassSampleLocationsEXT
VkSubpassSampleLocationsEXT* zcheckVkSubpassSampleLocationsEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkSubpassSampleLocationsEXT moonvulkan_zcheckarrayVkSubpassSampleLocationsEXT
VkSubpassSampleLocationsEXT* zcheckarrayVkSubpassSampleLocationsEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSubpassSampleLocationsEXT moonvulkan_zinitVkSubpassSampleLocationsEXT
int zinitVkSubpassSampleLocationsEXT(lua_State *L, VkSubpassSampleLocationsEXT* p, int *err);
#define zfreeVkSubpassSampleLocationsEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkSubpassSampleLocationsEXT)
#define zfreearrayVkSubpassSampleLocationsEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSubpassSampleLocationsEXT), (count), (base), zclearVkSubpassSampleLocationsEXT)
#define zpushVkSubpassSampleLocationsEXT moonvulkan_zpushVkSubpassSampleLocationsEXT
int zpushVkSubpassSampleLocationsEXT(lua_State *L, const VkSubpassSampleLocationsEXT *p);

#define zclearVkFormatProperties NULL
#define znewVkFormatProperties(L, err) (VkFormatProperties*)znew((L), -1, sizeof(VkFormatProperties),(err))
#define znewarrayVkFormatProperties(L, count, err) (VkFormatProperties*)znewarray((L),-1, sizeof(VkFormatProperties), (count), (err))
#define zcheckVkFormatProperties moonvulkan_zcheckVkFormatProperties
VkFormatProperties* zcheckVkFormatProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkFormatProperties moonvulkan_zcheckarrayVkFormatProperties
VkFormatProperties* zcheckarrayVkFormatProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkFormatProperties moonvulkan_zinitVkFormatProperties
int zinitVkFormatProperties(lua_State *L, VkFormatProperties* p, int *err);
#define zfreeVkFormatProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkFormatProperties)
#define zfreearrayVkFormatProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkFormatProperties), (count), (base), zclearVkFormatProperties)
#define zpushVkFormatProperties moonvulkan_zpushVkFormatProperties
int zpushVkFormatProperties(lua_State *L, const VkFormatProperties *p);

#define zclearVkImageFormatProperties NULL
#define znewVkImageFormatProperties(L, err) (VkImageFormatProperties*)znew((L), -1, sizeof(VkImageFormatProperties),(err))
#define znewarrayVkImageFormatProperties(L, count, err) (VkImageFormatProperties*)znewarray((L),-1, sizeof(VkImageFormatProperties), (count), (err))
#define zcheckVkImageFormatProperties moonvulkan_zcheckVkImageFormatProperties
VkImageFormatProperties* zcheckVkImageFormatProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkImageFormatProperties moonvulkan_zcheckarrayVkImageFormatProperties
VkImageFormatProperties* zcheckarrayVkImageFormatProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkImageFormatProperties moonvulkan_zinitVkImageFormatProperties
int zinitVkImageFormatProperties(lua_State *L, VkImageFormatProperties* p, int *err);
#define zfreeVkImageFormatProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkImageFormatProperties)
#define zfreearrayVkImageFormatProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkImageFormatProperties), (count), (base), zclearVkImageFormatProperties)
#define zpushVkImageFormatProperties moonvulkan_zpushVkImageFormatProperties
int zpushVkImageFormatProperties(lua_State *L, const VkImageFormatProperties *p);

#define zclearVkSparseImageFormatProperties NULL
#define znewVkSparseImageFormatProperties(L, err) (VkSparseImageFormatProperties*)znew((L), -1, sizeof(VkSparseImageFormatProperties),(err))
#define znewarrayVkSparseImageFormatProperties(L, count, err) (VkSparseImageFormatProperties*)znewarray((L),-1, sizeof(VkSparseImageFormatProperties), (count), (err))
#define zcheckVkSparseImageFormatProperties moonvulkan_zcheckVkSparseImageFormatProperties
VkSparseImageFormatProperties* zcheckVkSparseImageFormatProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageFormatProperties moonvulkan_zcheckarrayVkSparseImageFormatProperties
VkSparseImageFormatProperties* zcheckarrayVkSparseImageFormatProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageFormatProperties moonvulkan_zinitVkSparseImageFormatProperties
int zinitVkSparseImageFormatProperties(lua_State *L, VkSparseImageFormatProperties* p, int *err);
#define zfreeVkSparseImageFormatProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseImageFormatProperties)
#define zfreearrayVkSparseImageFormatProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseImageFormatProperties), (count), (base), zclearVkSparseImageFormatProperties)
#define zpushVkSparseImageFormatProperties moonvulkan_zpushVkSparseImageFormatProperties
int zpushVkSparseImageFormatProperties(lua_State *L, const VkSparseImageFormatProperties *p);

#define zclearVkExternalMemoryProperties NULL
#define znewVkExternalMemoryProperties(L, err) (VkExternalMemoryProperties*)znew((L), -1, sizeof(VkExternalMemoryProperties),(err))
#define znewarrayVkExternalMemoryProperties(L, count, err) (VkExternalMemoryProperties*)znewarray((L),-1, sizeof(VkExternalMemoryProperties), (count), (err))
#define zcheckVkExternalMemoryProperties moonvulkan_zcheckVkExternalMemoryProperties
VkExternalMemoryProperties* zcheckVkExternalMemoryProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkExternalMemoryProperties moonvulkan_zcheckarrayVkExternalMemoryProperties
VkExternalMemoryProperties* zcheckarrayVkExternalMemoryProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkExternalMemoryProperties moonvulkan_zinitVkExternalMemoryProperties
int zinitVkExternalMemoryProperties(lua_State *L, VkExternalMemoryProperties* p, int *err);
#define zfreeVkExternalMemoryProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkExternalMemoryProperties)
#define zfreearrayVkExternalMemoryProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkExternalMemoryProperties), (count), (base), zclearVkExternalMemoryProperties)
#define zpushVkExternalMemoryProperties moonvulkan_zpushVkExternalMemoryProperties
int zpushVkExternalMemoryProperties(lua_State *L, const VkExternalMemoryProperties *p);

#define zclearVkPhysicalDeviceMemoryProperties NULL
#define znewVkPhysicalDeviceMemoryProperties(L, err) (VkPhysicalDeviceMemoryProperties*)znew((L), -1, sizeof(VkPhysicalDeviceMemoryProperties),(err))
#define znewarrayVkPhysicalDeviceMemoryProperties(L, count, err) (VkPhysicalDeviceMemoryProperties*)znewarray((L),-1, sizeof(VkPhysicalDeviceMemoryProperties), (count), (err))
#define zcheckVkPhysicalDeviceMemoryProperties moonvulkan_zcheckVkPhysicalDeviceMemoryProperties
VkPhysicalDeviceMemoryProperties* zcheckVkPhysicalDeviceMemoryProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkPhysicalDeviceMemoryProperties moonvulkan_zcheckarrayVkPhysicalDeviceMemoryProperties
VkPhysicalDeviceMemoryProperties* zcheckarrayVkPhysicalDeviceMemoryProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPhysicalDeviceMemoryProperties moonvulkan_zinitVkPhysicalDeviceMemoryProperties
int zinitVkPhysicalDeviceMemoryProperties(lua_State *L, VkPhysicalDeviceMemoryProperties* p, int *err);
#define zfreeVkPhysicalDeviceMemoryProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkPhysicalDeviceMemoryProperties)
#define zfreearrayVkPhysicalDeviceMemoryProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPhysicalDeviceMemoryProperties), (count), (base), zclearVkPhysicalDeviceMemoryProperties)
#define zpushVkPhysicalDeviceMemoryProperties moonvulkan_zpushVkPhysicalDeviceMemoryProperties
int zpushVkPhysicalDeviceMemoryProperties(lua_State *L, const VkPhysicalDeviceMemoryProperties *p);

#define zclearVkMemoryRequirements NULL
#define znewVkMemoryRequirements(L, err) (VkMemoryRequirements*)znew((L), -1, sizeof(VkMemoryRequirements),(err))
#define znewarrayVkMemoryRequirements(L, count, err) (VkMemoryRequirements*)znewarray((L),-1, sizeof(VkMemoryRequirements), (count), (err))
#define zcheckVkMemoryRequirements moonvulkan_zcheckVkMemoryRequirements
VkMemoryRequirements* zcheckVkMemoryRequirements(lua_State *L, int arg, int *err);
#define zcheckarrayVkMemoryRequirements moonvulkan_zcheckarrayVkMemoryRequirements
VkMemoryRequirements* zcheckarrayVkMemoryRequirements(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMemoryRequirements moonvulkan_zinitVkMemoryRequirements
int zinitVkMemoryRequirements(lua_State *L, VkMemoryRequirements* p, int *err);
#define zfreeVkMemoryRequirements(L, p, base) zfree_untyped((L), (p), (base), zclearVkMemoryRequirements)
#define zfreearrayVkMemoryRequirements(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkMemoryRequirements), (count), (base), zclearVkMemoryRequirements)
#define zpushVkMemoryRequirements moonvulkan_zpushVkMemoryRequirements
int zpushVkMemoryRequirements(lua_State *L, const VkMemoryRequirements *p);

#define zclearVkSparseImageMemoryRequirements NULL
#define znewVkSparseImageMemoryRequirements(L, err) (VkSparseImageMemoryRequirements*)znew((L), -1, sizeof(VkSparseImageMemoryRequirements),(err))
#define znewarrayVkSparseImageMemoryRequirements(L, count, err) (VkSparseImageMemoryRequirements*)znewarray((L),-1, sizeof(VkSparseImageMemoryRequirements), (count), (err))
#define zcheckVkSparseImageMemoryRequirements moonvulkan_zcheckVkSparseImageMemoryRequirements
VkSparseImageMemoryRequirements* zcheckVkSparseImageMemoryRequirements(lua_State *L, int arg, int *err);
#define zcheckarrayVkSparseImageMemoryRequirements moonvulkan_zcheckarrayVkSparseImageMemoryRequirements
VkSparseImageMemoryRequirements* zcheckarrayVkSparseImageMemoryRequirements(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSparseImageMemoryRequirements moonvulkan_zinitVkSparseImageMemoryRequirements
int zinitVkSparseImageMemoryRequirements(lua_State *L, VkSparseImageMemoryRequirements* p, int *err);
#define zfreeVkSparseImageMemoryRequirements(L, p, base) zfree_untyped((L), (p), (base), zclearVkSparseImageMemoryRequirements)
#define zfreearrayVkSparseImageMemoryRequirements(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSparseImageMemoryRequirements), (count), (base), zclearVkSparseImageMemoryRequirements)
#define zpushVkSparseImageMemoryRequirements moonvulkan_zpushVkSparseImageMemoryRequirements
int zpushVkSparseImageMemoryRequirements(lua_State *L, const VkSparseImageMemoryRequirements *p);

#define zclearVkSurfaceCapabilitiesKHR NULL
#define znewVkSurfaceCapabilitiesKHR(L, err) (VkSurfaceCapabilitiesKHR*)znew((L), -1, sizeof(VkSurfaceCapabilitiesKHR),(err))
#define znewarrayVkSurfaceCapabilitiesKHR(L, count, err) (VkSurfaceCapabilitiesKHR*)znewarray((L),-1, sizeof(VkSurfaceCapabilitiesKHR), (count), (err))
#define zcheckVkSurfaceCapabilitiesKHR moonvulkan_zcheckVkSurfaceCapabilitiesKHR
VkSurfaceCapabilitiesKHR* zcheckVkSurfaceCapabilitiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSurfaceCapabilitiesKHR moonvulkan_zcheckarrayVkSurfaceCapabilitiesKHR
VkSurfaceCapabilitiesKHR* zcheckarrayVkSurfaceCapabilitiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSurfaceCapabilitiesKHR moonvulkan_zinitVkSurfaceCapabilitiesKHR
int zinitVkSurfaceCapabilitiesKHR(lua_State *L, VkSurfaceCapabilitiesKHR* p, int *err);
#define zfreeVkSurfaceCapabilitiesKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkSurfaceCapabilitiesKHR)
#define zfreearrayVkSurfaceCapabilitiesKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSurfaceCapabilitiesKHR), (count), (base), zclearVkSurfaceCapabilitiesKHR)
#define zpushVkSurfaceCapabilitiesKHR moonvulkan_zpushVkSurfaceCapabilitiesKHR
int zpushVkSurfaceCapabilitiesKHR(lua_State *L, const VkSurfaceCapabilitiesKHR *p);

#define zclearVkSurfaceFormatKHR NULL
#define znewVkSurfaceFormatKHR(L, err) (VkSurfaceFormatKHR*)znew((L), -1, sizeof(VkSurfaceFormatKHR),(err))
#define znewarrayVkSurfaceFormatKHR(L, count, err) (VkSurfaceFormatKHR*)znewarray((L),-1, sizeof(VkSurfaceFormatKHR), (count), (err))
#define zcheckVkSurfaceFormatKHR moonvulkan_zcheckVkSurfaceFormatKHR
VkSurfaceFormatKHR* zcheckVkSurfaceFormatKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkSurfaceFormatKHR moonvulkan_zcheckarrayVkSurfaceFormatKHR
VkSurfaceFormatKHR* zcheckarrayVkSurfaceFormatKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkSurfaceFormatKHR moonvulkan_zinitVkSurfaceFormatKHR
int zinitVkSurfaceFormatKHR(lua_State *L, VkSurfaceFormatKHR* p, int *err);
#define zfreeVkSurfaceFormatKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkSurfaceFormatKHR)
#define zfreearrayVkSurfaceFormatKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkSurfaceFormatKHR), (count), (base), zclearVkSurfaceFormatKHR)
#define zpushVkSurfaceFormatKHR moonvulkan_zpushVkSurfaceFormatKHR
int zpushVkSurfaceFormatKHR(lua_State *L, const VkSurfaceFormatKHR *p);

#define zclearVkQueueFamilyProperties NULL
#define znewVkQueueFamilyProperties(L, err) (VkQueueFamilyProperties*)znew((L), -1, sizeof(VkQueueFamilyProperties),(err))
#define znewarrayVkQueueFamilyProperties(L, count, err) (VkQueueFamilyProperties*)znewarray((L),-1, sizeof(VkQueueFamilyProperties), (count), (err))
#define zcheckVkQueueFamilyProperties moonvulkan_zcheckVkQueueFamilyProperties
VkQueueFamilyProperties* zcheckVkQueueFamilyProperties(lua_State *L, int arg, int *err);
#define zcheckarrayVkQueueFamilyProperties moonvulkan_zcheckarrayVkQueueFamilyProperties
VkQueueFamilyProperties* zcheckarrayVkQueueFamilyProperties(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkQueueFamilyProperties moonvulkan_zinitVkQueueFamilyProperties
int zinitVkQueueFamilyProperties(lua_State *L, VkQueueFamilyProperties* p, int *err);
#define zfreeVkQueueFamilyProperties(L, p, base) zfree_untyped((L), (p), (base), zclearVkQueueFamilyProperties)
#define zfreearrayVkQueueFamilyProperties(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkQueueFamilyProperties), (count), (base), zclearVkQueueFamilyProperties)
#define zpushVkQueueFamilyProperties moonvulkan_zpushVkQueueFamilyProperties
int zpushVkQueueFamilyProperties(lua_State *L, const VkQueueFamilyProperties *p, uint32_t index); //non-standard

#define zclearVkDisplayPropertiesKHR NULL
#define znewVkDisplayPropertiesKHR(L, err) (VkDisplayPropertiesKHR*)znew((L), -1, sizeof(VkDisplayPropertiesKHR),(err))
#define znewarrayVkDisplayPropertiesKHR(L, count, err) (VkDisplayPropertiesKHR*)znewarray((L),-1, sizeof(VkDisplayPropertiesKHR), (count), (err))
#define zcheckVkDisplayPropertiesKHR moonvulkan_zcheckVkDisplayPropertiesKHR
VkDisplayPropertiesKHR* zcheckVkDisplayPropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPropertiesKHR moonvulkan_zcheckarrayVkDisplayPropertiesKHR
VkDisplayPropertiesKHR* zcheckarrayVkDisplayPropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPropertiesKHR moonvulkan_zinitVkDisplayPropertiesKHR
int zinitVkDisplayPropertiesKHR(lua_State *L, VkDisplayPropertiesKHR* p, int *err);
#define zfreeVkDisplayPropertiesKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkDisplayPropertiesKHR)
#define zfreearrayVkDisplayPropertiesKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDisplayPropertiesKHR), (count), (base), zclearVkDisplayPropertiesKHR)
#define zpushVkDisplayPropertiesKHR moonvulkan_zpushVkDisplayPropertiesKHR
int zpushVkDisplayPropertiesKHR(lua_State *L, const VkDisplayPropertiesKHR *p);

#define zclearVkDisplayPlanePropertiesKHR NULL
#define znewVkDisplayPlanePropertiesKHR(L, err) (VkDisplayPlanePropertiesKHR*)znew((L), -1, sizeof(VkDisplayPlanePropertiesKHR),(err))
#define znewarrayVkDisplayPlanePropertiesKHR(L, count, err) (VkDisplayPlanePropertiesKHR*)znewarray((L),-1, sizeof(VkDisplayPlanePropertiesKHR), (count), (err))
#define zcheckVkDisplayPlanePropertiesKHR moonvulkan_zcheckVkDisplayPlanePropertiesKHR
VkDisplayPlanePropertiesKHR* zcheckVkDisplayPlanePropertiesKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDisplayPlanePropertiesKHR moonvulkan_zcheckarrayVkDisplayPlanePropertiesKHR
VkDisplayPlanePropertiesKHR* zcheckarrayVkDisplayPlanePropertiesKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDisplayPlanePropertiesKHR moonvulkan_zinitVkDisplayPlanePropertiesKHR
int zinitVkDisplayPlanePropertiesKHR(lua_State *L, VkDisplayPlanePropertiesKHR* p, int *err);
#define zfreeVkDisplayPlanePropertiesKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkDisplayPlanePropertiesKHR)
#define zfreearrayVkDisplayPlanePropertiesKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDisplayPlanePropertiesKHR), (count), (base), zclearVkDisplayPlanePropertiesKHR)
#define zpushVkDisplayPlanePropertiesKHR moonvulkan_zpushVkDisplayPlanePropertiesKHR
int zpushVkDisplayPlanePropertiesKHR(lua_State *L, const VkDisplayPlanePropertiesKHR *p);

#define zclearVkDescriptorSetLayoutBinding moonvulkan_zclearVkDescriptorSetLayoutBinding 
void zclearVkDescriptorSetLayoutBinding(lua_State *L, const void *p);
#define znewVkDescriptorSetLayoutBinding(L, err) (VkDescriptorSetLayoutBinding*)znew((L), -1, sizeof(VkDescriptorSetLayoutBinding),(err))
#define znewarrayVkDescriptorSetLayoutBinding(L, count, err) (VkDescriptorSetLayoutBinding*)znewarray((L),-1, sizeof(VkDescriptorSetLayoutBinding), (count), (err))
#define zcheckVkDescriptorSetLayoutBinding moonvulkan_zcheckVkDescriptorSetLayoutBinding
VkDescriptorSetLayoutBinding* zcheckVkDescriptorSetLayoutBinding(lua_State *L, int arg, int *err);
#define zcheckarrayVkDescriptorSetLayoutBinding moonvulkan_zcheckarrayVkDescriptorSetLayoutBinding
VkDescriptorSetLayoutBinding* zcheckarrayVkDescriptorSetLayoutBinding(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDescriptorSetLayoutBinding moonvulkan_zinitVkDescriptorSetLayoutBinding
int zinitVkDescriptorSetLayoutBinding(lua_State *L, VkDescriptorSetLayoutBinding* p, int *err);
#define zfreeVkDescriptorSetLayoutBinding(L, p, base) zfree_untyped((L), (p), (base), zclearVkDescriptorSetLayoutBinding)
#define zfreearrayVkDescriptorSetLayoutBinding(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDescriptorSetLayoutBinding), (count), (base), zclearVkDescriptorSetLayoutBinding)
#define zpushVkDescriptorSetLayoutBinding moonvulkan_zpushVkDescriptorSetLayoutBinding
int zpushVkDescriptorSetLayoutBinding(lua_State *L, const VkDescriptorSetLayoutBinding *p);

#define zclearVkVertexInputBindingDivisorDescriptionEXT NULL
#define znewVkVertexInputBindingDivisorDescriptionEXT(L, err) (VkVertexInputBindingDivisorDescriptionEXT*)znew((L), -1, sizeof(VkVertexInputBindingDivisorDescriptionEXT),(err))
#define znewarrayVkVertexInputBindingDivisorDescriptionEXT(L, count, err) (VkVertexInputBindingDivisorDescriptionEXT*)znewarray((L),-1, sizeof(VkVertexInputBindingDivisorDescriptionEXT), (count), (err))
#define zcheckVkVertexInputBindingDivisorDescriptionEXT moonvulkan_zcheckVkVertexInputBindingDivisorDescriptionEXT
VkVertexInputBindingDivisorDescriptionEXT* zcheckVkVertexInputBindingDivisorDescriptionEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkVertexInputBindingDivisorDescriptionEXT moonvulkan_zcheckarrayVkVertexInputBindingDivisorDescriptionEXT
VkVertexInputBindingDivisorDescriptionEXT* zcheckarrayVkVertexInputBindingDivisorDescriptionEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkVertexInputBindingDivisorDescriptionEXT moonvulkan_zinitVkVertexInputBindingDivisorDescriptionEXT
int zinitVkVertexInputBindingDivisorDescriptionEXT(lua_State *L, VkVertexInputBindingDivisorDescriptionEXT* p, int *err);
#define zfreeVkVertexInputBindingDivisorDescriptionEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkVertexInputBindingDivisorDescriptionEXT)
#define zfreearrayVkVertexInputBindingDivisorDescriptionEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkVertexInputBindingDivisorDescriptionEXT), (count), (base), zclearVkVertexInputBindingDivisorDescriptionEXT)
#define zpushVkVertexInputBindingDivisorDescriptionEXT moonvulkan_zpushVkVertexInputBindingDivisorDescriptionEXT
int zpushVkVertexInputBindingDivisorDescriptionEXT(lua_State *L, const VkVertexInputBindingDivisorDescriptionEXT *p);

#define zclearVkDrmFormatModifierPropertiesEXT NULL
#define znewVkDrmFormatModifierPropertiesEXT(L, err) (VkDrmFormatModifierPropertiesEXT*)znew((L), -1, sizeof(VkDrmFormatModifierPropertiesEXT),(err))
#define znewarrayVkDrmFormatModifierPropertiesEXT(L, count, err) (VkDrmFormatModifierPropertiesEXT*)znewarray((L),-1, sizeof(VkDrmFormatModifierPropertiesEXT), (count), (err))
#define zcheckVkDrmFormatModifierPropertiesEXT moonvulkan_zcheckVkDrmFormatModifierPropertiesEXT
VkDrmFormatModifierPropertiesEXT* zcheckVkDrmFormatModifierPropertiesEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkDrmFormatModifierPropertiesEXT moonvulkan_zcheckarrayVkDrmFormatModifierPropertiesEXT
VkDrmFormatModifierPropertiesEXT* zcheckarrayVkDrmFormatModifierPropertiesEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDrmFormatModifierPropertiesEXT moonvulkan_zinitVkDrmFormatModifierPropertiesEXT
int zinitVkDrmFormatModifierPropertiesEXT(lua_State *L, VkDrmFormatModifierPropertiesEXT* p, int *err);
#define zfreeVkDrmFormatModifierPropertiesEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkDrmFormatModifierPropertiesEXT)
#define zfreearrayVkDrmFormatModifierPropertiesEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDrmFormatModifierPropertiesEXT), (count), (base), zclearVkDrmFormatModifierPropertiesEXT)
#define zpushVkDrmFormatModifierPropertiesEXT moonvulkan_zpushVkDrmFormatModifierPropertiesEXT
int zpushVkDrmFormatModifierPropertiesEXT(lua_State *L, const VkDrmFormatModifierPropertiesEXT *p);

#define zclearVkPipelineCreationFeedbackEXT NULL
#define znewVkPipelineCreationFeedbackEXT(L, err) (VkPipelineCreationFeedbackEXT*)znew((L), -1, sizeof(VkPipelineCreationFeedbackEXT),(err))
#define znewarrayVkPipelineCreationFeedbackEXT(L, count, err) (VkPipelineCreationFeedbackEXT*)znewarray((L),-1, sizeof(VkPipelineCreationFeedbackEXT), (count), (err))
#define zcheckVkPipelineCreationFeedbackEXT moonvulkan_zcheckVkPipelineCreationFeedbackEXT
VkPipelineCreationFeedbackEXT* zcheckVkPipelineCreationFeedbackEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineCreationFeedbackEXT moonvulkan_zcheckarrayVkPipelineCreationFeedbackEXT
VkPipelineCreationFeedbackEXT* zcheckarrayVkPipelineCreationFeedbackEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineCreationFeedbackEXT moonvulkan_zinitVkPipelineCreationFeedbackEXT
int zinitVkPipelineCreationFeedbackEXT(lua_State *L, VkPipelineCreationFeedbackEXT* p, int *err);
#define zfreeVkPipelineCreationFeedbackEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkPipelineCreationFeedbackEXT)
#define zfreearrayVkPipelineCreationFeedbackEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPipelineCreationFeedbackEXT), (count), (base), zclearVkPipelineCreationFeedbackEXT)
#define zpushVkPipelineCreationFeedbackEXT moonvulkan_zpushVkPipelineCreationFeedbackEXT
int zpushVkPipelineCreationFeedbackEXT(lua_State *L, const VkPipelineCreationFeedbackEXT *p);

#define zclearVkAccelerationStructureBuildRangeInfoKHR NULL
#define znewVkAccelerationStructureBuildRangeInfoKHR(L, err) (VkAccelerationStructureBuildRangeInfoKHR*)znew((L), -1, sizeof(VkAccelerationStructureBuildRangeInfoKHR),(err))
#define znewarrayVkAccelerationStructureBuildRangeInfoKHR(L, count, err) (VkAccelerationStructureBuildRangeInfoKHR*)znewarray((L),-1, sizeof(VkAccelerationStructureBuildRangeInfoKHR), (count), (err))
#define zcheckVkAccelerationStructureBuildRangeInfoKHR moonvulkan_zcheckVkAccelerationStructureBuildRangeInfoKHR
VkAccelerationStructureBuildRangeInfoKHR* zcheckVkAccelerationStructureBuildRangeInfoKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureBuildRangeInfoKHR moonvulkan_zcheckarrayVkAccelerationStructureBuildRangeInfoKHR
VkAccelerationStructureBuildRangeInfoKHR* zcheckarrayVkAccelerationStructureBuildRangeInfoKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureBuildRangeInfoKHR moonvulkan_zinitVkAccelerationStructureBuildRangeInfoKHR
int zinitVkAccelerationStructureBuildRangeInfoKHR(lua_State *L, VkAccelerationStructureBuildRangeInfoKHR* p, int *err);
#define zfreeVkAccelerationStructureBuildRangeInfoKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkAccelerationStructureBuildRangeInfoKHR)
#define zfreearrayVkAccelerationStructureBuildRangeInfoKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkAccelerationStructureBuildRangeInfoKHR), (count), (base), zclearVkAccelerationStructureBuildRangeInfoKHR)
#define zpushVkAccelerationStructureBuildRangeInfoKHR moonvulkan_zpushVkAccelerationStructureBuildRangeInfoKHR
int zpushVkAccelerationStructureBuildRangeInfoKHR(lua_State *L, const VkAccelerationStructureBuildRangeInfoKHR *p);

#define zclearVkStridedDeviceAddressRegionKHR NULL
#define znewVkStridedDeviceAddressRegionKHR(L, err) (VkStridedDeviceAddressRegionKHR*)znew((L), -1, sizeof(VkStridedDeviceAddressRegionKHR),(err))
#define znewarrayVkStridedDeviceAddressRegionKHR(L, count, err) (VkStridedDeviceAddressRegionKHR*)znewarray((L),-1, sizeof(VkStridedDeviceAddressRegionKHR), (count), (err))
#define zcheckVkStridedDeviceAddressRegionKHR moonvulkan_zcheckVkStridedDeviceAddressRegionKHR
VkStridedDeviceAddressRegionKHR* zcheckVkStridedDeviceAddressRegionKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkStridedDeviceAddressRegionKHR moonvulkan_zcheckarrayVkStridedDeviceAddressRegionKHR
VkStridedDeviceAddressRegionKHR* zcheckarrayVkStridedDeviceAddressRegionKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkStridedDeviceAddressRegionKHR moonvulkan_zinitVkStridedDeviceAddressRegionKHR
int zinitVkStridedDeviceAddressRegionKHR(lua_State *L, VkStridedDeviceAddressRegionKHR* p, int *err);
#define zfreeVkStridedDeviceAddressRegionKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkStridedDeviceAddressRegionKHR)
#define zfreearrayVkStridedDeviceAddressRegionKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkStridedDeviceAddressRegionKHR), (count), (base), zclearVkStridedDeviceAddressRegionKHR)
#define zpushVkStridedDeviceAddressRegionKHR moonvulkan_zpushVkStridedDeviceAddressRegionKHR
int zpushVkStridedDeviceAddressRegionKHR(lua_State *L, const VkStridedDeviceAddressRegionKHR *p);

#define zclearVkMultiDrawInfoEXT NULL
#define znewVkMultiDrawInfoEXT(L, err) (VkMultiDrawInfoEXT*)znew((L), -1, sizeof(VkMultiDrawInfoEXT),(err))
#define znewarrayVkMultiDrawInfoEXT(L, count, err) (VkMultiDrawInfoEXT*)znewarray((L),-1, sizeof(VkMultiDrawInfoEXT), (count), (err))
#define zcheckVkMultiDrawInfoEXT moonvulkan_zcheckVkMultiDrawInfoEXT
VkMultiDrawInfoEXT* zcheckVkMultiDrawInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkMultiDrawInfoEXT moonvulkan_zcheckarrayVkMultiDrawInfoEXT
VkMultiDrawInfoEXT* zcheckarrayVkMultiDrawInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMultiDrawInfoEXT moonvulkan_zinitVkMultiDrawInfoEXT
int zinitVkMultiDrawInfoEXT(lua_State *L, VkMultiDrawInfoEXT* p, int *err);
#define zfreeVkMultiDrawInfoEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkMultiDrawInfoEXT)
#define zfreearrayVkMultiDrawInfoEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkMultiDrawInfoEXT), (count), (base), zclearVkMultiDrawInfoEXT)
#define zpushVkMultiDrawInfoEXT moonvulkan_zpushVkMultiDrawInfoEXT
int zpushVkMultiDrawInfoEXT(lua_State *L, const VkMultiDrawInfoEXT *p);

#define zclearVkMultiDrawIndexedInfoEXT NULL
#define znewVkMultiDrawIndexedInfoEXT(L, err) (VkMultiDrawIndexedInfoEXT*)znew((L), -1, sizeof(VkMultiDrawIndexedInfoEXT),(err))
#define znewarrayVkMultiDrawIndexedInfoEXT(L, count, err) (VkMultiDrawIndexedInfoEXT*)znewarray((L),-1, sizeof(VkMultiDrawIndexedInfoEXT), (count), (err))
#define zcheckVkMultiDrawIndexedInfoEXT moonvulkan_zcheckVkMultiDrawIndexedInfoEXT
VkMultiDrawIndexedInfoEXT* zcheckVkMultiDrawIndexedInfoEXT(lua_State *L, int arg, int *err);
#define zcheckarrayVkMultiDrawIndexedInfoEXT moonvulkan_zcheckarrayVkMultiDrawIndexedInfoEXT
VkMultiDrawIndexedInfoEXT* zcheckarrayVkMultiDrawIndexedInfoEXT(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkMultiDrawIndexedInfoEXT moonvulkan_zinitVkMultiDrawIndexedInfoEXT
int zinitVkMultiDrawIndexedInfoEXT(lua_State *L, VkMultiDrawIndexedInfoEXT* p, int *err);
#define zfreeVkMultiDrawIndexedInfoEXT(L, p, base) zfree_untyped((L), (p), (base), zclearVkMultiDrawIndexedInfoEXT)
#define zfreearrayVkMultiDrawIndexedInfoEXT(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkMultiDrawIndexedInfoEXT), (count), (base), zclearVkMultiDrawIndexedInfoEXT)
#define zpushVkMultiDrawIndexedInfoEXT moonvulkan_zpushVkMultiDrawIndexedInfoEXT
int zpushVkMultiDrawIndexedInfoEXT(lua_State *L, const VkMultiDrawIndexedInfoEXT *p);

#define zclearVkPerformanceCounterResultKHR NULL
#define znewVkPerformanceCounterResultKHR(L, err) (VkPerformanceCounterResultKHR*)znew((L), -1, sizeof(VkPerformanceCounterResultKHR),(err))
#define znewarrayVkPerformanceCounterResultKHR(L, count, err) (VkPerformanceCounterResultKHR*)znewarray((L),-1, sizeof(VkPerformanceCounterResultKHR), (count), (err))
#define zcheckVkPerformanceCounterResultKHR moonvulkan_zcheckVkPerformanceCounterResultKHR
VkPerformanceCounterResultKHR* zcheckVkPerformanceCounterResultKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPerformanceCounterResultKHR moonvulkan_zcheckarrayVkPerformanceCounterResultKHR
VkPerformanceCounterResultKHR* zcheckarrayVkPerformanceCounterResultKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPerformanceCounterResultKHR moonvulkan_zinitVkPerformanceCounterResultKHR
int zinitVkPerformanceCounterResultKHR(lua_State *L, VkPerformanceCounterResultKHR* p, int *err);
#define zfreeVkPerformanceCounterResultKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkPerformanceCounterResultKHR)
#define zfreearrayVkPerformanceCounterResultKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPerformanceCounterResultKHR), (count), (base), zclearVkPerformanceCounterResultKHR)
#define zpushVkPerformanceCounterResultKHR moonvulkan_zpushVkPerformanceCounterResultKHR
int zpushVkPerformanceCounterResultKHR(lua_State *L, const VkPerformanceCounterResultKHR *p);

#define zclearVkPipelineExecutableStatisticValueKHR NULL
#define znewVkPipelineExecutableStatisticValueKHR(L, err) (VkPipelineExecutableStatisticValueKHR*)znew((L), -1, sizeof(VkPipelineExecutableStatisticValueKHR),(err))
#define znewarrayVkPipelineExecutableStatisticValueKHR(L, count, err) (VkPipelineExecutableStatisticValueKHR*)znewarray((L),-1, sizeof(VkPipelineExecutableStatisticValueKHR), (count), (err))
#define zcheckVkPipelineExecutableStatisticValueKHR moonvulkan_zcheckVkPipelineExecutableStatisticValueKHR
VkPipelineExecutableStatisticValueKHR* zcheckVkPipelineExecutableStatisticValueKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkPipelineExecutableStatisticValueKHR moonvulkan_zcheckarrayVkPipelineExecutableStatisticValueKHR
VkPipelineExecutableStatisticValueKHR* zcheckarrayVkPipelineExecutableStatisticValueKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkPipelineExecutableStatisticValueKHR moonvulkan_zinitVkPipelineExecutableStatisticValueKHR
int zinitVkPipelineExecutableStatisticValueKHR(lua_State *L, VkPipelineExecutableStatisticValueKHR* p, int *err);
#define zfreeVkPipelineExecutableStatisticValueKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkPipelineExecutableStatisticValueKHR)
#define zfreearrayVkPipelineExecutableStatisticValueKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkPipelineExecutableStatisticValueKHR), (count), (base), zclearVkPipelineExecutableStatisticValueKHR)
#define zpushVkPipelineExecutableStatisticValueKHR moonvulkan_zpushVkPipelineExecutableStatisticValueKHR
int zpushVkPipelineExecutableStatisticValueKHR(lua_State *L, const VkPipelineExecutableStatisticValueKHR *p);

#define zclearVkDeviceOrHostAddressKHR NULL
#define znewVkDeviceOrHostAddressKHR(L, err) (VkDeviceOrHostAddressKHR*)znew((L), -1, sizeof(VkDeviceOrHostAddressKHR),(err))
#define znewarrayVkDeviceOrHostAddressKHR(L, count, err) (VkDeviceOrHostAddressKHR*)znewarray((L),-1, sizeof(VkDeviceOrHostAddressKHR), (count), (err))
#define zcheckVkDeviceOrHostAddressKHR moonvulkan_zcheckVkDeviceOrHostAddressKHR
VkDeviceOrHostAddressKHR* zcheckVkDeviceOrHostAddressKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkDeviceOrHostAddressKHR moonvulkan_zcheckarrayVkDeviceOrHostAddressKHR
VkDeviceOrHostAddressKHR* zcheckarrayVkDeviceOrHostAddressKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkDeviceOrHostAddressKHR moonvulkan_zinitVkDeviceOrHostAddressKHR
int zinitVkDeviceOrHostAddressKHR(lua_State *L, VkDeviceOrHostAddressKHR* p, int *err);
#define zfreeVkDeviceOrHostAddressKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkDeviceOrHostAddressKHR)
#define zfreearrayVkDeviceOrHostAddressKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkDeviceOrHostAddressKHR), (count), (base), zclearVkDeviceOrHostAddressKHR)
#define zpushVkDeviceOrHostAddressKHR moonvulkan_zpushVkDeviceOrHostAddressKHR
int zpushVkDeviceOrHostAddressKHR(lua_State *L, const VkDeviceOrHostAddressKHR *p);

#define zclearVkAccelerationStructureGeometryDataKHR NULL
#define znewVkAccelerationStructureGeometryDataKHR(L, err) (VkAccelerationStructureGeometryDataKHR*)znew((L), -1, sizeof(VkAccelerationStructureGeometryDataKHR),(err))
#define znewarrayVkAccelerationStructureGeometryDataKHR(L, count, err) (VkAccelerationStructureGeometryDataKHR*)znewarray((L),-1, sizeof(VkAccelerationStructureGeometryDataKHR), (count), (err))
#define zcheckVkAccelerationStructureGeometryDataKHR moonvulkan_zcheckVkAccelerationStructureGeometryDataKHR
VkAccelerationStructureGeometryDataKHR* zcheckVkAccelerationStructureGeometryDataKHR(lua_State *L, int arg, int *err);
#define zcheckarrayVkAccelerationStructureGeometryDataKHR moonvulkan_zcheckarrayVkAccelerationStructureGeometryDataKHR
VkAccelerationStructureGeometryDataKHR* zcheckarrayVkAccelerationStructureGeometryDataKHR(lua_State *L, int arg, uint32_t *count, int *err);
#define zinitVkAccelerationStructureGeometryDataKHR moonvulkan_zinitVkAccelerationStructureGeometryDataKHR
int zinitVkAccelerationStructureGeometryDataKHR(lua_State *L, VkAccelerationStructureGeometryDataKHR* p, int *err);
#define zfreeVkAccelerationStructureGeometryDataKHR(L, p, base) zfree_untyped((L), (p), (base), zclearVkAccelerationStructureGeometryDataKHR)
#define zfreearrayVkAccelerationStructureGeometryDataKHR(L, p, count, base) zfreearray_untyped((L), (p), sizeof(VkAccelerationStructureGeometryDataKHR), (count), (base), zclearVkAccelerationStructureGeometryDataKHR)
#define zpushVkAccelerationStructureGeometryDataKHR moonvulkan_zpushVkAccelerationStructureGeometryDataKHR
int zpushVkAccelerationStructureGeometryDataKHR(lua_State *L, const VkAccelerationStructureGeometryDataKHR *p);


#ifdef VK_USE_PLATFORM_WIN32_KHR


#endif /* VK_USE_PLATFORM_WIN32_KHR */

#endif /* zcheckDEFINED */

