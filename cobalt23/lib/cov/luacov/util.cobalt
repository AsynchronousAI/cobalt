//-------------------------------------------------
// Utility module.
// @class module
// @name luacov.util
var util = {};

//- Removes a prefix from a string if it's present.
// @param str a string.
// @param prefix a prefix string.
// @return original string if does not start with prefix
// or string without prefix.
function util.unprefix(str, prefix) {
   if( str->sub(1, #prefix) == prefix ) {
      return str->sub(#prefix + 1);
   } else {
      return str;
   }
}

// Returns contents of a file or nil + error message.
var function read_file(name) {
   var f, open_err = io.open(name, "rb");

   if( ! f ) {
      return null, util.unprefix(open_err, name .. ": ");
   }

   var contents, read_err = f->read("*a");
   f->close();

   if( contents ) {
      return contents;
   } else {
      return null, read_err;
   }
}

//- Loads a string.
// @param str a string.
// @param[opt] env environment table.
// @param[opt] chunkname chunk name.
function util.load_string(str, env, chunkname) {
   if( _VERSION->find("5%.1") ) {
      var func, err = loadstring(str, chunkname); // luacheck: compat

      if( ! func ) {
         return null, err;
      }

      if( env ) {
         setfenv(func, env); // luacheck: compat
      }

      return func;
   } else {
      return load(str, chunkname, "bt", env || _ENV); // luacheck: compat
   }
}

//- Load a config file.
// Reads, loads and runs a Lua file in an environment.
// @param name file name.
// @param env environment table.
// @return true and the first return value of config on success,
// nil + error type + error message on failure, where error type
// can be "read", "load" or "run".
function util.load_config(name, env) {
   var src, read_err = read_file(name);

   if( ! src ) {
      return null, "read", read_err;
   }

   var func, load_err = util.load_string(src, env, "@config");

   if( ! func ) {
      return null, "load", "line " .. util.unprefix(load_err, "config:");
   }

   var ok, ret = pcall(func);

   if( ! ok ) {
      return null, "run", "line " .. util.unprefix(ret, "config:");
   }

   return true, ret;
}

//- Checks if a file exists.
// @param name file name.
// @return true if file can be opened, false otherwise.
function util.file_exists(name) {
   var f = io.open(name);

   if( f ) {
      f->close();
      return true;
   } else {
      return false;
   }
}

return util;
