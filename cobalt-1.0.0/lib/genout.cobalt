var isJit = jit != nil
var original = [=[<head>
<style>
    body {
       background-color: rgb(15,15,15);
       color: rgb(220,220,220);
       font-family: "Sofia", sans-serif;
    }
 </style>
</head>

<h1 id="-filename-">{filename}</h1>
<blockquote>
<p style="color:#808080">Autogenerated by cobalt</p>
</blockquote>
<h2 id="stats">stats</h2>
<ul>
<li>{totalspeed} seconds for execution</li>
<li><span style="color: yellow;">{issues}</span> linter issues</li>
<li><span style="color: red;">{compileissue}</span> runtime issues</li>
<li>{plat} target</li>
<li>{type}</li>
</ul>
<hr>
<h2 id="issues">issues</h2>
<p>{issues}</p>
<h2 id="-filename-">./{filename}</h2>
<pre><code class="lang-js">{<span class="hljs-built_in">source</span>}
</code></pre>
<!--JITSTART -->
<h1 id="trace-1">trace 1</h1>
<blockquote>
<p>{traceinfo}</p>
</blockquote>
<table>
<thead>
<tr>
<th>Bytecode</th>
<th>IR</th>
<th>mcode</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>{bytecode}</code></td>
<td><code>{ir}</code></td>
<td><code>{mcode}</code></td>
</tr>
</tbody>
</table>
<!--JITEND -->
<!--INTERPRETERSTART -->
<h1 id="bytecode">bytecode</h1>
<pre><code class="lang-js">{interpreterbytecode}
</code></pre>
<!--INTERPRETEREND -->
<h2 id="requires">requires</h2>
<p>{requires}</p>
<h2 id="variables">variables</h2>
<p>{variables}</p>
]=]

var isInterpreted = false

function generateHTML(args: table){
   var HTML = original
   // Remove JITSTART-JITEND if isInterpreted is false, otherwise remove INTERPRETERSTART-INTERPRETEREND
   var lines = {}
   var off = false
   for (line in original->gmatch("[^\n]+")) {
      if (isJit ? line == "<!--INTERPRETERSTART -->" : line == "<!--JITSTART -->"){
         off = true
      } else if (off){
         // Dont add
      } else if (isJit ? line == "<!--INTERPRETEREND -->" : line == "<!--JITEND -->"){
         off = false
         // Dont add
      } else {
         table.insert(lines, line)
         print(line)
         // add
      }
   }

   // Join lines
   var newHTML = ""
   for (i, v in pairs(lines)){
      newHTML = newHTML.. v.."\n"
   }
   HTML = newHTML

   // Replace all items in the table
   for (i, v in pairs(args)){
      var str = "{"..i.."}"

      HTML = HTML->gsub(str, v)
   }

   return HTML
}

print(generateHTML({
   "filename": "test.cobalt",
   "totalspeed": "0.00000",
   "issues": "0",
   "compileissue": "0",
   "plat": "x86_64",
   "type": isJit ? "JIT" : "Interpreter",
   "traceinfo": "test.cobalt:1:1",
   "bytecode": "0x0000000000000000",
   "ir": "0x0000000000000000",
   "mcode": "0x0000000000000000",
   "interpreterbytecode": "0x0000000000000000",
   "requires": "0",
   "variables": "0",
}))