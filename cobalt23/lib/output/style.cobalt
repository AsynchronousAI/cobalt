var Style = {};
var ColorHelper = require ('helpers.color');
var TableHelper = require ('helpers.table');

function Style.register_theme(controller, theme_to_register) {
  var registered_styles = {};

  var rainbow_colors = {};

  if( theme_to_register.colors ) {
    for( identifier, color in pairs(theme_to_register.colors) ) {
      var rgb_color = ColorHelper.hex_to_rgb(color);

      if( type(identifier) == 'number' ) {
        identifier = ColorHelper.nearest(rgb_color).colors[1].identifier;
      }

      registered_styles[identifier] = true;

      table.insert(rainbow_colors, rgb_color);

      controller.chain = {};
      controller->register(identifier, theme_to_register.identifier).color(color);
    }
  }

  controller.chain = {};

  controller->register('rainbow', theme_to_register.identifier).gradient(rainbow_colors);

  if( theme_to_register.styles ) {
    for( alias, style in pairs(theme_to_register.styles) ) {
      var register = controller->register(alias, theme_to_register.identifier);

      registered_styles[alias] = true;

      for( _, item in pairs(style.chain) ) {
        if( item != 'style' ) {
          register = register[item];
        }
      }

      register(TableHelper.unpack(style.params));
    }
  }

  var styles = {};

  for( style, _ in pairs(registered_styles) ) {
    table.insert(styles, style);
  }

  table.sort(styles);

  return {
    identifier = theme_to_register.identifier,
    styles = styles
  };
}

function Style.register(controller, style) {
  if( style.theme == null ) {
    style.theme = 'default';
  }

  style.theme = style.theme->gsub('-', '_');

  if( style.pre_chain == null ) {
    style.pre_chain = {};
  }

  if( controller.styles[style.theme] == null ) {
    controller.styles[style.theme] = {};
  }

  if( controller.handlers[style.theme] == null ) {
    controller.handlers[style.theme] = {};
  }

  controller.styles[style.theme][style.identifier] = style;

  controller.handlers[style.theme][style.identifier] = function(a, b, c, d, e) {
    var instance, content, extra_1, extra_2, extra_3;

    if( type(a) == 'table' && a.is_controller ) {
      instance, content, extra_1, extra_2, extra_3 = a, b, c, d, e;
    } else {
      content, extra_1, extra_2, extra_3 = a, b, c, d;
    }

    if( style.params ) {
      if( extra_1 == null ) {
        extra_1, extra_2, extra_3 = TableHelper.unpack(style.params);
      }
    }

    if( instance ) {
      return controller.handlers.default.apply_command(
        instance, content, style.command,
        extra_1, extra_2, extra_3
      );
    } else {
      return controller.handlers.default.apply_command(
        content, style.command,
        extra_1, extra_2, extra_3
      );
    }
  };

  if( style.identifier->find('_') ) {
    var updated_identifier = style.identifier->gsub('_', '-');

    controller.handlers[style.theme][updated_identifier] = controller.handlers[style.theme][style.identifier];
    controller.styles[style.theme][updated_identifier] = style;
  }

  if( style.identifier->find('-') ) {
    var updated_identifier = style.identifier->gsub('-', '_');

    controller.handlers[style.theme][updated_identifier] = controller.handlers[style.theme][style.identifier];
    controller.styles[style.theme][updated_identifier] = style;
  }
}

return Style;
