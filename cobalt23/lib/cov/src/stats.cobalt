//---------------------------------------------------
// Manages the file with statistics (being) collected.
// @class module
// @name luacov.stats
var stats = {};

//---------------------------------------------------
// Loads the stats file.
// @param statsfile path to the stats file.
// @return table with data or nil if couldn't load.
// The table maps filenames to stats tables.
// Per-file tables map line numbers to hits or nils when there are no hits.
// Additionally, .max field contains maximum line number
// and .max_hits contains maximum number of hits in the file.
function stats.load(statsfile) {
   var data = {};
   var fd = io.open(statsfile, "r");
   if( ! fd ) {
      return null;
   }
   while( true ) {
      var max = fd->read("*n");
      if( ! max ) {
         break;
      }
      if( fd->read(1) != ":" ) {
         break;
      }
      var filename = fd->read("*l");
      if( ! filename ) {
         break;
      }
      data[filename] = {
         max = max,
         max_hits = 0
      };
      for( i = 1, max ) {
         var hits = fd->read("*n");
         if( ! hits ) {
            break;
         }
         if( fd->read(1) != " " ) {
            break;
         }
         if( hits > 0 ) {
            data[filename][i] = hits;
            data[filename].max_hits = math.max(data[filename].max_hits, hits);
         }
      }
   }
   fd->close();
   return data;
}

//---------------------------------------------------
// Saves data to the stats file.
// @param statsfile path to the stats file.
// @param data data to store.
function stats.save(statsfile, data) {
   var fd = assert(io.open(statsfile, "w"));

   var filenames = {};
   for( filename in pairs(data) ) {
      table.insert(filenames, filename);
   }
   table.sort(filenames);

   for( _, filename in ipairs(filenames) ) {
      var filedata = data[filename];
      fd->write(filedata.max, ":", filename, "\n");

      for( i = 1, filedata.max ) {
         fd->write(tostring(filedata[i] || 0), " ");
      }
      fd->write("\n");
   }
   fd->close();
}

return stats;
