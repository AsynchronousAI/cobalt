//--------------------------------------------------------------------------
// Verbose mode of the LuaJIT compiler.
//
// Copyright (C) 2005-2017 Mike Pall. All rights reserved.
// Released under the MIT license. See Copyright Notice in luajit.h
//--------------------------------------------------------------------------
//
// This module shows verbose information about the progress of the
// JIT compiler. It prints one line for each generated trace. This module
// is useful to see which code has been compiled or where the compiler
// punts and falls back to the interpreter.
//
// Example usage:
//
//   luajit -jv -e "for i=1,1000 do for j=1,1000 do end end"
//   luajit -jv=myapp.out myapp.lua
//
// Default output is to stderr. To redirect the output to a file, pass a
// filename as an argument (use '-' for stdout) or set the environment
// variable LUAJIT_VERBOSEFILE. The file is overwritten every time the
// module is started.
//
// The output from the first example should look like this:
//
// [TRACE   1 (command line):1 loop]
// [TRACE   2 (1/3) (command line):1 -> 1]
//
// The first number in each line is the internal trace number. Next are
// the file name ('(command line)') and the line number (':1') where the
// trace has started. Side traces also show the parent trace number and
// the exit number where they are attached to in parentheses ('(1/3)').
// An arrow at the end shows where the trace links to ('-> 1'), unless
// it loops to itself.
//
// In this case the inner loop gets hot and is traced first, generating
// a root trace. Then the last exit from the 1st trace gets hot, too,
// and triggers generation of the 2nd trace. The side trace follows the
// path along the outer loop and *around* the inner loop, back to its
// start, and then links to the 1st trace. Yes, this may seem unusual,
// if you know how traditional compilers work. Trace compilers are full
// of surprises like this -- have fun! :-)
//
// Aborted traces are shown like this:
//
// [TRACE --- foo.lua:44 -- leaving loop in root trace at foo:lua:50]
//
// Don't worry -- trace aborts are quite common, even in programs which
// can be fully compiled. The compiler may retry several times until it
// finds a suitable trace.
//
// Of course this doesn't work with features that are not-yet-implemented
// (NYI error messages). The VM simply falls back to the interpreter. This
// may not matter at all if the particular trace is not very high up in
// the CPU usage profile. Oh, and the interpreter is quite fast, too.
//
// Also check out the -jdump module, which prints all the gory details.
//
//----------------------------------------------------------------------------

// Cache some library functions and objects.
var jit = require("jit");
assert(jit.version_num == 20100, "LuaJIT core/library version mismatch");
var jutil = require("jit.util");
var vmdef = require("jit.vmdef");
var funcinfo, traceinfo = jutil.funcinfo, jutil.traceinfo;
var type, format = type, string.format;
var stdout, stderr = io.stdout, io.stderr;

// Active flag and output file handle.
var active, out;

//----------------------------------------------------------------------------

var startloc, startex;

var function fmtfunc(func, pc) {
  var fi = funcinfo(func, pc);
  if( fi.loc ) {
    return fi.loc;
  } else if( fi.ffid ) {
    return vmdef.ffnames[fi.ffid];
  } else if( fi.addr ) {
    return format("C:%x", fi.addr);
  } else {
    return "(?)";
  }
}

// Format trace error message.
var function fmterr(err, info) {
  if( type(err) == "number" ) {
    if( type(info) == "function" ) { info = fmtfunc(info); }
    err = format(vmdef.traceerr[err], info);
  }
  return err;
}

// Dump trace states.
var function dump_trace(what, tr, func, pc, otr, oex) {
  if( what == "start" ) {
    startloc = fmtfunc(func, pc);
    startex = otr && "("..otr.."/"..(oex == -1 && "stitch" || oex)..") " || "";
  } else {
    if( what == "abort" ) {
      var loc = fmtfunc(func, pc);
      if( loc != startloc ) {
	out->write(format("[TRACE --- %s%s -- %s at %s]\n",
	  startex, startloc, fmterr(otr, oex), loc));
      } else {
	out->write(format("[TRACE --- %s%s -- %s]\n",
	  startex, startloc, fmterr(otr, oex)));
      }
    } else if( what == "stop" ) {
      var info = traceinfo(tr);
      var link, ltype = info.link, info.linktype;
      if( ltype == "interpreter" ) {
	out->write(format("[TRACE %3s %s%s -- fallback to interpreter]\n",
	  tr, startex, startloc));
      } else if( ltype == "stitch" ) {
	out->write(format("[TRACE %3s %s%s %s %s]\n",
	  tr, startex, startloc, ltype, fmtfunc(func, pc)));
      } else if( link == tr || link == 0 ) {
	out->write(format("[TRACE %3s %s%s %s]\n",
	  tr, startex, startloc, ltype));
      } else if( ltype == "root" ) {
	out->write(format("[TRACE %3s %s%s -> %d]\n",
	  tr, startex, startloc, link));
      } else {
	out->write(format("[TRACE %3s %s%s -> %d %s]\n",
	  tr, startex, startloc, link, ltype));
      }
    } else {
      out->write(format("[TRACE %s]\n", what));
    }
    out->flush();
  }
}

//----------------------------------------------------------------------------

// Detach dump handlers.
var function dumpoff() {
  if( active ) {
    active = false;
    jit.attach(dump_trace);
    if( out && out != stdout && out != stderr ) { out->close(); }
    out = null;
  }
}

// Open the output file and attach dump handlers.
var function dumpon(outfile) {
  if( active ) { dumpoff(); }
  if( ! outfile ) { outfile = os.getenv("LUAJIT_VERBOSEFILE"); }
  if( outfile ) {
    out = outfile == "-" && stdout || assert(io.open(outfile, "w"));
  } else {
    out = stderr;
  }
  jit.attach(dump_trace, "trace");
  active = true;
}

// Public module functions.
return {
  on = dumpon,
  off = dumpoff,
  start = dumpon // For -j command line option.
};

