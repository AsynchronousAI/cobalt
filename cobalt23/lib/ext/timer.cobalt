/*
I use this too often, so now it goes here

override T.getTime to change the timing function
override T.out to change the output file handle
--*/

var hasffi, ffi = pcall(require, 'ffi');

var T = {};

T.out = io.stderr;

if( ! hasffi || ffi.os == 'Windows' ) {
	// in linux this is the live time, or something other than the actual time
	T.getTime = os.clock;
} else {
	require ('ffi.req') ('c.sys.time');	// gettimeofday
	require ('ffi.req') ('c.string');		// strerror
	var errno = require ('ffi.req') ('c.errno');
	var gettimeofday_tv = ffi.new('struct timeval[1]');
	function T.getTime() {
		var result = ffi.C.gettimeofday(gettimeofday_tv, null);
		if( result != 0 ) {
			error(ffi.string(ffi.C.strerror(errno.errno())));
		}
		return tonumber(gettimeofday_tv[0].tv_sec) + tonumber(gettimeofday_tv[0].tv_usec) / 1000000;
	}
}

T.depth = 0;
T.tab = ' ';

var function timerReturn(name, startTime, indent, ...) {
	T.depth = T.depth - 1;
	var endTime = T.getTime();
	T.out->write(indent..'...done ');
	if( name ) {
		T.out->write(name..' ');
	}
	T.out->write('('..(endTime - startTime)..'s)\n');
	T.out->flush();
	return ...;
}

function T.timer(name, cb, ...) {
	var indent = T.tab->rep(T.depth);
	if( name ) {
		T.out->write(indent..name..'...\n');
	}
	T.out->flush();
	var startTime = T.getTime();
	T.depth = T.depth + 1;
	return timerReturn(name, startTime, indent, cb(...));
}

setmetatable(T, {
	// call forwards to timer:
	__call = function(this, ...) {
		return this.timer(...);
	},
});

return T;
