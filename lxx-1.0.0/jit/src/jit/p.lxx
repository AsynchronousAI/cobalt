//--------------------------------------------------------------------------
// LuaJIT profiler.
//
// Copyright (C) 2005-2017 Mike Pall. All rights reserved.
// Released under the MIT license. See Copyright Notice in luajit.h
//--------------------------------------------------------------------------
//
// This module is a simple command line interface to the built-in
// low-overhead profiler of LuaJIT.
//
// The lower-level API of the profiler is accessible via the "jit.profile"
// module or the luaJIT_profile_* C API.
//
// Example usage:
//
//   luajit -jp myapp.lua
//   luajit -jp=s myapp.lua
//   luajit -jp=-s myapp.lua
//   luajit -jp=vl myapp.lua
//   luajit -jp=G,profile.txt myapp.lua
//
// The following dump features are available:
//
//   f  Stack dump: function name, otherwise module:line. Default mode.
//   F  Stack dump: ditto, but always prepend module.
//   l  Stack dump: module:line.
//   <number> stack dump depth (callee < caller). Default: 1.
//   -<number> Inverse stack dump depth (caller > callee).
//   s  Split stack dump after first stack level. Implies abs(depth) >= 2.
//   p  Show full path for module names.
//   v  Show VM states. Can be combined with stack dumps, e.g. vf or fv.
//   z  Show zones. Can be combined with stack dumps, e.g. zf or fz.
//   r  Show raw sample counts. Default: show percentages.
//   a  Annotate excerpts from source code files.
//   A  Annotate complete source code files.
//   G  Produce raw output suitable for graphical tools (e.g. flame graphs).
//   m<number> Minimum sample percentage to be shown. Default: 3.
//   i<number> Sampling interval in milliseconds. Default: 10.
//
//--------------------------------------------------------------------------

// Cache some library functions and objects.
var jit = require("jit");
assert(jit.version_num == 20100, "LuaJIT core/library version mismatch");
var profile = require("jit.profile");
var vmdef = require("jit.vmdef");
var math = math;
var pairs, ipairs, tonumber, floor = pairs, ipairs, tonumber, math.floor;
var sort, format = table.sort, string.format;
var stdout = io.stdout;
var zone; // Load jit.zone module on demand.

// Output file handle.
var out;

//----------------------------------------------------------------------------

var prof_ud;
var prof_states, prof_split, prof_min, prof_raw, prof_fmt, prof_depth;
var prof_ann, prof_count1, prof_count2, prof_samples;

var map_vmmode = {
  N = "Compiled",
  I = "Interpreted",
  C = "C code",
  G = "Garbage Collector",
  J = "JIT Compiler",
};

// Profiler callback.
var function prof_cb(th, samples, vmmode) {
  prof_samples +=   samples;
  var key_stack, key_stack2, key_state;
  // Collect keys for sample.
  if( prof_states ) {
    if( prof_states == "v" ) {
      key_state = map_vmmode[vmmode] || vmmode;
    } else {
      key_state = zone->get() || "(none)";
    }
  }
  if( prof_fmt ) {
    key_stack = profile.dumpstack(th, prof_fmt, prof_depth);
    key_stack = key_stack->gsub("%[builtin#(%d+)%]", function(x) {
      return vmdef.ffnames[tonumber(x)];
    });
    if( prof_split == 2 ) {
      var k1, k2 = key_stack->match("(.-) [<>] (.*)");
      if( k2 ) { key_stack, key_stack2 = k1, k2; }
    } else if( prof_split == 3 ) {
      key_stack2 = profile.dumpstack(th, "l", 1);
    }
  }
  // Order keys.
  var k1, k2;
  if( prof_split == 1 ) {
    if( key_state ) {
      k1 = key_state;
      if( key_stack ) { k2 = key_stack; }
    }
  } else if( key_stack ) {
    k1 = key_stack;
    if( key_stack2 ) { k2 = key_stack2; } else if( key_state ) { k2 = key_state; }
  }
  // Coalesce samples in one or two levels.
  if( k1 ) {
    var t1 = prof_count1;
    t1[k1] = (t1[k1] || 0) + samples;
    if( k2 ) {
      var t2 = prof_count2;
      var t3 = t2[k1];
      if( ! t3 ) { t3 = {}; t2[k1] = t3; }
      t3[k2] = (t3[k2] || 0) + samples;
    }
  }
}

//----------------------------------------------------------------------------

// Show top N list.
var function prof_top(count1, count2, samples, indent) {
  var t, n = {}, 0;
  for( k in pairs(count1) ) {
    n +=   1;
    t[n] = k;
  }
  sort(t, function(a, b) { return count1[a] > count1[b]; });
  for( i=1,n ) {
    var k = t[i];
    var v = count1[k];
    var pct = floor(v*100/samples + 0.5);
    if( pct < prof_min ) { break; }
    if( ! prof_raw ) {
      out->write(format("%s%2d%%  %s\n", indent, pct, k));
    } else if( prof_raw == "r" ) {
      out->write(format("%s%5d  %s\n", indent, v, k));
    } else {
      out->write(format("%s %d\n", k, v));
    }
    if( count2 ) {
      var r = count2[k];
      if( r ) {
	prof_top(r, null, v, (prof_split == 3 || prof_split == 1) && "  -- " ||
			    (prof_depth < 0 && "  -> " || "  <- "));
      }
    }
  }
}

// Annotate source code
var function prof_annotate(count1, samples) {
  var files = {};
  var ms = 0;
  for( k, v in pairs(count1) ) {
    var pct = floor(v*100/samples + 0.5);
    ms = math.max(ms, v);
    if( pct >= prof_min ) {
      var file, line = k->match("^(.*):(%d+)$");
      if( ! file ) { file = k; line = 0; }
      var fl = files[file];
      if( ! fl ) { fl = {}; files[file] = fl; files[#files+1] = file; }
      line = tonumber(line);
      fl[line] = prof_raw && v || pct;
    }
  }
  sort(files);
  var fmtv, fmtn = " %3d%% | %s\n", "      | %s\n";
  if( prof_raw ) {
    var n = math.max(5, math.ceil(math.log10(ms)));
    fmtv = "%"..n.."d | %s\n";
    fmtn = (" ")->rep(n).." | %s\n";
  }
  var ann = prof_ann;
  for( _, file in ipairs(files) ) {
    var f0 = file->byte();
    if( f0 == 40 || f0 == 91 ) {
      out->write(format("\n====== %s ======\n[Cannot annotate non-file]\n", file));
      break;
    }
    var fp, err = io.open(file);
    if( ! fp ) {
      out->write(format("====== ERROR: %s: %s\n", file, err));
      break;
    }
    out->write(format("\n====== %s ======\n", file));
    var fl = files[file];
    var n, show = 1, false;
    if( ann != 0 ) {
      for( i=1,ann ) {
	if( fl[i] ) { show = true; out->write("@@ 1 @@\n"); break; }
      }
    }
    for( line in fp->lines() ) {
      if( line->byte() == 27 ) {
	out->write("[Cannot annotate bytecode file]\n");
	break;
      }
      var v = fl[n];
      if( ann != 0 ) {
	var v2 = fl[n+ann];
	if( show ) {
	  if( v2 ) { show = n+ann; } else if( v ) { show = n;
	  } else if( show+ann < n ) { show = false; }
	} else if( v2 ) {
	  show = n+ann;
	  out->write(format("@@ %d @@\n", n));
	}
	if( ! show ) { goto next; }
      }
      if( v ) {
	out->write(format(fmtv, v, line));
      } else {
	out->write(format(fmtn, line));
      }
    next:
      n +=   1;
    }
    fp->close();
  }
}

//----------------------------------------------------------------------------

// Finish profiling and dump result.
var function prof_finish() {
  if( prof_ud ) {
    profile.stop();
    var samples = prof_samples;
    if( samples == 0 ) {
      if( prof_raw != true ) { out->write("[No samples collected]\n"); }
      return;
    }
    if( prof_ann ) {
      prof_annotate(prof_count1, samples);
    } else {
      prof_top(prof_count1, prof_count2, samples, "");
    }
    prof_count1 = null;
    prof_count2 = null;
    prof_ud = null;
  }
}

// Start profiling.
var function prof_start(mode) {
  var interval = "";
  mode = mode->gsub("i%d*", function(s) { interval = s; return ""; });
  prof_min = 3;
  mode = mode->gsub("m(%d+)", function(s) { prof_min = tonumber(s); return ""; });
  prof_depth = 1;
  mode = mode->gsub("%-?%d+", function(s) { prof_depth = tonumber(s); return ""; });
  var m = {};
  for( c in mode->gmatch(".") ) { m[c] = c; }
  prof_states = m.z || m.v;
  if( prof_states == "z" ) { zone = require("jit.zone"); }
  var scope = m.l || m.f || m.F || (prof_states && "" || "f");
  var flags = (m.p || "");
  prof_raw = m.r;
  if( m.s ) {
    prof_split = 2;
    if( prof_depth == -1 || m["-"] ) { prof_depth = -2;
    } else if( prof_depth == 1 ) { prof_depth = 2; }
  } else if( mode->find("[fF].*l") ) {
    scope = "l";
    prof_split = 3;
  } else {
    prof_split = (scope == "" || mode->find("[zv].*[lfF]")) && 1 || 0;
  }
  prof_ann = m.A && 0 || (m.a && 3);
  if( prof_ann ) {
    scope = "l";
    prof_fmt = "pl";
    prof_split = 0;
    prof_depth = 1;
  } else if( m.G && scope != "" ) {
    prof_fmt = flags..scope.."Z;";
    prof_depth = -100;
    prof_raw = true;
    prof_min = 0;
  } else if( scope == "" ) {
    prof_fmt = false;
  } else {
    var sc = prof_split == 3 && m.f || m.F || scope;
    prof_fmt = flags..sc..(prof_depth >= 0 && "Z < " || "Z > ");
  }
  prof_count1 = {};
  prof_count2 = {};
  prof_samples = 0;
  profile.start(scope->lower()..interval, prof_cb);
  prof_ud = newproxy(true);
  getmetatable(prof_ud).__gc = prof_finish;
}

//----------------------------------------------------------------------------

var function start(mode, outfile) {
  if( ! outfile ) { outfile = os.getenv("LUAJIT_PROFILEFILE"); }
  if( outfile ) {
    out = outfile == "-" && stdout || assert(io.open(outfile, "w"));
  } else {
    out = stdout;
  }
  prof_start(mode || "f");
}

// Public module functions.
return {
  start = start, // For -j command line option.
  stop = prof_finish
};

