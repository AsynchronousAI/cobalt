/*
Cobalt Bytecode Optimizer.

Does not need any external libraries or the preprocessor since this is packaged with the compiler.
*/
// BYTECODE PARSER
function parse(bytecode){
    var i = 1
    var opcodes = {}

    while (i <= #bytecode) {
        var opcode = string.byte(bytecode, i)
        table.insert(opcodes, opcode)
        i = i + 1

        if (opcode >= 0x80) {
            i = i + 3
        }else if (opcode >= 0x60) {
            i = i + 2
        }else if (opcode >= 0x40) {
            i = i + 1
        }
    }

    return opcodes
}

// ALL OPTIMIZERS
var Optimizers = {}

function Optimizers::null(byte){
    // Removes all null opcodes.
    for (i, v in pairs(byte)) {
        if (v == 0x01) {
            table.remove(byte, i)
        }
    }
}

// INTERFACE
function O1(){
    // Level 1 optimizations.
}

function O2(){
    // Level 2 optimizations.
}

function O3(){
    // Level 3 optimizations.
}

function Os(){
    // Bytecode size optimizations.
}

// TEST
function test(){
    print("I am a test")
    for (i = 1,10) {
        print(i)
    }

    return 0
}
for (i, v in pairs(parse(string.dump(test)))) print(i, v)

return {
    "O1": O1,
    "O2": O2,
    "O3": O3,
    "Os": Os
};