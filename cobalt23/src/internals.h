/* ============================================================================== //
// This file is apart of the Cobalt Programming Language. Cobalt is under the MIT //
// License. Read `cobalt.h` for license information.                              //
// ============================================================================== */

/* Auto generated by makecore.awk, exposes internals */

#ifndef luacore_h
#define luacore_h
#ifdef __cplusplus
extern "C" {
#endif

#ifndef lua_h
#define lua_h

#include <stdarg.h>
#include <stddef.h>


#define COBALT_VERSION_MAJOR "23"
#define COBALT_VERSION_MINOR "0"
#define COBALT_VERSION_RELEASE "0"

#define COBALT_VERSION_NUM 2300
#define COBALTLUA_VERSION_NUM 506
#define COBALT_VERSION_RELEASE_NUM (COBALT_VERSION_NUM * 100 + 4)

#define LUA_VERSION "cobalt23"
#define LUA_RELEASE LUA_VERSION "." COBALT_VERSION_RELEASE
#define LUA_COPYRIGHT LUA_RELEASE "  Read full credits in CREDITS.md"
#define LUA_AUTHORS ""

/* mark for precompiled code ('<esc>Lua') */
#define LUA_SIGNATURE                                                       \
  "\x1b" LUA_VERSION "\x01\r\n" COBALT_VERSION_MINOR COBALT_VERSION_RELEASE \
  "\r\n\x19"

/* option for multiple returns in 'lua_pcall' and 'lua_call' */
#define LUA_MULTRET (-1)

/*
** Pseudo-indices
** (-LUAI_MAXSTACK is the minimum valid index; we keep some free empty
** space after that to help overflow detection)
*/
#define LUA_REGISTRYINDEX (-LUAI_MAXSTACK - 1000)
#define lua_upvalueindex(i) (LUA_REGISTRYINDEX - (i))

/* thread status */
#define LUA_OK 0
#define LUA_YIELD 1
#define LUA_ERRRUN 2
#define LUA_ERRSYNTAX 3
#define LUA_ERRMEM 4
#define LUA_ERRERR 5

typedef struct lua_State lua_State;

/*
** basic types
*/
#define LUA_TNONE (-1)

#define LUA_TNIL 0
#define LUA_TBOOLEAN 1
#define LUA_TLIGHTUSERDATA 2
#define LUA_TNUMBER 3
#define LUA_TSTRING 4
#define LUA_TTABLE 5
#define LUA_TFUNCTION 6
#define LUA_TUSERDATA 7
#define LUA_TTHREAD 8

#define LUA_NUMTYPES 9

/* minimum Lua stack available to a C function */
#define LUA_MINSTACK 20

/* predefined values in the registry */
#define LUA_RIDX_MAINTHREAD 1
#define LUA_RIDX_GLOBALS 2
#define LUA_RIDX_LAST LUA_RIDX_GLOBALS

/* type of numbers in Lua */
typedef LUA_NUMBER lua_Number;

/* type for integer functions */
typedef LUA_INTEGER lua_Integer;

/* unsigned integer type */
typedef LUA_UNSIGNED lua_Unsigned;

/* type for continuation-function contexts */
typedef LUA_KCONTEXT lua_KContext;

/*
** Type for C functions registered with Lua
*/
typedef int (*lua_CFunction)(lua_State *L);

/*
** Type for continuation functions
*/
typedef int (*lua_KFunction)(lua_State *L, int status, lua_KContext ctx);

/*
** Type for functions that read/write blocks when loading/dumping Lua chunks
*/
typedef const char *(*lua_Reader)(lua_State *L, void *ud, size_t *sz);

typedef int (*lua_Writer)(lua_State *L, const void *p, size_t sz, void *ud);

/*
** Type for memory-allocation functions
*/
typedef void *(*lua_Alloc)(void *ud, void *ptr, size_t osize, size_t nsize);

/*
** Type for warning functions
*/
typedef void (*lua_WarnFunction)(void *ud, const char *msg, int tocont);

/*
** generic extra include file
*/
#if defined(LUA_USER_H)
#include LUA_USER_H
#endif

/*
** RCS ident string
*/
extern const char lua_ident[];

/*
** state manipulation
*/
LUA_API lua_State *(lua_newstate)(lua_Alloc f, void *ud);
LUA_API void(lua_close)(lua_State *L);
LUA_API lua_State *(lua_newthread)(lua_State *L);
LUA_API int(lua_resetthread)(lua_State *L);

LUA_API lua_CFunction(lua_atpanic)(lua_State *L, lua_CFunction panicf);

LUA_API lua_Number(lua_version)(lua_State *L);

/*
** basic stack manipulation
*/
LUA_API int(lua_absindex)(lua_State *L, int idx);
LUA_API int(lua_gettop)(lua_State *L);
LUA_API void(lua_settop)(lua_State *L, int idx);
LUA_API void(lua_pushvalue)(lua_State *L, int idx);
LUA_API void(lua_rotate)(lua_State *L, int idx, int n);
LUA_API void(lua_copy)(lua_State *L, int fromidx, int toidx);
LUA_API int(lua_checkstack)(lua_State *L, int n);

LUA_API void(lua_xmove)(lua_State *from, lua_State *to, int n);

/*
** table locking
*/

LUA_API void  (lua_locktable) (lua_State *L, int idx);
LUA_API int   (lua_istablelocked) (lua_State *L, int idx);
LUA_API void  (lua_erriflocked) (lua_State *L, int idx);

/*
** access functions (stack -> C)
*/

LUA_API int(lua_isnumber)(lua_State *L, int idx);
LUA_API int(lua_isstring)(lua_State *L, int idx);
LUA_API int(lua_iscfunction)(lua_State *L, int idx);
LUA_API int(lua_isinteger)(lua_State *L, int idx);
LUA_API int(lua_isuserdata)(lua_State *L, int idx);
LUA_API int(lua_type)(lua_State *L, int idx);
LUA_API const char *(lua_typename)(lua_State *L, int tp);

LUA_API lua_Number(lua_tonumberx)(lua_State *L, int idx, int *isnum);
LUA_API lua_Integer(lua_tointegerx)(lua_State *L, int idx, int *isnum);
LUA_API int(lua_toboolean)(lua_State *L, int idx);
LUA_API const char *(lua_tolstring)(lua_State *L, int idx, size_t *len);
LUA_API lua_Unsigned(lua_rawlen)(lua_State *L, int idx);
LUA_API lua_CFunction(lua_tocfunction)(lua_State *L, int idx);
LUA_API void *(lua_touserdata)(lua_State *L, int idx);
LUA_API lua_State *(lua_tothread)(lua_State *L, int idx);
LUA_API const void *(lua_topointer)(lua_State *L, int idx);

/*
** Comparison and arithmetic functions
*/

#define LUA_OPADD 0 /* ORDER TM, ORDER OP */
#define LUA_OPSUB 1
#define LUA_OPMUL 2
#define LUA_OPMOD 3
#define LUA_OPPOW 4
#define LUA_OPDIV 5
#define LUA_OPIDIV 6
#define LUA_OPBAND 7
#define LUA_OPBOR 8
#define LUA_OPBXOR 9
#define LUA_OPSHL 10
#define LUA_OPSHR 11
#define LUA_OPUNM 12
#define LUA_OPBNOT 13

LUA_API void(lua_arith)(lua_State *L, int op);

#define LUA_OPEQ 0
#define LUA_OPLT 1
#define LUA_OPLE 2

LUA_API int(lua_rawequal)(lua_State *L, int idx1, int idx2);
LUA_API int(lua_compare)(lua_State *L, int idx1, int idx2, int op);

/*
** push functions (C -> stack)
*/
LUA_API void(lua_pushnil)(lua_State *L);
LUA_API void(lua_pushnumber)(lua_State *L, lua_Number n);
LUA_API void(lua_pushinteger)(lua_State *L, lua_Integer n);
LUA_API const char *(lua_pushlstring)(lua_State *L, const char *s, size_t len);
LUA_API const char *(lua_pushstring)(lua_State *L, const char *s);
LUA_API const char *(lua_pushvfstring)(lua_State *L, const char *fmt,
                                       va_list argp);
LUA_API const char *(lua_pushfstring)(lua_State *L, const char *fmt, ...);
LUA_API void(lua_pushcclosure)(lua_State *L, lua_CFunction fn, int n);
LUA_API void(lua_pushboolean)(lua_State *L, int b);
LUA_API void(lua_pushlightuserdata)(lua_State *L, void *p);
LUA_API int(lua_pushthread)(lua_State *L);

/*
** get functions (Lua -> stack)
*/
LUA_API int(lua_getglobal)(lua_State *L, const char *name);
LUA_API int(lua_gettable)(lua_State *L, int idx);
LUA_API int(lua_getfield)(lua_State *L, int idx, const char *k);
LUA_API int(lua_geti)(lua_State *L, int idx, lua_Integer n);
LUA_API int(lua_rawget)(lua_State *L, int idx);
LUA_API int(lua_rawgeti)(lua_State *L, int idx, lua_Integer n);
LUA_API int(lua_rawgetp)(lua_State *L, int idx, const void *p);

LUA_API void(lua_createtable)(lua_State *L, int narr, int nrec);
LUA_API void *(lua_newuserdatauv)(lua_State *L, size_t sz, int nuvalue);
LUA_API int(lua_getmetatable)(lua_State *L, int objindex);
LUA_API int(lua_getiuservalue)(lua_State *L, int idx, int n);

/*
** set functions (stack -> Lua)
*/
LUA_API void(lua_setglobal)(lua_State *L, const char *name);
LUA_API void(lua_settable)(lua_State *L, int idx);
LUA_API void(lua_setfield)(lua_State *L, int idx, const char *k);
LUA_API void(lua_seti)(lua_State *L, int idx, lua_Integer n);
LUA_API void(lua_rawset)(lua_State *L, int idx);
LUA_API void(lua_rawseti)(lua_State *L, int idx, lua_Integer n);
LUA_API void(lua_rawsetp)(lua_State *L, int idx, const void *p);
LUA_API int(lua_setmetatable)(lua_State *L, int objindex);
LUA_API int(lua_setiuservalue)(lua_State *L, int idx, int n);

/*
** 'load' and 'call' functions (load and run Lua code)
*/
LUA_API void(lua_callk)(lua_State *L, int nargs, int nresults, lua_KContext ctx,
                        lua_KFunction k);
#define lua_call(L, n, r) lua_callk(L, (n), (r), 0, NULL)

LUA_API int(lua_pcallk)(lua_State *L, int nargs, int nresults, int errfunc,
                        lua_KContext ctx, lua_KFunction k);
#define lua_pcall(L, n, r, f) lua_pcallk(L, (n), (r), (f), 0, NULL)

LUA_API int(lua_load)(lua_State *L, lua_Reader reader, void *dt,
                      const char *chunkname, const char *mode);

LUA_API int(lua_dump)(lua_State *L, lua_Writer writer, void *data, int strip);

/*
** coroutine functions
*/
LUA_API int(lua_yieldk)(lua_State *L, int nresults, lua_KContext ctx,
                        lua_KFunction k);
LUA_API int(lua_resume)(lua_State *L, lua_State *from, int narg, int *nres);
LUA_API int(lua_status)(lua_State *L);
LUA_API int(lua_isyieldable)(lua_State *L);

#define lua_yield(L, n) lua_yieldk(L, (n), 0, NULL)

/*
** Warning-related functions
*/
LUA_API void(lua_setwarnf)(lua_State *L, lua_WarnFunction f, void *ud);
LUA_API void(lua_warning)(lua_State *L, const char *msg, int tocont);

/*
** garbage-collection function and options
*/

#define LUA_GCSTOP 0
#define LUA_GCRESTART 1
#define LUA_GCCOLLECT 2
#define LUA_GCCOUNT 3
#define LUA_GCCOUNTB 4
#define LUA_GCSTEP 5
#define LUA_GCSETPAUSE 6
#define LUA_GCSETSTEPMUL 7
#define LUA_GCISRUNNING 9
#define LUA_GCGEN 10
#define LUA_GCINC 11

LUA_API int(lua_gc)(lua_State *L, int what, ...);

/*
** miscellaneous functions
*/

LUA_API int(lua_error)(lua_State *L);

LUA_API int(lua_next)(lua_State *L, int idx);

LUA_API void(lua_concat)(lua_State *L, int n);
LUA_API void(lua_len)(lua_State *L, int idx);

LUA_API size_t(lua_stringtonumber)(lua_State *L, const char *s);

LUA_API lua_Alloc(lua_getallocf)(lua_State *L, void **ud);
LUA_API void(lua_setallocf)(lua_State *L, lua_Alloc f, void *ud);

LUA_API void(lua_toclose)(lua_State *L, int idx);
LUA_API void(lua_closeslot)(lua_State *L, int idx);

/*
** {==============================================================
** some useful macros
** ===============================================================
*/

#define lua_getextraspace(L) ((void *)((char *)(L)-LUA_EXTRASPACE))

#define lua_tonumber(L, i) lua_tonumberx(L, (i), NULL)
#define lua_tointeger(L, i) lua_tointegerx(L, (i), NULL)

#define lua_pop(L, n) lua_settop(L, -(n)-1)

#define lua_newtable(L) lua_createtable(L, 0, 0)

#define lua_register(L, n, f) (lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))

#define lua_pushcfunction(L, f) lua_pushcclosure(L, (f), 0)

#define lua_isfunction(L, n) (lua_type(L, (n)) == LUA_TFUNCTION)
#define lua_istable(L, n) (lua_type(L, (n)) == LUA_TTABLE)
#define lua_islightuserdata(L, n) (lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
#define lua_isnil(L, n) (lua_type(L, (n)) == LUA_TNIL)
#define lua_isboolean(L, n) (lua_type(L, (n)) == LUA_TBOOLEAN)
#define lua_isthread(L, n) (lua_type(L, (n)) == LUA_TTHREAD)
#define lua_isnone(L, n) (lua_type(L, (n)) == LUA_TNONE)
#define lua_isnoneornil(L, n) (lua_type(L, (n)) <= 0)

#define lua_pushliteral(L, s) lua_pushstring(L, "" s)

#define lua_pushglobaltable(L) \
  ((void)lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS))

#define lua_tostring(L, i) lua_tolstring(L, (i), NULL)

#define lua_insert(L, idx) lua_rotate(L, (idx), 1)

#define lua_remove(L, idx) (lua_rotate(L, (idx), -1), lua_pop(L, 1))

#define lua_replace(L, idx) (lua_copy(L, -1, (idx)), lua_pop(L, 1))

/* }============================================================== */

/*
** {==============================================================
** Typechecker
** ===============================================================
*/
#define cobaltT_checkBoolean(L, narg) \
  (lua_type(L, (narg)) == LUA_TBOOLEAN || luaL_typeerror(L, (narg), "boolean"))

#define cobaltT_checkInteger(L, narg) \
  (lua_type(L, (narg)) == LUA_TNUMBER || luaL_typeerror(L, (narg), "integer"))

#define cobaltT_checkNumber(L, narg) \
  (lua_type(L, (narg)) == LUA_TNUMBER || luaL_typeerror(L, (narg), "number"))

#define cobaltT_checkString(L, narg) \
  (lua_type(L, (narg)) == LUA_TSTRING || luaL_typeerror(L, (narg), "string"))

#define cobaltT_checkTable(L, narg) \
  (lua_type(L, (narg)) == LUA_TTABLE || luaL_typeerror(L, (narg), "table"))

#define cobaltT_checkFunction(L, narg) \
  (lua_type(L, (narg)) == LUA_TFUNCTION || luaL_typeerror(L, (narg), "function"))

#define cobaltT_checkThread(L, narg) \
  (lua_type(L, (narg)) == LUA_TTHREAD || luaL_typeerror(L, (narg), "thread"))

#define cobaltT_checkUserdata(L, narg) \
  (lua_type(L, (narg)) == LUA_TUSERDATA || luaL_typeerror(L, (narg), "userdata"))

#define cobaltT_checkAny(L, narg) (lua_type(L, (narg)) != LUA_TNONE)

#define cobaltT_checkChar(L, narg) \
  ((lua_type(L, (narg)) == LUA_TSTRING || luaL_typeerror(L, (narg), "string")) && \
   lua_rawlen(L, (narg)) == 1)

#define cobaltT_optBoolean(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkBoolean(L, (narg)))

#define cobaltT_optInteger(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkInteger(L, (narg)))

#define cobaltT_optNumber(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkNumber(L, (narg)))

#define cobaltT_optString(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkString(L, (narg)))

#define cobaltT_optTable(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkTable(L, (narg)))

#define cobaltT_optFunction(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkFunction(L, (narg)))

#define cobaltT_optThread(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkThread(L, (narg)))

#define cobaltT_optUserdata(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkUserdata(L, (narg)))

#define cobaltT_optChar(L, narg, d) \
  (lua_type(L, (narg)) == LUA_TNONE ? (d) : cobaltT_checkChar(L, (narg)))


/* }============================================================== */

/*
** {==============================================================
** compatibility macros
** ===============================================================
*/
#if defined(LUA_COMPAT_APIINTCASTS)

#define lua_pushunsigned(L, n) lua_pushinteger(L, (lua_Integer)(n))
#define lua_tounsignedx(L, i, is) ((lua_Unsigned)lua_tointegerx(L, i, is))
#define lua_tounsigned(L, i) lua_tounsignedx(L, (i), NULL)

#endif

#define lua_newuserdata(L, s) lua_newuserdatauv(L, s, 1)
#define lua_getuservalue(L, idx) lua_getiuservalue(L, idx, 1)
#define lua_setuservalue(L, idx) lua_setiuservalue(L, idx, 1)

#define LUA_NUMTAGS LUA_NUMTYPES

/* }============================================================== */

/*
** {======================================================================
** Debug API
** =======================================================================
*/

/*
** Event codes
*/
#define LUA_HOOKCALL 0
#define LUA_HOOKRET 1
#define LUA_HOOKLINE 2
#define LUA_HOOKCOUNT 3
#define LUA_HOOKTAILCALL 4

/*
** Event masks
*/
#define LUA_MASKCALL (1 << LUA_HOOKCALL)
#define LUA_MASKRET (1 << LUA_HOOKRET)
#define LUA_MASKLINE (1 << LUA_HOOKLINE)
#define LUA_MASKCOUNT (1 << LUA_HOOKCOUNT)

typedef struct lua_Debug lua_Debug; /* activation record */

/* Functions to be called by the debugger in specific events */
typedef void (*lua_Hook)(lua_State *L, lua_Debug *ar);

LUA_API int(lua_getstack)(lua_State *L, int level, lua_Debug *ar);
LUA_API int(lua_getinfo)(lua_State *L, const char *what, lua_Debug *ar);
LUA_API const char *(lua_getlocal)(lua_State *L, const lua_Debug *ar, int n);
LUA_API const char *(lua_setlocal)(lua_State *L, const lua_Debug *ar, int n);
LUA_API const char *(lua_getupvalue)(lua_State *L, int funcindex, int n);
LUA_API const char *(lua_setupvalue)(lua_State *L, int funcindex, int n);

LUA_API void *(lua_upvalueid)(lua_State *L, int fidx, int n);
LUA_API void(lua_upvaluejoin)(lua_State *L, int fidx1, int n1, int fidx2,
                              int n2);

LUA_API void(lua_sethook)(lua_State *L, lua_Hook func, int mask, int count);
LUA_API lua_Hook(lua_gethook)(lua_State *L);
LUA_API int(lua_gethookmask)(lua_State *L);
LUA_API int(lua_gethookcount)(lua_State *L);

LUA_API int(lua_setcstacklimit)(lua_State *L, unsigned int limit);

struct lua_Debug {
  int event;
  const char *name;           /* (n) */
  const char *namewhat;       /* (n) 'global', 'local', 'field', 'method' */
  const char *what;           /* (S) 'Lua', 'C', 'main', 'tail' */
  const char *source;         /* (S) */
  size_t srclen;              /* (S) */
  int currentline;            /* (l) */
  int linedefined;            /* (S) */
  int lastlinedefined;        /* (S) */
  unsigned char nups;         /* (u) number of upvalues */
  unsigned char nparams;      /* (u) number of parameters */
  char isvararg;              /* (u) */
  char istailcall;            /* (t) */
  unsigned short ftransfer;   /* (r) index of first value transferred */
  unsigned short ntransfer;   /* (r) number of transferred values */
  char short_src[LUA_IDSIZE]; /* (S) */
  /* private part */
  struct CallInfo *i_ci; /* active function */
};

/****************************************************
Full credits are available in the file CREDITS.md

Cobalt is based of Lua 5.4 (with LJS modifications), which is licensed under the
MIT license.

The mark "This file is apart of the Cobalt Programming Language. Cobalt is under the MIT License. Read `cobalt.h` for license information."
represents that the file may be written for Cobalt or an opensource snippet/file that has modifications, You can read all the opensource
licenses in the file CREDITS.md or it may be in the file itself.
/****************************************************/

/* Cobalt License */
/*
 * MIT License
 *
 * Copyright (c) 2023-present cobalt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/****************************************************/
/* Lua License */
/*
Copyright © 1994–2023 Lua.org, PUC-Rio.
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lapi_h
#define lapi_h


/* Increments 'L->top', checking for stack overflows */
#define api_incr_top(L)                                   \
  {                                                       \
    L->top++;                                             \
    api_check(L, L->top <= L->ci->top, "stack overflow"); \
  }

/*
** If a call returns too many multiple returns, the callee may not have
** stack space to accommodate all results. In this case, this macro
** increases its stack space ('L->ci->top').
*/
#define adjustresults(L, nres)                                             \
  {                                                                        \
    if ((nres) <= LUA_MULTRET && L->ci->top < L->top) L->ci->top = L->top; \
  }

/* Ensure the stack has at least 'n' elements */
#define api_checknelems(L, n) \
  api_check(L, (n) < (L->top - L->ci->func), "not enough elements in the stack")

/*
** To reduce the overhead of returning from C functions, the presence of
** to-be-closed variables in these functions is coded in the CallInfo's
** field 'nresults', in a way that functions with no to-be-closed variables
** with zero, one, or "all" wanted results have no overhead. Functions
** with other number of wanted results, as well as functions with
** variables to be closed, have an extra check.
*/

#define hastocloseCfunc(n) ((n) < LUA_MULTRET)

/* Map [-1, inf) (range of 'nresults') into (-inf, -2] */
#define codeNresults(n) (-(n)-3)
#define decodeNresults(n) (-(n)-3)

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lautoc_h
#define lautoc_h

#ifndef LUAA_LUAIMPLEMENTATION
#define LUAA_LUAIMPLEMENTATION
#endif

#include <assert.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*
** Open / Close
*/

#define LUAA_REGISTRYPREFIX "lautoc_"

void luaA_open(lua_State* L);
void luaA_close(lua_State* L);

/*
** Types
*/

#define luaA_type(L, type) luaA_type_add(L, #type, sizeof(type))

enum { LUAA_INVALID_TYPE = -1 };

typedef lua_Integer luaA_Type;
typedef int (*luaA_Pushfunc)(lua_State*, luaA_Type, const void*);
typedef void (*luaA_Tofunc)(lua_State*, luaA_Type, void*, int);

luaA_Type luaA_type_add(lua_State* L, const char* type, size_t size);
luaA_Type luaA_type_find(lua_State* L, const char* type);

const char* luaA_typename(lua_State* L, luaA_Type id);
size_t luaA_typesize(lua_State* L, luaA_Type id);

/*
** Stack
*/

#define luaA_push(L, type, c_in) luaA_push_type(L, luaA_type(L, type), c_in)
#define luaA_to(L, type, c_out, index) \
  luaA_to_type(L, luaA_type(L, type), c_out, index)

#define luaA_conversion(L, type, push_func, to_func) \
  luaA_conversion_type(L, luaA_type(L, type), push_func, to_func);
#define luaA_conversion_push(L, type, func) \
  luaA_conversion_push_type(L, luaA_type(L, type), func)
#define luaA_conversion_to(L, type, func) \
  luaA_conversion_to_type(L, luaA_type(L, type), func)

#define luaA_conversion_registered(L, type) \
  luaA_conversion_registered_type(L, luaA_type(L, type));
#define luaA_conversion_push_registered(L, type) \
  luaA_conversion_push_registered_typ(L, luaA_type(L, type));
#define luaA_conversion_to_registered(L, type) \
  luaA_conversion_to_registered_type(L, luaA_type(L, type));

int luaA_push_type(lua_State* L, luaA_Type type, const void* c_in);
void luaA_to_type(lua_State* L, luaA_Type type, void* c_out, int index);

void luaA_conversion_type(lua_State* L, luaA_Type type_id,
                          luaA_Pushfunc push_func, luaA_Tofunc to_func);
void luaA_conversion_push_type(lua_State* L, luaA_Type type_id,
                               luaA_Pushfunc func);
void luaA_conversion_to_type(lua_State* L, luaA_Type type_id, luaA_Tofunc func);

bool luaA_conversion_registered_type(lua_State* L, luaA_Type type);
bool luaA_conversion_push_registered_type(lua_State* L, luaA_Type type);
bool luaA_conversion_to_registered_type(lua_State* L, luaA_Type type);

int luaA_push_bool(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_char(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_signed_char(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_unsigned_char(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_short(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_unsigned_short(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_int(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_unsigned_int(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_long(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_unsigned_long(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_long_long(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_unsigned_long_long(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_float(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_double(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_long_double(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_char_ptr(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_const_char_ptr(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_void_ptr(lua_State* L, luaA_Type, const void* c_in);
int luaA_push_void(lua_State* L, luaA_Type, const void* c_in);

void luaA_to_bool(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_char(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_signed_char(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_unsigned_char(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_short(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_unsigned_short(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_int(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_unsigned_int(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_long(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_unsigned_long(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_long_long(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_unsigned_long_long(lua_State* L, luaA_Type, void* c_out,
                                int index);
void luaA_to_float(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_double(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_long_double(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_char_ptr(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_const_char_ptr(lua_State* L, luaA_Type, void* c_out, int index);
void luaA_to_void_ptr(lua_State* L, luaA_Type, void* c_out, int index);

/*
** Structs
*/
#define LUAA_INVALID_MEMBER_NAME NULL

#define luaA_struct(L, type) luaA_struct_type(L, luaA_type(L, type))
#define luaA_struct_member(L, type, member, member_type)  \
  luaA_struct_member_type(L, luaA_type(L, type), #member, \
                          luaA_type(L, member_type), offsetof(type, member))

#define luaA_struct_push(L, type, c_in) \
  luaA_struct_push_type(L, luaA_type(L, type), c_in)
#define luaA_struct_push_member(L, type, member, c_in)       \
  luaA_struct_push_member_offset_type(L, luaA_type(L, type), \
                                      offsetof(type, member), c_in)
#define luaA_struct_push_member_name(L, type, member, c_in) \
  luaA_struct_push_member_name_type(L, luaA_type(L, type), member, c_in)

#define luaA_struct_to(L, type, c_out, index) \
  luaA_struct_to_type(L, luaA_type(L, type), c_out, index)
#define luaA_struct_to_member(L, type, member, c_out, index) \
  luaA_struct_to_member_offset_type(L, luaA_type(L, type),   \
                                    offsetof(type, member), c_out, index)
#define luaA_struct_to_member_name(L, type, member, c_out, index) \
  luaA_struct_to_member_name_type(L, luaA_type(L, type), member, c_out, index)

#define luaA_struct_has_member(L, type, member)             \
  luaA_struct_has_member_offset_type(L, luaA_type(L, type), \
                                     offsetof(type, member))
#define luaA_struct_has_member_name(L, type, member) \
  luaA_struct_has_member_name_type(L, luaA_type(L, type), member)

#define luaA_struct_typeof_member(L, type, member)             \
  luaA_struct_typeof_member_offset_type(L, luaA_type(L, type), \
                                        offsetof(type, member))
#define luaA_struct_typeof_member_name(L, type, member) \
  luaA_struct_typeof_member_name_type(L, luaA_type(L, type), member)

#define luaA_struct_registered(L, type) \
  luaA_struct_registered_type(L, luaA_type(L, type))
#define luaA_struct_next_member_name(L, type, member) \
  luaA_struct_next_member_name_type(L, luaA_type(L, type), member)

void luaA_struct_type(lua_State* L, luaA_Type type);
void luaA_struct_member_type(lua_State* L, luaA_Type type, const char* member,
                             luaA_Type member_type, size_t offset);

int luaA_struct_push_type(lua_State* L, luaA_Type type, const void* c_in);
int luaA_struct_push_member_offset_type(lua_State* L, luaA_Type type,
                                        size_t offset, const void* c_in);
int luaA_struct_push_member_name_type(lua_State* L, luaA_Type type,
                                      const char* member, const void* c_in);

void luaA_struct_to_type(lua_State* L, luaA_Type type, void* c_out, int index);
void luaA_struct_to_member_offset_type(lua_State* L, luaA_Type type,
                                       size_t offset, void* c_out, int index);
void luaA_struct_to_member_name_type(lua_State* L, luaA_Type type,
                                     const char* member, void* c_out,
                                     int index);

bool luaA_struct_has_member_offset_type(lua_State* L, luaA_Type type,
                                        size_t offset);
bool luaA_struct_has_member_name_type(lua_State* L, luaA_Type type,
                                      const char* member);

luaA_Type luaA_struct_typeof_member_offset_type(lua_State* L, luaA_Type type,
                                                size_t offset);
luaA_Type luaA_struct_typeof_member_name_type(lua_State* L, luaA_Type type,
                                              const char* member);

bool luaA_struct_registered_type(lua_State* L, luaA_Type type);

const char* luaA_struct_next_member_name_type(lua_State* L, luaA_Type type,
                                              const char* member);

/*
** Enums
*/

#define luaA_enum(L, type) luaA_enum_type(L, luaA_type(L, type), sizeof(type))
#define luaA_enum_value(L, type, value) \
  luaA_enum_value_type(L, luaA_type(L, type), (const type[]){value}, #value);
#define luaA_enum_value_name(L, type, value, name) \
  luaA_enum_value_type(L, luaA_type(L, type), (const type[]){value}, name);

#define luaA_enum_push(L, type, c_in) \
  luaA_enum_push_type(L, luaA_type(L, type), c_in)
#define luaA_enum_to(L, type, c_out, index) \
  luaA_enum_to_type(L, luaA_type(L, type), c_out, index)

#define luaA_enum_has_value(L, type, value) \
  luaA_enum_has_value_type(L, luaA_type(L, type), (const type[]){value})
#define luaA_enum_has_name(L, type, name) \
  luaA_enum_has_name_type(L, luaA_type(L, type), name)

#define luaA_enum_registered(L, type) \
  luaA_enum_registered_type(L, luaA_type(L, type))
#define luaA_enum_next_value_name(L, type, member) \
  luaA_enum_next_value_name_type(L, luaA_type(L, type), member)

void luaA_enum_type(lua_State* L, luaA_Type type, size_t size);
void luaA_enum_value_type(lua_State* L, luaA_Type type, const void* value,
                          const char* name);

int luaA_enum_push_type(lua_State* L, luaA_Type type, const void* c_in);
void luaA_enum_to_type(lua_State* L, luaA_Type type, void* c_out, int index);

bool luaA_enum_has_value_type(lua_State* L, luaA_Type type, const void* value);
bool luaA_enum_has_name_type(lua_State* L, luaA_Type type, const char* name);

bool luaA_enum_registered_type(lua_State* L, luaA_Type type);
const char* luaA_enum_next_value_name_type(lua_State* L, luaA_Type type,
                                           const char* member);

/*
** Functions
*/


#define luaA_function(L, func, ret_t, ...)           \
  luaA_function_declare(func, ret_t, ##__VA_ARGS__); \
  luaA_function_register(L, func, ret_t, ##__VA_ARGS__)
#define luaA_function_declare(func, ret_t, ...)                          \
  LUAA_DECLARE(func, ret_t, LUAA_COUNT(__VA_ARGS__), LUAA_SUFFIX(ret_t), \
               ##__VA_ARGS__)
#define luaA_function_register(L, func, ret_t, ...) \
  LUAA_REGISTER(L, func, ret_t, LUAA_COUNT(__VA_ARGS__), ##__VA_ARGS__)

enum { LUAA_RETURN_STACK_SIZE = 256, LUAA_ARGUMENT_STACK_SIZE = 2048 };

typedef void (*luaA_Func)(void*, void*);

int luaA_call(lua_State* L, void* func_ptr);
int luaA_call_name(lua_State* L, const char* func_name);

void luaA_function_register_type(lua_State* L, void* src_func,
                                 luaA_Func auto_func, const char* name,
                                 luaA_Type ret_tid, int num_args, ...);

#endif
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lautocall_h
#define lautocall_h

#define LUAA_EVAL(...) __VA_ARGS__

/* Join Three Strings */
#define LUAA_JOIN2(X, Y) X##Y
#define LUAA_JOIN3(X, Y, Z) X##Y##Z

/* workaround for MSVC VA_ARGS expansion */
#define LUAA_APPLY(FUNC, ARGS) LUAA_EVAL(FUNC ARGS)

/* Argument Counter */
#define LUAA_COUNT(...) \
  LUAA_COUNT_COLLECT(_, ##__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define LUAA_COUNT_COLLECT(...) LUAA_COUNT_SHIFT(__VA_ARGS__)
#define LUAA_COUNT_SHIFT(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _N, ...) \
  _N

/* Detect Void */
#define LUAA_VOID(X) LUAA_JOIN2(LUAA_VOID_, X)
#define LUAA_VOID_void
#define LUAA_CHECK_N(X, N, ...) N
#define LUAA_CHECK(...) LUAA_CHECK_N(__VA_ARGS__, , )
#define LUAA_SUFFIX(X) LUAA_SUFFIX_CHECK(LUAA_VOID(X))
#define LUAA_SUFFIX_CHECK(X) LUAA_CHECK(LUAA_JOIN2(LUAA_SUFFIX_, X))
#define LUAA_SUFFIX_ ~, _void,

/* Declaration and Register Macros */
#define LUAA_DECLARE(func, ret_t, count, suffix, ...)          \
  LUAA_APPLY(LUAA_JOIN3(luaA_function_declare, count, suffix), \
             (func, ret_t, ##__VA_ARGS__))
// #define LUAA_DECLARE(func, ret_t, count, suffix, ...)
// LUAA_APPLY(LUAA_JOIN3(luaA_function_declare, count, suffix), (func, ret_t,
// ##__VA_ARGS__))
#define LUAA_REGISTER(L, func, ret_t, count, ...)       \
  LUAA_APPLY(LUAA_JOIN2(luaA_function_register, count), \
             (L, func, ret_t, ##__VA_ARGS__))

/*
** MSVC does not allow nested functions
** so function is wrapped in nested struct
*/
#ifdef _MSC_VER

#define luaA_function_declare0(func, ret_t)            \
  struct __luaA_wrap_##func {                          \
    static void __luaA_##func(char* out, char* args) { \
      *(ret_t*)out = func();                           \
    };                                                 \
  }

#define luaA_function_declare0_void(func, ret_t)                  \
  struct __luaA_wrap_##func {                                     \
    static void __luaA_##func(char* out, char* args) { func(); }; \
  }

#define luaA_function_declare1(func, ret_t, arg0_t)    \
  struct __luaA_wrap_##func {                          \
    static void __luaA_##func(char* out, char* args) { \
      arg0_t a0 = *(arg0_t*)args;                      \
      *(ret_t*)out = func(a0);                         \
    };                                                 \
  }

#define luaA_function_declare1_void(func, ret_t, arg0_t) \
  struct __luaA_wrap_##func {                            \
    static void __luaA_##func(char* out, char* args) {   \
      arg0_t a0 = *(arg0_t*)args;                        \
      func(a0);                                          \
    };                                                   \
  }

#define luaA_function_declare2(func, ret_t, arg0_t, arg1_t) \
  struct __luaA_wrap_##func {                               \
    static void __luaA_##func(char* out, char* args) {      \
      arg0_t a0 = *(arg0_t*)args;                           \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));        \
      *(ret_t*)out = func(a0, a1);                          \
    };                                                      \
  }

#define luaA_function_declare2_void(func, ret_t, arg0_t, arg1_t) \
  struct __luaA_wrap_##func {                                    \
    static void __luaA_##func(char* out, char* args) {           \
      arg0_t a0 = *(arg0_t*)args;                                \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));             \
      func(a0, a1);                                              \
    };                                                           \
  }

#define luaA_function_declare3(func, ret_t, arg0_t, arg1_t, arg2_t)   \
  struct __luaA_wrap_##func {                                         \
    static void __luaA_##func(char* out, char* args) {                \
      arg0_t a0 = *(arg0_t*)args;                                     \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                  \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t)); \
      *(ret_t*)out = func(a0, a1, a2);                                \
    };                                                                \
  }

#define luaA_function_declare3_void(func, ret_t, arg0_t, arg1_t, arg2_t) \
  struct __luaA_wrap_##func {                                            \
    static void __luaA_##func(char* out, char* args) {                   \
      arg0_t a0 = *(arg0_t*)args;                                        \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                     \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));    \
      func(a0, a1, a2);                                                  \
    };                                                                   \
  }

#define luaA_function_declare4(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t)    \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      *(ret_t*)out = func(a0, a1, a2, a3);                                     \
    };                                                                         \
  }

#define luaA_function_declare4_void(func, ret_t, arg0_t, arg1_t, arg2_t,       \
                                    arg3_t)                                    \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      func(a0, a1, a2, a3);                                                    \
    };                                                                         \
  }

#define luaA_function_declare5(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,    \
                               arg4_t)                                         \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      *(ret_t*)out = func(a0, a1, a2, a3, a4);                                 \
    };                                                                         \
  }

#define luaA_function_declare5_void(func, ret_t, arg0_t, arg1_t, arg2_t,       \
                                    arg3_t, arg4_t)                            \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      func(a0, a1, a2, a3, a4);                                                \
    };                                                                         \
  }

#define luaA_function_declare6(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,    \
                               arg4_t, arg5_t)                                 \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      *(ret_t*)out = func(a0, a1, a2, a3, a4, a5);                             \
    };                                                                         \
  }

#define luaA_function_declare6_void(func, ret_t, arg0_t, arg1_t, arg2_t,       \
                                    arg3_t, arg4_t, arg5_t)                    \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      func(a0, a1, a2, a3, a4, a5);                                            \
    };                                                                         \
  }

#define luaA_function_declare7(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,    \
                               arg4_t, arg5_t, arg6_t)                         \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6);                         \
    };                                                                         \
  }

#define luaA_function_declare7_void(func, ret_t, arg0_t, arg1_t, arg2_t,       \
                                    arg3_t, arg4_t, arg5_t, arg6_t)            \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      func(a0, a1, a2, a3, a4, a5, a6);                                        \
    };                                                                         \
  }

#define luaA_function_declare8(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,    \
                               arg4_t, arg5_t, arg6_t, arg7_t)                 \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      arg7_t a7 =                                                              \
          *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t));                                          \
      *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6, a7);                     \
    };                                                                         \
  }

#define luaA_function_declare8_void(func, ret_t, arg0_t, arg1_t, arg2_t,       \
                                    arg3_t, arg4_t, arg5_t, arg6_t, arg7_t)    \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      arg7_t a7 =                                                              \
          *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t));                                          \
      func(a0, a1, a2, a3, a4, a5, a6, a7);                                    \
    };                                                                         \
  }

#define luaA_function_declare9(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,    \
                               arg4_t, arg5_t, arg6_t, arg7_t, arg8_t)         \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      arg7_t a7 =                                                              \
          *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t));                                          \
      arg8_t a8 =                                                              \
          *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t) + sizeof(arg7_t));                         \
      *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6, a7, a8);                 \
    };                                                                         \
  }

#define luaA_function_declare9_void(func, ret_t, arg0_t, arg1_t, arg2_t,       \
                                    arg3_t, arg4_t, arg5_t, arg6_t, arg7_t,    \
                                    arg8_t)                                    \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      arg7_t a7 =                                                              \
          *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t));                                          \
      arg8_t a8 =                                                              \
          *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t) + sizeof(arg7_t));                         \
      func(a0, a1, a2, a3, a4, a5, a6, a7, a8);                                \
    };                                                                         \
  }

#define luaA_function_declare10(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,   \
                                arg4_t, arg5_t, arg6_t, arg7_t, arg8_t,        \
                                arg9_t)                                        \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      arg7_t a7 =                                                              \
          *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t));                                          \
      arg8_t a8 =                                                              \
          *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t) + sizeof(arg7_t));                         \
      arg9_t a9 =                                                              \
          *(arg9_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t) + sizeof(arg7_t) + sizeof(arg8_t));        \
      *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);             \
    };                                                                         \
  }

#define luaA_function_declare10_void(func, ret_t, arg0_t, arg1_t, arg2_t,      \
                                     arg3_t, arg4_t, arg5_t, arg6_t, arg7_t,   \
                                     arg8_t, arg9_t)                           \
  struct __luaA_wrap_##func {                                                  \
    static void __luaA_##func(char* out, char* args) {                         \
      arg0_t a0 = *(arg0_t*)args;                                              \
      arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
      arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
      arg3_t a3 =                                                              \
          *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
      arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                             sizeof(arg2_t) + sizeof(arg3_t));                 \
      arg5_t a5 =                                                              \
          *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t));                         \
      arg6_t a6 =                                                              \
          *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));        \
      arg7_t a7 =                                                              \
          *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t));                                          \
      arg8_t a8 =                                                              \
          *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t) + sizeof(arg7_t));                         \
      arg9_t a9 =                                                              \
          *(arg9_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) + \
                     sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +        \
                     sizeof(arg6_t) + sizeof(arg7_t) + sizeof(arg8_t));        \
      func(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);                            \
    };                                                                         \
  }

#define luaA_function_register0(L, func, ret_t)                             \
  luaA_function_register_type(L, func,                                      \
                              (luaA_Func)__luaA_wrap_##func::__luaA_##func, \
                              #func, luaA_type(L, ret_t), 0)

#define luaA_function_register1(L, func, ret_t, arg0_t)             \
  luaA_function_register_type(                                      \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func, \
      luaA_type(L, ret_t), 1, luaA_type(L, arg0_t))

#define luaA_function_register2(L, func, ret_t, arg0_t, arg1_t)     \
  luaA_function_register_type(                                      \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func, \
      luaA_type(L, ret_t), 2, luaA_type(L, arg0_t), luaA_type(L, arg1_t))

#define luaA_function_register3(L, func, ret_t, arg0_t, arg1_t, arg2_t)   \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 3, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t))

#define luaA_function_register4(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                arg3_t)                                   \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 4, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t))

#define luaA_function_register5(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                arg3_t, arg4_t)                           \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 5, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t), luaA_type(L, arg4_t))

#define luaA_function_register6(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                arg3_t, arg4_t, arg5_t)                   \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 6, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t), luaA_type(L, arg4_t),   \
      luaA_type(L, arg5_t))

#define luaA_function_register7(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                arg3_t, arg4_t, arg5_t, arg6_t)           \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 7, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t), luaA_type(L, arg4_t),   \
      luaA_type(L, arg5_t), luaA_type(L, arg6_t))

#define luaA_function_register8(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                arg3_t, arg4_t, arg5_t, arg6_t, arg7_t)   \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 8, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t), luaA_type(L, arg4_t),   \
      luaA_type(L, arg5_t), luaA_type(L, arg6_t), luaA_type(L, arg7_t))

#define luaA_function_register9(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                arg3_t, arg4_t, arg5_t, arg6_t, arg7_t,   \
                                arg8_t)                                   \
  luaA_function_register_type(                                            \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,       \
      luaA_type(L, ret_t), 9, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t), luaA_type(L, arg4_t),   \
      luaA_type(L, arg5_t), luaA_type(L, arg6_t), luaA_type(L, arg7_t),   \
      luaA_type(L, arg8_t))

#define luaA_function_register10(L, func, ret_t, arg0_t, arg1_t, arg2_t,   \
                                 arg3_t, arg4_t, arg5_t, arg6_t, arg7_t,   \
                                 arg8_t, arg9_t)                           \
  luaA_function_register_type(                                             \
      L, func, (luaA_Func)__luaA_wrap_##func::__luaA_##func, #func,        \
      luaA_type(L, ret_t), 10, luaA_type(L, arg0_t), luaA_type(L, arg1_t), \
      luaA_type(L, arg2_t), luaA_type(L, arg3_t), luaA_type(L, arg4_t),    \
      luaA_type(L, arg5_t), luaA_type(L, arg6_t), luaA_type(L, arg7_t),    \
      luaA_type(L, arg8_t), luaA_type(L, arg9_t))

#else

#define luaA_function_declare0(func, ret_t) \
  void __luaA_##func(void* out, void* args) { *(ret_t*)out = func(); }

#define luaA_function_declare0_void(func, ret_t) \
  void __luaA_##func(void* out, void* args) { func(); }

#define luaA_function_declare1(func, ret_t, arg0_t) \
  void __luaA_##func(void* out, void* args) {       \
    arg0_t a0 = *(arg0_t*)args;                     \
    *(ret_t*)out = func(a0);                        \
  }

#define luaA_function_declare1_void(func, ret_t, arg0_t) \
  void __luaA_##func(void* out, void* args) {            \
    arg0_t a0 = *(arg0_t*)args;                          \
    func(a0);                                            \
  }

#define luaA_function_declare2(func, ret_t, arg0_t, arg1_t) \
  void __luaA_##func(void* out, void* args) {               \
    arg0_t a0 = *(arg0_t*)args;                             \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));          \
    *(ret_t*)out = func(a0, a1);                            \
  }

#define luaA_function_declare2_void(func, ret_t, arg0_t, arg1_t) \
  void __luaA_##func(void* out, void* args) {                    \
    arg0_t a0 = *(arg0_t*)args;                                  \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));               \
    func(a0, a1);                                                \
  }

#define luaA_function_declare3(func, ret_t, arg0_t, arg1_t, arg2_t) \
  void __luaA_##func(void* out, void* args) {                       \
    arg0_t a0 = *(arg0_t*)args;                                     \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                  \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t)); \
    *(ret_t*)out = func(a0, a1, a2);                                \
  }

#define luaA_function_declare3_void(func, ret_t, arg0_t, arg1_t, arg2_t) \
  void __luaA_##func(void* out, void* args) {                            \
    arg0_t a0 = *(arg0_t*)args;                                          \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                       \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));      \
    func(a0, a1, a2);                                                    \
  }

#define luaA_function_declare4(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t)  \
  void __luaA_##func(void* out, void* args) {                                \
    arg0_t a0 = *(arg0_t*)args;                                              \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
    arg3_t a3 =                                                              \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
    *(ret_t*)out = func(a0, a1, a2, a3);                                     \
  }

#define luaA_function_declare4_void(func, ret_t, arg0_t, arg1_t, arg2_t,     \
                                    arg3_t)                                  \
  void __luaA_##func(void* out, void* args) {                                \
    arg0_t a0 = *(arg0_t*)args;                                              \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
    arg3_t a3 =                                                              \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
    func(a0, a1, a2, a3);                                                    \
  }

#define luaA_function_declare5(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,  \
                               arg4_t)                                       \
  void __luaA_##func(void* out, void* args) {                                \
    arg0_t a0 = *(arg0_t*)args;                                              \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
    arg3_t a3 =                                                              \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                           sizeof(arg2_t) + sizeof(arg3_t));                 \
    *(ret_t*)out = func(a0, a1, a2, a3, a4);                                 \
  }

#define luaA_function_declare5_void(func, ret_t, arg0_t, arg1_t, arg2_t,     \
                                    arg3_t, arg4_t)                          \
  void __luaA_##func(void* out, void* args) {                                \
    arg0_t a0 = *(arg0_t*)args;                                              \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                           \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));          \
    arg3_t a3 =                                                              \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t)); \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +          \
                           sizeof(arg2_t) + sizeof(arg3_t));                 \
    func(a0, a1, a2, a3, a4);                                                \
  }

#define luaA_function_declare6(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,   \
                               arg4_t, arg5_t)                                \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    *(ret_t*)out = func(a0, a1, a2, a3, a4, a5);                              \
  }

#define luaA_function_declare6_void(func, ret_t, arg0_t, arg1_t, arg2_t,      \
                                    arg3_t, arg4_t, arg5_t)                   \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    func(a0, a1, a2, a3, a4, a5);                                             \
  }

#define luaA_function_declare7(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,   \
                               arg4_t, arg5_t, arg6_t)                        \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6);                          \
  }

#define luaA_function_declare7_void(func, ret_t, arg0_t, arg1_t, arg2_t,      \
                                    arg3_t, arg4_t, arg5_t, arg6_t)           \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    func(a0, a1, a2, a3, a4, a5, a6);                                         \
  }

#define luaA_function_declare8(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,   \
                               arg4_t, arg5_t, arg6_t, arg7_t)                \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    arg7_t a7 = *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t));                  \
    *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6, a7);                      \
  }

#define luaA_function_declare8_void(func, ret_t, arg0_t, arg1_t, arg2_t,      \
                                    arg3_t, arg4_t, arg5_t, arg6_t, arg7_t)   \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    arg7_t a7 = *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t));                  \
    func(a0, a1, a2, a3, a4, a5, a6, a7);                                     \
  }

#define luaA_function_declare9(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,   \
                               arg4_t, arg5_t, arg6_t, arg7_t, arg8_t)        \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    arg7_t a7 = *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t));                  \
    arg8_t a8 = *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t) + sizeof(arg7_t)); \
    *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6, a7, a8);                  \
  }

#define luaA_function_declare9_void(func, ret_t, arg0_t, arg1_t, arg2_t,      \
                                    arg3_t, arg4_t, arg5_t, arg6_t, arg7_t,   \
                                    arg8_t)                                   \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    arg7_t a7 = *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t));                  \
    arg8_t a8 = *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t) + sizeof(arg7_t)); \
    func(a0, a1, a2, a3, a4, a5, a6, a7, a8);                                 \
  }

#define luaA_function_declare10(func, ret_t, arg0_t, arg1_t, arg2_t, arg3_t,  \
                                arg4_t, arg5_t, arg6_t, arg7_t, arg8_t,       \
                                arg9_t)                                       \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    arg7_t a7 = *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t));                  \
    arg8_t a8 = *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t) + sizeof(arg7_t)); \
    arg9_t a9 =                                                               \
        *(arg9_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +         \
                   sizeof(arg6_t) + sizeof(arg7_t) + sizeof(arg8_t));         \
    *(ret_t*)out = func(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);              \
  }

#define luaA_function_declare10_void(func, ret_t, arg0_t, arg1_t, arg2_t,     \
                                     arg3_t, arg4_t, arg5_t, arg6_t, arg7_t,  \
                                     arg8_t, arg9_t)                          \
  void __luaA_##func(void* out, void* args) {                                 \
    arg0_t a0 = *(arg0_t*)args;                                               \
    arg1_t a1 = *(arg1_t*)(args + sizeof(arg0_t));                            \
    arg2_t a2 = *(arg2_t*)(args + sizeof(arg0_t) + sizeof(arg1_t));           \
    arg3_t a3 =                                                               \
        *(arg3_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t));  \
    arg4_t a4 = *(arg4_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t));                  \
    arg5_t a5 = *(arg5_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t)); \
    arg6_t a6 =                                                               \
        *(arg6_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t));         \
    arg7_t a7 = *(arg7_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t));                  \
    arg8_t a8 = *(arg8_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) +           \
                           sizeof(arg2_t) + sizeof(arg3_t) + sizeof(arg4_t) + \
                           sizeof(arg5_t) + sizeof(arg6_t) + sizeof(arg7_t)); \
    arg9_t a9 =                                                               \
        *(arg9_t*)(args + sizeof(arg0_t) + sizeof(arg1_t) + sizeof(arg2_t) +  \
                   sizeof(arg3_t) + sizeof(arg4_t) + sizeof(arg5_t) +         \
                   sizeof(arg6_t) + sizeof(arg7_t) + sizeof(arg8_t));         \
    func(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);                             \
  }

#define luaA_function_register0(L, func, ret_t)              \
  luaA_function_register_type(L, func, __luaA_##func, #func, \
                              luaA_type(L, ret_t), 0)

#define luaA_function_register1(L, func, ret_t, arg0_t)      \
  luaA_function_register_type(L, func, __luaA_##func, #func, \
                              luaA_type(L, ret_t), 1, luaA_type(L, arg0_t))

#define luaA_function_register2(L, func, ret_t, arg0_t, arg1_t)             \
  luaA_function_register_type(L, func, __luaA_##func, #func,                \
                              luaA_type(L, ret_t), 2, luaA_type(L, arg0_t), \
                              luaA_type(L, arg1_t))

#define luaA_function_register3(L, func, ret_t, arg0_t, arg1_t, arg2_t)     \
  luaA_function_register_type(L, func, __luaA_##func, #func,                \
                              luaA_type(L, ret_t), 3, luaA_type(L, arg0_t), \
                              luaA_type(L, arg1_t), luaA_type(L, arg2_t))

#define luaA_function_register4(L, func, ret_t, arg0_t, arg1_t, arg2_t,     \
                                arg3_t)                                     \
  luaA_function_register_type(L, func, __luaA_##func, #func,                \
                              luaA_type(L, ret_t), 4, luaA_type(L, arg0_t), \
                              luaA_type(L, arg1_t), luaA_type(L, arg2_t),   \
                              luaA_type(L, arg3_t))

#define luaA_function_register5(L, func, ret_t, arg0_t, arg1_t, arg2_t,     \
                                arg3_t, arg4_t)                             \
  luaA_function_register_type(L, func, __luaA_##func, #func,                \
                              luaA_type(L, ret_t), 5, luaA_type(L, arg0_t), \
                              luaA_type(L, arg1_t), luaA_type(L, arg2_t),   \
                              luaA_type(L, arg3_t), luaA_type(L, arg4_t))

#define luaA_function_register6(L, func, ret_t, arg0_t, arg1_t, arg2_t, \
                                arg3_t, arg4_t, arg5_t)                 \
  luaA_function_register_type(                                          \
      L, func, __luaA_##func, #func, luaA_type(L, ret_t), 6,            \
      luaA_type(L, arg0_t), luaA_type(L, arg1_t), luaA_type(L, arg2_t), \
      luaA_type(L, arg3_t), luaA_type(L, arg4_t), luaA_type(L, arg5_t))

#define luaA_function_register7(L, func, ret_t, arg0_t, arg1_t, arg2_t,     \
                                arg3_t, arg4_t, arg5_t, arg6_t)             \
  luaA_function_register_type(L, func, __luaA_##func, #func,                \
                              luaA_type(L, ret_t), 7, luaA_type(L, arg0_t), \
                              luaA_type(L, arg1_t), luaA_type(L, arg2_t),   \
                              luaA_type(L, arg3_t), luaA_type(L, arg4_t),   \
                              luaA_type(L, arg5_t), luaA_type(L, arg6_t))

#define luaA_function_register8(L, func, ret_t, arg0_t, arg1_t, arg2_t, \
                                arg3_t, arg4_t, arg5_t, arg6_t, arg7_t) \
  luaA_function_register_type(                                          \
      L, func, __luaA_##func, #func, luaA_type(L, ret_t), 8,            \
      luaA_type(L, arg0_t), luaA_type(L, arg1_t), luaA_type(L, arg2_t), \
      luaA_type(L, arg3_t), luaA_type(L, arg4_t), luaA_type(L, arg5_t), \
      luaA_type(L, arg6_t), luaA_type(L, arg7_t))

#define luaA_function_register9(L, func, ret_t, arg0_t, arg1_t, arg2_t, \
                                arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, \
                                arg8_t)                                 \
  luaA_function_register_type(                                          \
      L, func, __luaA_##func, #func, luaA_type(L, ret_t), 9,            \
      luaA_type(L, arg0_t), luaA_type(L, arg1_t), luaA_type(L, arg2_t), \
      luaA_type(L, arg3_t), luaA_type(L, arg4_t), luaA_type(L, arg5_t), \
      luaA_type(L, arg6_t), luaA_type(L, arg7_t), luaA_type(L, arg8_t))

#define luaA_function_register10(L, func, ret_t, arg0_t, arg1_t, arg2_t, \
                                 arg3_t, arg4_t, arg5_t, arg6_t, arg7_t, \
                                 arg8_t, arg9_t)                         \
  luaA_function_register_type(                                           \
      L, func, __luaA_##func, #func, luaA_type(L, ret_t), 10,            \
      luaA_type(L, arg0_t), luaA_type(L, arg1_t), luaA_type(L, arg2_t),  \
      luaA_type(L, arg3_t), luaA_type(L, arg4_t), luaA_type(L, arg5_t),  \
      luaA_type(L, arg6_t), luaA_type(L, arg7_t), luaA_type(L, arg8_t),  \
      luaA_type(L, arg9_t))

#endif

#endif
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lauxlib_h
#define lauxlib_h

#include <stddef.h>
#include <stdio.h>


/* global table */
#define LUA_GNAME "_G"

typedef struct luaL_Buffer luaL_Buffer;

/* extra error code for 'luaL_loadfilex' */
#define LUA_ERRFILE (LUA_ERRERR + 1)

/* key, in the registry, for table of loaded modules */
#define LUA_LOADED_TABLE "_LOADED"

/* key, in the registry, for table of preloaded loaders */
#define LUA_PRELOAD_TABLE "_PRELOAD"

typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;

#define LUAL_NUMSIZES (sizeof(lua_Integer) * 16 + sizeof(lua_Number))

LUALIB_API void(luaL_checkversion_)(lua_State *L, lua_Number ver, size_t sz);
#define luaL_checkversion(L) \
  luaL_checkversion_(L, COBALT_VERSION_NUM, LUAL_NUMSIZES)

LUALIB_API int(luaL_getmetafield)(lua_State *L, int obj, const char *e);
LUALIB_API int(luaL_callmeta)(lua_State *L, int obj, const char *e);
LUALIB_API const char *(luaL_tolstring)(lua_State *L, int idx, size_t *len);
LUALIB_API int(luaL_argerror)(lua_State *L, int arg, const char *extramsg);
LUALIB_API int(luaL_typeerror)(lua_State *L, int arg, const char *tname);
LUALIB_API const char *(luaL_checklstring)(lua_State *L, int arg, size_t *l);
LUALIB_API const char *(luaL_optlstring)(lua_State *L, int arg, const char *def,
                                         size_t *l);
LUALIB_API lua_Number(luaL_checknumber)(lua_State *L, int arg);
LUALIB_API lua_Number(luaL_optnumber)(lua_State *L, int arg, lua_Number def);

LUALIB_API lua_Integer(luaL_checkinteger)(lua_State *L, int arg);
LUALIB_API lua_Integer(luaL_optinteger)(lua_State *L, int arg, lua_Integer def);

LUALIB_API void(luaL_checkstack)(lua_State *L, int sz, const char *msg);
LUALIB_API void(luaL_checktype)(lua_State *L, int arg, int t);
LUALIB_API void(luaL_checkany)(lua_State *L, int arg);

LUALIB_API int(luaL_newmetatable)(lua_State *L, const char *tname);
LUALIB_API void(luaL_setmetatable)(lua_State *L, const char *tname);
LUALIB_API void *(luaL_testudata)(lua_State *L, int ud, const char *tname);
LUALIB_API void *(luaL_checkudata)(lua_State *L, int ud, const char *tname);

LUALIB_API void(luaL_where)(lua_State *L, int lvl);
LUALIB_API int(luaL_error)(lua_State *L, const char *fmt, ...);

LUALIB_API int(luaL_checkoption)(lua_State *L, int arg, const char *def,
                                 const char *const lst[]);

LUALIB_API int(luaL_fileresult)(lua_State *L, int stat, const char *fname);
LUALIB_API int(luaL_execresult)(lua_State *L, int stat);

/* predefined references */
#define LUA_NOREF (-2)
#define LUA_REFNIL (-1)

LUALIB_API int(luaL_ref)(lua_State *L, int t);
LUALIB_API void(luaL_unref)(lua_State *L, int t, int ref);

LUALIB_API int(luaL_loadfilex)(lua_State *L, const char *filename,
                               const char *mode);

#define luaL_loadfile(L, f) luaL_loadfilex(L, f, NULL)

LUALIB_API int(luaL_loadbufferx)(lua_State *L, const char *buff, size_t sz,
                                 const char *name, const char *mode);
LUALIB_API int(luaL_loadstring)(lua_State *L, const char *s);

LUALIB_API lua_State *(luaL_newstate)(void);

LUALIB_API lua_Integer(luaL_len)(lua_State *L, int idx);

LUALIB_API void(luaL_addgsub)(luaL_Buffer *b, const char *s, const char *p,
                              const char *r);
LUALIB_API const char *(luaL_gsub)(lua_State *L, const char *s, const char *p,
                                   const char *r);

LUALIB_API void(luaL_setfuncs)(lua_State *L, const luaL_Reg *l, int nup);

LUALIB_API int(luaL_getsubtable)(lua_State *L, int idx, const char *fname);

LUALIB_API void(luaL_traceback)(lua_State *L, lua_State *L1, char *msg,
                                int level);

LUALIB_API void(luaL_requiref)(lua_State *L, const char *modname,
                               lua_CFunction openf, int glb);

/*
** ===============================================================
** some useful macros
** ===============================================================
*/

#define luaL_newlibtable(L, l) \
  lua_createtable(L, 0, sizeof(l) / sizeof((l)[0]) - 1)

#define luaL_newlib(L, l) \
  (luaL_checkversion(L), luaL_newlibtable(L, l), luaL_setfuncs(L, l, 0))

#define luaL_argcheck(L, cond, arg, extramsg) \
  ((void)(luai_likely(cond) || luaL_argerror(L, (arg), (extramsg))))

#define luaL_argexpected(L, cond, arg, tname) \
  ((void)(luai_likely(cond) || luaL_typeerror(L, (arg), (tname))))

#define luaL_checkstring(L, n) (luaL_checklstring(L, (n), NULL))
#define luaL_optstring(L, n, d) (luaL_optlstring(L, (n), (d), NULL))

#define luaL_typename(L, i) lua_typename(L, lua_type(L, (i)))

#define luaL_dofile(L, fn) \
  (luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))

#define luaL_dostring(L, s) \
  (luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))

#define luaL_getmetatable(L, n) (lua_getfield(L, LUA_REGISTRYINDEX, (n)))

#define luaL_opt(L, f, n, d) (lua_isnoneornil(L, (n)) ? (d) : f(L, (n)))

#define luaL_loadbuffer(L, s, sz, n) luaL_loadbufferx(L, s, sz, n, NULL)

/*
** Perform arithmetic operations on lua_Integer values with wrap-around
** semantics, as the Lua core does.
*/
#define luaL_intop(op, v1, v2) \
  ((lua_Integer)((lua_Unsigned)(v1)op(lua_Unsigned)(v2)))

/* push the value used to represent failure/error */
#define luaL_pushfail(L) lua_pushnil(L)

/*
** Internal assertions for in-house debugging
*/
#if !defined(lua_assert)

#if defined LUAI_ASSERT
#include <assert.h>
#define lua_assert(c) assert(c)
#else
#define lua_assert(c) ((void)0)
#endif

#endif

/*
** {======================================================
** Generic Buffer manipulation
** =======================================================
*/

struct luaL_Buffer {
  char *b;     /* buffer address */
  size_t size; /* buffer size */
  size_t n;    /* number of characters in buffer */
  lua_State *L;
  union {
    LUAI_MAXALIGN;           /* ensure maximum alignment for buffer */
    char b[LUAL_BUFFERSIZE]; /* initial buffer */
  } init;
};

#define luaL_bufflen(bf) ((bf)->n)
#define luaL_buffaddr(bf) ((bf)->b)

#define luaL_addchar(B, c)                                  \
  ((void)((B)->n < (B)->size || luaL_prepbuffsize((B), 1)), \
   ((B)->b[(B)->n++] = (c)))

#define luaL_addsize(B, s) ((B)->n += (s))

#define luaL_buffsub(B, s) ((B)->n -= (s))

LUALIB_API void(luaL_buffinit)(lua_State *L, luaL_Buffer *B);
LUALIB_API char *(luaL_prepbuffsize)(luaL_Buffer *B, size_t sz);
LUALIB_API void(luaL_addlstring)(luaL_Buffer *B, const char *s, size_t l);
LUALIB_API void(luaL_addstring)(luaL_Buffer *B, const char *s);
LUALIB_API void(luaL_addvalue)(luaL_Buffer *B);
LUALIB_API void(luaL_pushresult)(luaL_Buffer *B);
LUALIB_API void(luaL_pushresultsize)(luaL_Buffer *B, size_t sz);
LUALIB_API char *(luaL_buffinitsize)(lua_State *L, luaL_Buffer *B, size_t sz);

#define luaL_prepbuffer(B) luaL_prepbuffsize(B, LUAL_BUFFERSIZE)

/* }====================================================== */

/*
** {======================================================
** File handles for IO library
** =======================================================
*/

/*
** A file handle is a userdata with metatable 'LUA_FILEHANDLE' and
** initial structure 'luaL_Stream' (it may contain other fields
** after that initial structure).
*/

#define LUA_FILEHANDLE "FILE*"

typedef struct luaL_Stream {
  FILE *f;              /* stream (NULL for incompletely created streams) */
  lua_CFunction closef; /* to close stream (NULL for closed streams) */
} luaL_Stream;

/* }====================================================== */

/*
** {==================================================================
** "Abstraction Layer" for basic report of messages and errors
** ===================================================================
*/

/* print a string */
#if !defined(lua_writestring)
#define lua_writestring(s, l) fwrite((s), sizeof(char), (l), stdout)
#endif

/* print a newline and flush the output */
#if !defined(lua_writeline)
#define lua_writeline() (lua_writestring("\n", 1), fflush(stdout))
#endif

/* print an error message */
#if !defined(lua_writestringerror)
#define lua_writestringerror(s, p) (fprintf(stderr, (s), (p)), fflush(stderr))
#endif

/* }================================================================== */

/*
** {============================================================
** Compatibility with deprecated conversions
** =============================================================
*/
#if defined(LUA_COMPAT_APIINTCASTS)

#define luaL_checkunsigned(L, a) ((lua_Unsigned)luaL_checkinteger(L, a))
#define luaL_optunsigned(L, a, d) \
  ((lua_Unsigned)luaL_optinteger(L, a, (lua_Integer)(d)))

#define luaL_checkint(L, n) ((int)luaL_checkinteger(L, (n)))
#define luaL_optint(L, n, d) ((int)luaL_optinteger(L, (n), (d)))

#define luaL_checklong(L, n) ((long)luaL_checkinteger(L, (n)))
#define luaL_optlong(L, n, d) ((long)luaL_optinteger(L, (n), (d)))

#endif
/* }============================================================ */

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




typedef struct {
  float x;
  float y;
  float z;
} Vec3;
typedef struct {
  int x;   // position x
  int y;   // position y
  int z;   // position z
  int ox;  // orientation x
  int oy;  // orientation y
  int oz;  // orientation z
  int sx;  // scale x
  int sy;  // scale y
  int sz;  // scale z
  int px;  // pivot x
  int py;  // pivot y
  int pz;  // pivot z
} Transform;
typedef struct {
  float x;
  float y;
} Vec2;
typedef struct {
  int r;
  int g;
  int b;
} Color;
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lcode_h
#define lcode_h


/*
** Marks the end of a patch list. It is an invalid value both as an absolute
** address, and as a list link (would link an element to itself).
*/
#define NO_JUMP (-1)

/*
** grep "ORDER OPR" if you change these enums  (ORDER OP)
*/
typedef enum BinOpr {
  /* arithmetic operators */
  OPR_ADD,
  OPR_SUB,
  OPR_MUL,
  OPR_MOD,
  OPR_POW,
  OPR_DIV,
  OPR_IDIV,
  /* bitwise operators */
  OPR_BAND,
  OPR_BOR,
  OPR_BXOR,
  OPR_SHL,
  OPR_SHR,
  /* string operator */
  OPR_CONCAT,
  /* comparison operators */
  OPR_EQ,
  OPR_LT,
  OPR_LE,
  OPR_NE,
  OPR_GT,
  OPR_GE,
  /* logical operators */
  OPR_AND,
  OPR_OR,
  OPR_CADD,
  OPR_CSUB,
  OPR_CMUL,
  OPR_CDIV,
  OPR_CMOD,
  OPR_CCONCAT,
  OPR_NOBINOPR,
  OPR_COAL,
} BinOpr;

/* true if operation is foldable (that is, it is arithmetic or bitwise) */
#define foldbinop(op) ((op) <= OPR_SHR)

#define luaK_codeABC(fs, o, a, b, c) luaK_codeABCk(fs, o, a, b, c, 0)

typedef enum UnOpr {
  OPR_MINUS,
  OPR_BNOT,
  OPR_NOT,
  OPR_LEN,
  OPR_PLUSPLUS,
  OPR_MINUSMINUS,
  OPR_NOUNOPR
} UnOpr;

/* get (pointer to) instruction of given 'expdesc' */
#define getinstruction(fs, e) ((fs)->f->code[(e)->u.info])

#define luaK_setmultret(fs, e) luaK_setreturns(fs, e, LUA_MULTRET)

#define luaK_jumpto(fs, t) luaK_patchlist(fs, luaK_jump(fs), t)

LUAI_FUNC int luaK_code(FuncState *fs, Instruction i);
LUAI_FUNC int luaK_codeABx(FuncState *fs, OpCode o, int A, unsigned int Bx);
LUAI_FUNC int luaK_codeAsBx(FuncState *fs, OpCode o, int A, int Bx);
LUAI_FUNC int luaK_codeABCk(FuncState *fs, OpCode o, int A, int B, int C,
                            int k);
LUAI_FUNC int luaK_isKint(expdesc *e);
LUAI_FUNC int luaK_exp2const(FuncState *fs, const expdesc *e, TValue *v);
LUAI_FUNC void luaK_fixline(FuncState *fs, int line);
LUAI_FUNC void luaK_nil(FuncState *fs, int from, int n);
LUAI_FUNC void luaK_reserveregs(FuncState *fs, int n);
LUAI_FUNC void luaK_checkstack(FuncState *fs, int n);
LUAI_FUNC void luaK_int(FuncState *fs, int reg, lua_Integer n);
LUAI_FUNC void luaK_dischargevars(FuncState *fs, expdesc *e);
LUAI_FUNC int luaK_exp2anyreg(FuncState *fs, expdesc *e);
LUAI_FUNC void luaK_exp2anyregup(FuncState *fs, expdesc *e);
LUAI_FUNC void luaK_exp2nextreg(FuncState *fs, expdesc *e);
LUAI_FUNC void luaK_exp2reg(FuncState *fs, expdesc *e, int reg);
LUAI_FUNC void luaK_exp2val(FuncState *fs, expdesc *e);
LUAI_FUNC int luaK_exp2RK(FuncState *fs, expdesc *e);
LUAI_FUNC void luaK_self(FuncState *fs, expdesc *e, expdesc *key);
LUAI_FUNC void luaK_indexed(FuncState *fs, expdesc *t, expdesc *k);
LUAI_FUNC void luaK_goiftrue(FuncState *fs, expdesc *e);
LUAI_FUNC void luaK_goiffalse(FuncState *fs, expdesc *e);
LUAI_FUNC void luaK_storevar(FuncState *fs, expdesc *var, expdesc *e);
LUAI_FUNC void luaK_setreturns(FuncState *fs, expdesc *e, int nresults);
LUAI_FUNC void luaK_setoneret(FuncState *fs, expdesc *e);
LUAI_FUNC int luaK_jump(FuncState *fs);
LUAI_FUNC void luaK_ret(FuncState *fs, int first, int nret);
LUAI_FUNC void luaK_patchlist(FuncState *fs, int list, int target);
LUAI_FUNC void luaK_patchtohere(FuncState *fs, int list);
LUAI_FUNC void luaK_concat(FuncState *fs, int *l1, int l2);
LUAI_FUNC int luaK_getlabel(FuncState *fs);
LUAI_FUNC void luaK_prefix(FuncState *fs, UnOpr op, expdesc *v, int line);
LUAI_FUNC void luaK_infix(FuncState *fs, BinOpr op, expdesc *v);
LUAI_FUNC void luaK_posfix(FuncState *fs, BinOpr op, expdesc *v1, expdesc *v2,
                           int line);
LUAI_FUNC void luaK_settablesize(FuncState *fs, int pc, int ra, int asize,
                                 int hsize);
LUAI_FUNC void luaK_setlist(FuncState *fs, int base, int nelems, int tostore);
LUAI_FUNC void luaK_finish(FuncState *fs);
LUAI_FUNC l_noret luaK_semerror(LexState *ls, const char *msg);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lctype_h
#define lctype_h


/*
** WARNING: the functions defined here do not necessarily correspond
** to the similar functions in the standard C ctype.h. They are
** optimized for the specific needs of Lua.
*/

#if !defined(LUA_USE_CTYPE)

#if 'A' == 65 && '0' == 48
/* ASCII case: can use its own tables; faster and fixed */
#define LUA_USE_CTYPE 0
#else
/* must use standard C ctype */
#define LUA_USE_CTYPE 1
#endif

#endif

#if !LUA_USE_CTYPE /* { */

#include <limits.h>


#define ALPHABIT 0
#define DIGITBIT 1
#define PRINTBIT 2
#define SPACEBIT 3
#define XDIGITBIT 4

#define MASK(B) (1 << (B))

/*
** add 1 to char to allow index -1 (EOZ)
*/
#define testprop(c, p) (luai_ctype_[(c) + 1] & (p))

/*
** 'lalpha' (Lua alphabetic) and 'lalnum' (Lua alphanumeric) both include '_'
*/
#define lislalpha(c) testprop(c, MASK(ALPHABIT))
#define lislalnum(c) testprop(c, (MASK(ALPHABIT) | MASK(DIGITBIT)))
#define lisdigit(c) testprop(c, MASK(DIGITBIT))
#define lisspace(c) testprop(c, MASK(SPACEBIT))
#define lisprint(c) testprop(c, MASK(PRINTBIT))
#define lisxdigit(c) testprop(c, MASK(XDIGITBIT))
#define lisbdigit(c) ((c) == '0' || (c) == '1')
#define lisodigit(c) ((c) >= '0' && (c) <= '7')

/*
** In ASCII, this 'ltolower' is correct for alphabetic characters and
** for '.'. That is enough for Lua needs. ('check_exp' ensures that
** the character either is an upper-case letter or is unchanged by
** the transformation, which holds for lower-case letters and '.'.)
*/
#define ltolower(c)                                                   \
  check_exp(('A' <= (c) && (c) <= 'Z') || (c) == ((c) | ('A' ^ 'a')), \
            (c) | ('A' ^ 'a'))

/* one entry for each character and for -1 (EOZ) */
LUAI_DDEC(const lu_byte luai_ctype_[UCHAR_MAX + 2];)

#else /* }{ */

/*
** use standard C ctypes
*/

#include <ctype.h>

#define lislalpha(c) (isalpha(c) || (c) == '_')
#define lislalnum(c) (isalnum(c) || (c) == '_')
#define lisdigit(c) (isdigit(c))
#define lisspace(c) (isspace(c))
#define lisprint(c) (isprint(c))
#define lisxdigit(c) (isxdigit(c))
#define lisbdigit(c) ((c) == '0' || (c) == '1')
#define lisodigit(c) ((c) >= '0' && (c) <= '7')

#define ltolower(c) (tolower(c))

#endif /* } */

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef ldebug_h
#define ldebug_h


#define pcRel(pc, p) (cast_int((pc) - (p)->code) - 1)

/* Active Lua function (given call info) */
#define ci_func(ci) (clLvalue(s2v((ci)->func)))

#define resethookcount(L) (L->hookcount = L->basehookcount)

/*
** mark for entries in 'lineinfo' array that has absolute information in
** 'abslineinfo' array
*/
#define ABSLINEINFO (-0x80)

/*
** MAXimum number of successive Instructions WiTHout ABSolute line
** information. (A power of two allows fast divisions.)
*/
#if !defined(MAXIWTHABS)
#define MAXIWTHABS 128
#endif

LUAI_FUNC int luaG_getfuncline(const Proto *f, int pc);
LUAI_FUNC const char *luaG_findlocal(lua_State *L, CallInfo *ci, int n,
                                     StkId *pos);
LUAI_FUNC l_noret luaG_typeerror(lua_State *L, const TValue *o,
                                 const char *opname);
LUAI_FUNC l_noret luaG_callerror(lua_State *L, const TValue *o);
LUAI_FUNC l_noret luaG_forerror(lua_State *L, const TValue *o,
                                const char *what);
LUAI_FUNC l_noret luaG_concaterror(lua_State *L, const TValue *p1,
                                   const TValue *p2);
LUAI_FUNC l_noret luaG_opinterror(lua_State *L, const TValue *p1,
                                  const TValue *p2, const char *msg);
LUAI_FUNC l_noret luaG_tointerror(lua_State *L, const TValue *p1,
                                  const TValue *p2);
LUAI_FUNC l_noret luaG_ordererror(lua_State *L, const TValue *p1,
                                  const TValue *p2);
LUAI_FUNC l_noret luaG_runerror(lua_State *L, const char *fmt, ...);
LUAI_FUNC const char *luaG_addinfo(lua_State *L, const char *msg, TString *src,
                                   int line);
LUAI_FUNC l_noret luaG_errormsg(lua_State *L);
LUAI_FUNC int luaG_traceexec(lua_State *L, const Instruction *pc);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef ldo_h
#define ldo_h


/*
** Macro to check stack size and grow stack if needed.  Parameters
** 'pre'/'pos' allow the macro to preserve a pointer into the
** stack across reallocations, doing the work only when needed.
** It also allows the running of one GC step when the stack is
** reallocated.
** 'condmovestack' is used in heavy tests to force a stack reallocation
** at every check.
*/
#define luaD_checkstackaux(L, n, pre, pos)         \
  if (l_unlikely(L->stack_last - L->top <= (n))) { \
    pre;                                           \
    luaD_growstack(L, n, 1);                       \
    pos;                                           \
  } else {                                         \
    condmovestack(L, pre, pos);                    \
  }

/* In general, 'pre'/'pos' are empty (nothing to save) */
#define luaD_checkstack(L, n) luaD_checkstackaux(L, n, (void)0, (void)0)

#define savestack(L, p) ((char *)(p) - (char *)L->stack)
#define restorestack(L, n) ((StkId)((char *)L->stack + (n)))

/* macro to check stack size, preserving 'p' */
#define checkstackGCp(L, n, p)                                              \
  luaD_checkstackaux(L, n, ptrdiff_t t__ = savestack(L, p); /* save 'p' */  \
                     luaC_checkGC(L),          /* stack grow uses memory */ \
                     p = restorestack(L, t__)) /* 'pos' part: restore 'p' */

/* macro to check stack size and GC */
#define checkstackGC(L, fsize) \
  luaD_checkstackaux(L, (fsize), luaC_checkGC(L), (void)0)

/* type of protected functions, to be ran by 'runprotected' */
typedef void (*Pfunc)(lua_State *L, void *ud);

LUAI_FUNC void luaD_seterrorobj(lua_State *L, int errcode, StkId oldtop);
LUAI_FUNC int luaD_protectedparser(lua_State *L, ZIO *z, const char *name,
                                   const char *mode);
LUAI_FUNC void luaD_hook(lua_State *L, int event, int line, int fTransfer,
                         int nTransfer);
LUAI_FUNC void luaD_hookcall(lua_State *L, CallInfo *ci);
LUAI_FUNC int luaD_pretailcall(lua_State *L, CallInfo *ci, StkId func,
                               int narg1, int delta);
LUAI_FUNC CallInfo *luaD_precall(lua_State *L, StkId func, int nResults);
LUAI_FUNC void luaD_call(lua_State *L, StkId func, int nResults);
LUAI_FUNC void luaD_callnoyield(lua_State *L, StkId func, int nResults);
LUAI_FUNC StkId luaD_tryfuncTM(lua_State *L, StkId func);
LUAI_FUNC int luaD_closeprotected(lua_State *L, ptrdiff_t level, int status);
LUAI_FUNC int luaD_pcall(lua_State *L, Pfunc func, void *u, ptrdiff_t oldtop,
                         ptrdiff_t ef);
LUAI_FUNC void luaD_poscall(lua_State *L, CallInfo *ci, int nres);
LUAI_FUNC int luaD_reallocstack(lua_State *L, int newsize, int raiseerror);
LUAI_FUNC int luaD_growstack(lua_State *L, int n, int raiseerror);
LUAI_FUNC void luaD_shrinkstack(lua_State *L);
LUAI_FUNC void luaD_inctop(lua_State *L);

LUAI_FUNC l_noret luaD_throw(lua_State *L, int errcode);
LUAI_FUNC int luaD_rawrunprotected(lua_State *L, Pfunc f, void *ud);

#endif

#ifdef __cplusplus
}
#endif


/*
lexecute.h is a huge script added to the Cobalt source code to switch
between the different VMs dynamically. 

This is responsible for the following:
- Primary executer/interpreter
- Handling AOT execution (AOT_IS_MODULE)
- Binding to the JIT (LLVM) 
- Using `llangstate.h` to allow the user to switch between VMs at runtime
- Using `minicobalt.c` for a miniture execution engine
*/

#include <stdio.h> /* debug */

/* for auto-iterators */
static int next(lua_State *L) {
  luaL_checktype(L, 1, LUA_TTABLE);
  lua_settop(L, 2); /* create a 2nd argument if there isn't one */
  if (lua_next(L, 1))
    return 2;
  else {
    lua_pushnil(L);
    return 1;
  }
}
static int ipairsaux (lua_State *L) {
  lua_Integer i = luaL_checkinteger(L, 2);
  i = luaL_intop(+, i, 1);
  lua_pushinteger(L, i);
  return (lua_geti(L, 1, i) == LUA_TNIL) ? 1 : 2;
}

#define vmcase(OP_name) \
  vmcase(##name)  // just a macro to make the code more readable

// AOT Executer
#if defined(AOT_IS_MODULE)
static CallInfo *luaV_execute_(lua_State *L, CallInfo *ci) {
  LClosure *cl;
  TValue *k;
  StkId base;
  const Instruction *pc;
  int trap;

  #if LUA_USE_JUMPTABLE
  #endif

startfunc:
  trap = L->hookmask;
returning: /* trap already set */
  cl = clLvalue(s2v(ci->func));
#if AOT
  if (cl->p->aot_implementation) {
    return ci;
  }
#endif
  k = cl->p->k;
  pc = ci->u.l.savedpc;
  if (l_unlikely(trap)) {
    if (pc == cl->p->code) { /* first instruction (not resuming)? */
      if (cl->p->is_vararg)
        trap = 0; /* hooks will start after VARARGPREP instruction */
      else        /* check 'call' hook */
        luaD_hookcall(L, ci);
    }
    ci->u.l.trap = 1; /* assume trap is on, for now */
  }
  base = ci->func + 1;
  /* main loop of interpreter */
  for (;;) {
    Instruction i; /* instruction being executed */
    StkId ra;      /* instruction's A register */
    vmfetch();
    // low-level line tracing for debugging Cobalt
    // luaG_runerror("line: %d\n", luaG_getfuncline(cl->p, pcRel(pc, cl->p)));
    lua_assert(base == ci->func + 1);
    lua_assert(base <= L->top && L->top < L->stack_last);
    /* invalidate top for instructions not expecting it */
    lua_assert(isIT(i) || (cast_void(L->top = base), 1));
    vmdispatch(i) {
      vmcase(OP_MOVE) {
        setobjs2s(L, ra, RB(i));
        vmbreak;
      }
      vmcase(OP_LOADI) {
        lua_Integer b = GETARG_sBx(i);
        setivalue(s2v(ra), b);
        vmbreak;
      }
      vmcase(OP_LOADF) {
        int b = GETARG_sBx(i);
        setfltvalue(s2v(ra), cast_num(b));
        vmbreak;
      }
      vmcase(OP_LOADK) {
        TValue *rb = k + GETARG_Bx(i);
        setobj2s(L, ra, rb);
        vmbreak;
      }
      vmcase(OP_LOADKX) {
        TValue *rb;
        rb = k + GETARG_Ax(*pc);
        pc++;
        setobj2s(L, ra, rb);
        vmbreak;
      }
      vmcase(OP_LOADFALSE) {
        setbfvalue(s2v(ra));
        vmbreak;
      }
      vmcase(OP_LFALSESKIP) {
        setbfvalue(s2v(ra));
        pc++; /* skip next instruction */
        vmbreak;
      }
      vmcase(OP_LOADTRUE) {
        setbtvalue(s2v(ra));
        vmbreak;
      }
      vmcase(OP_LOADNIL) {
        int b = GETARG_B(i);
        do {
          setnilvalue(s2v(ra++));
        } while (b--);
        vmbreak;
      }
      vmcase(OP_GETUPVAL) {
        int b = GETARG_B(i);
        setobj2s(L, ra, cl->upvals[b]->v);
        vmbreak;
      }
      vmcase(OP_SETUPVAL) {
        UpVal *uv = cl->upvals[GETARG_B(i)];
        setobj(L, uv->v, s2v(ra));
        luaC_barrier(L, uv, s2v(ra));
        vmbreak;
      }
      vmcase(OP_GETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_B(i)]->v;
        TValue *rc = KC(i);
        TString *key = tsvalue(rc); /* key must be a string */
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
          setobj2s(L, ra, slot);
        } else
          Protect(luaV_finishget(L, upval, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_GETTABLE) {
        StkId ra = RA(i);
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = vRC(i);
        lua_Unsigned n;
        if (ttisinteger(rc)  /* fast track for integers? */
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
          setobj2s(L, ra, slot);
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_GETI) {
        const TValue *slot;
        TValue *rb = vRB(i);
        int c = GETARG_C(i);
        if (luaV_fastgeti(L, rb, c, slot)) {
          setobj2s(L, ra, slot);
        } else {
          TValue key;
          setivalue(&key, c);
          Protect(luaV_finishget(L, rb, &key, ra, slot));
        }
        vmbreak;
      }
      vmcase(OP_GETFIELD) {
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = KC(i);
        TString *key = tsvalue(rc); /* key must be a string */
        if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
          setobj2s(L, ra, slot);
        } else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_SETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_A(i)]->v;
        TValue *rb = KB(i);
        TValue *rc = RKC(i);
        TString *key = tsvalue(rb); /* key must be a string */
        
        /* verify locks */
        Table *t = hvalue(upval);
        if (l_unlikely(t->locked))
          luaG_runerror(L, "attempt to modify locked table.");
        
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
          luaV_finishfastset(L, upval, slot, rc);
        } else
          Protect(luaV_finishset(L, upval, rb, rc, slot));
        vmbreak;
      }
      vmcase(OP_SETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i); /* key (table is in 'ra') */
        TValue *rc = RKC(i); /* value */
        lua_Unsigned n;

        /* verify locks */
        Table *t = hvalue(s2v(ra));
        if (l_unlikely(t->locked))
          luaG_runerror(L, "attempt to modify locked table.");
        
        if (ttisinteger(rb) /* fast track for integers? */
                ? (cast_void(n = ivalue(rb)),
                   luaV_fastgeti(L, s2v(ra), n, slot))
                : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
          luaV_finishfastset(L, s2v(ra), slot, rc);
        } else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
        vmbreak;
      }
      vmcase(OP_SETI) {
        const TValue *slot;
        int c = GETARG_B(i);
        TValue *rc = RKC(i);

        /* verify locks */
        Table *t = hvalue(s2v(ra));
        if (l_unlikely(t->locked))
          luaG_runerror(L, "attempt to modify locked table.");
        
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
          luaV_finishfastset(L, s2v(ra), slot, rc);
        } else {
          TValue key;
          setivalue(&key, c);
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
        }
        vmbreak;
      }
      vmcase(OP_SETFIELD) {
        const TValue *slot;
        TValue *rb = KB(i);
        TValue *rc = RKC(i);
        TString *key = tsvalue(rb); /* key must be a string */
        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {
          if (l_unlikely(hvalue(s2v(ra))->locked))
            halfProtect(luaG_runerror(L, "attempt to modify locked table."));
          luaV_finishfastset(L, s2v(ra), slot, rc);
        } else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
        vmbreak;
      }
      vmcase(OP_NEWTABLE) {
        int b = GETARG_B(i); /* log2(hash size) + 1 */
        int c = GETARG_C(i); /* array size */
        Table *t;
        if (b > 0) b = 1 << (b - 1); /* size is 2^(b - 1) */
        lua_assert((!TESTARG_k(i)) == (GETARG_Ax(*pc) == 0));
        if (TESTARG_k(i))                       /* non-zero extra argument? */
          c += GETARG_Ax(*pc) * (MAXARG_C + 1); /* add it to size */
        pc++;                                   /* skip extra argument */
        L->top = ra + 1; /* correct top in case of emergency GC */
        t = luaH_new(L); /* memory allocation */
        sethvalue2s(L, ra, t);
        if (b != 0 || c != 0) luaH_resize(L, t, c, b); /* idem */
        checkGC(L, ra + 1);
        vmbreak;
      }
      vmcase(OP_SELF) {
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = RKC(i);
        TString *key = tsvalue(rc); /* key must be a string */
        setobj2s(L, ra + 1, rb);
        if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
          setobj2s(L, ra, slot);
        } else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_ADDI) {
        op_arithI(L, l_addi, luai_numadd);
        vmbreak;
      }
      vmcase(OP_ADDK) {
        op_arithK(L, l_addi, luai_numadd);
        vmbreak;
      }
      vmcase(OP_SUBK) {
        op_arithK(L, l_subi, luai_numsub);
        vmbreak;
      }
      vmcase(OP_MULK) {
        op_arithK(L, l_muli, luai_nummul);
        vmbreak;
      }
      vmcase(OP_MODK) {
        op_arithK(L, luaV_mod, luaV_modf);
        vmbreak;
      }
      vmcase(OP_POWK) {
        op_arithfK(L, luai_numpow);
        vmbreak;
      }
      vmcase(OP_DIVK) {
        op_arithfK(L, luai_numdiv);
        vmbreak;
      }
      vmcase(OP_IDIVK) {
        op_arithK(L, luaV_idiv, luai_numidiv);
        vmbreak;
      }
      vmcase(OP_BANDK) {
        op_bitwiseK(L, l_band);
        vmbreak;
      }
      vmcase(OP_BORK) {
        op_bitwiseK(L, l_bor);
        vmbreak;
      }
      vmcase(OP_BXORK) {
        op_bitwiseK(L, l_bxor);
        vmbreak;
      }
      vmcase(OP_SHRI) {
        TValue *rb = vRB(i);
        int ic = GETARG_sC(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
          pc++;
          setivalue(s2v(ra), luaV_shiftl(ib, -ic));
        }
        vmbreak;
      }
      vmcase(OP_SHLI) {
        TValue *rb = vRB(i);
        int ic = GETARG_sC(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
          pc++;
          setivalue(s2v(ra), luaV_shiftl(ic, ib));
        }
        vmbreak;
      }
      vmcase(OP_ADD) {
        op_arith(L, l_addi, luai_numadd);
        vmbreak;
      }
      vmcase(OP_SUB) {
        op_arith(L, l_subi, luai_numsub);
        vmbreak;
      }
      vmcase(OP_MUL) {
        op_arith(L, l_muli, luai_nummul);
        vmbreak;
      }
      vmcase(OP_MOD) {
        op_arith(L, luaV_mod, luaV_modf);
        vmbreak;
      }
      vmcase(OP_POW) {
        op_arithf(L, luai_numpow);
        vmbreak;
      }
      vmcase(OP_DIV) { /* float division (always with floats) */
        op_arithf(L, luai_numdiv);
        vmbreak;
      }
      vmcase(OP_IDIV) { /* floor division */
        op_arith(L, luaV_idiv, luai_numidiv);
        vmbreak;
      }
      vmcase(OP_BAND) {
        op_bitwise(L, l_band);
        vmbreak;
      }
      vmcase(OP_BOR) {
        op_bitwise(L, l_bor);
        vmbreak;
      }
      vmcase(OP_BXOR) {
        op_bitwise(L, l_bxor);
        vmbreak;
      }
      vmcase(OP_SHR) {
        op_bitwise(L, luaV_shiftr);
        vmbreak;
      }
      vmcase(OP_SHL) {
        op_bitwise(L, luaV_shiftl);
        vmbreak;
      }
      vmcase(OP_MMBIN) {
        Instruction pi = *(pc - 2); /* original arith. expression */
        TValue *rb = vRB(i);
        TMS tm = (TMS)GETARG_C(i);
        StkId result = RA(pi);
        lua_assert(OP_ADD <= GET_OPCODE(pi) && GET_OPCODE(pi) <= OP_SHR);
        Protect(luaT_trybinTM(L, s2v(ra), rb, result, tm));
        vmbreak;
      }
      vmcase(OP_MMBINI) {
        Instruction pi = *(pc - 2); /* original arith. expression */
        int imm = GETARG_sB(i);
        TMS tm = (TMS)GETARG_C(i);
        int flip = GETARG_k(i);
        StkId result = RA(pi);
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
        vmbreak;
      }
      vmcase(OP_MMBINK) {
        Instruction pi = *(pc - 2); /* original arith. expression */
        TValue *imm = KB(i);
        TMS tm = (TMS)GETARG_C(i);
        int flip = GETARG_k(i);
        StkId result = RA(pi);
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
        vmbreak;
      }
      vmcase(OP_UNM) {
        TValue *rb = vRB(i);
        lua_Number nb;
        if (ttisinteger(rb)) {
          lua_Integer ib = ivalue(rb);
          setivalue(s2v(ra), intop(-, 0, ib));
        } else if (tonumberns(rb, nb)) {
          setfltvalue(s2v(ra), luai_numunm(L, nb));
        } else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
        vmbreak;
      }
      vmcase(OP_BNOT) {
        TValue *rb = vRB(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
          setivalue(s2v(ra), intop(^, ~l_castS2U(0), ib));
        } else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
        vmbreak;
      }
      vmcase(OP_NOT) {
        TValue *rb = vRB(i);
        if (l_isfalse(rb))
          setbtvalue(s2v(ra));
        else
          setbfvalue(s2v(ra));
        vmbreak;
      }
      vmcase(OP_LEN) {
        Protect(luaV_objlen(L, ra, vRB(i)));
        vmbreak;
      }
      vmcase(OP_CONCAT) {
        int n = GETARG_B(i); /* number of elements to concatenate */
        L->top = ra + n;     /* mark the end of concat operands */
        ProtectNT(luaV_concat(L, n));
        checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
        vmbreak;
      }
      vmcase(OP_CLOSE) {
        Protect(luaF_close(L, ra, LUA_OK, 1));
        vmbreak;
      }
      vmcase(OP_TBC) {
        /* create new to-be-closed upvalue */
        halfProtect(luaF_newtbcupval(L, ra));
        vmbreak;
      }
      vmcase(OP_JMP) {
        dojump(ci, i, 0);
        vmbreak;
      }
      vmcase(OP_EQ) {
        int cond;
        TValue *rb = vRB(i);
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
        docondjump();
        vmbreak;
      }
      vmcase(OP_LT) {
        op_order(L, l_lti, LTnum, lessthanothers);
        vmbreak;
      }
      vmcase(OP_LE) {
        op_order(L, l_lei, LEnum, lessequalothers);
        vmbreak;
      }
      vmcase(OP_EQK) {
        TValue *rb = KB(i);
        /* basic types do not use '__eq'; we can use raw equality */
        int cond = luaV_rawequalobj(s2v(ra), rb);
        docondjump();
        vmbreak;
      }
      vmcase(OP_EQI) {
        int cond;
        int im = GETARG_sB(i);
        if (ttisinteger(s2v(ra)))
          cond = (ivalue(s2v(ra)) == im);
        else if (ttisfloat(s2v(ra)))
          cond = luai_numeq(fltvalue(s2v(ra)), cast_num(im));
        else
          cond = 0; /* other types cannot be equal to a number */
        docondjump();
        vmbreak;
      }
      vmcase(OP_LTI) {
        op_orderI(L, l_lti, luai_numlt, 0, TM_LT);
        vmbreak;
      }
      vmcase(OP_LEI) {
        op_orderI(L, l_lei, luai_numle, 0, TM_LE);
        vmbreak;
      }
      vmcase(OP_GTI) {
        op_orderI(L, l_gti, luai_numgt, 1, TM_LT);
        vmbreak;
      }
      vmcase(OP_GEI) {
        op_orderI(L, l_gei, luai_numge, 1, TM_LE);
        vmbreak;
      }
      vmcase(OP_TEST) {
        int cond = !l_isfalse(s2v(ra));
        docondjump();
        vmbreak;
      }
      vmcase(OP_TESTSET) {
        StkId ra = RA(i);
        TValue *rb = vRB(i);
        if (GETARG_C(i) == NULL_COALESCE) { /* R(C) is used as an identifier, as it was previously unused. */
          if (ttisnil(rb)) {
            pc++;
          }
          else {
            setobj2s(L, ra, rb);
            donextjump(ci);
          }
        }
        else {
          if (l_isfalse(rb) == GETARG_k(i))
          {
            pc++;
          }
          else {
            setobj2s(L, ra, rb);
            donextjump(ci);
          }
        }
        vmbreak;
      }
      vmcase(OP_CALL) {
        CallInfo *newci;
        int b = GETARG_B(i);
        int nresults = GETARG_C(i) - 1;
        if (b != 0)        /* fixed number of arguments? */
          L->top = ra + b; /* top signals number of arguments */
        /* else previous instruction set top */
        savepc(L); /* in case of errors */
        if ((newci = luaD_precall(L, ra, nresults)) == NULL)
          updatetrap(ci); /* C call; nothing else to be done */
        else {            /* Lua call: run function in this same C frame */
        /* Identified problem here */
          ci = newci;
          ci->callstatus = 0; /* call re-uses 'luaV_execute' */
          goto startfunc;
        }
        vmbreak;
      }
      vmcase(OP_TAILCALL) {
        int b = GETARG_B(i); /* number of arguments + 1 (function) */
        int nparams1 = GETARG_C(i);
        /* delta is virtual 'func' - real 'func' (vararg functions) */
        int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;
        if (b != 0)
          L->top = ra + b;
        else /* previous instruction set top */
          b = cast_int(L->top - ra);
        savepc(ci); /* several calls here can raise errors */
        if (TESTARG_k(i)) {
          luaF_closeupval(L, base);      /* close upvalues from current call */
          lua_assert(L->tbclist < base); /* no pending tbc variables */
          lua_assert(base == ci->func + 1);
        }
        while (!ttisfunction(s2v(ra))) { /* not a function? */
          luaD_tryfuncTM(L, ra);         /* try '__call' metamethod */
          b++;                           /* there is now one extra argument */
          checkstackGCp(L, 1, ra);
        }
        if (!ttisLclosure(s2v(ra))) {       /* C function? */
          luaD_precall(L, ra, LUA_MULTRET); /* call it */
          updatetrap(ci);
          updatestack(ci);   /* stack may have been relocated */
          ci->func -= delta; /* restore 'func' (if vararg) */
          luaD_poscall(L, ci, cast_int(L->top - ra)); /* finish caller */
          updatetrap(ci); /* 'luaD_poscall' can change hooks */
          goto ret;       /* caller returns after the tail call */
        }
        ci->func -= delta;                 /* restore 'func' (if vararg) */
        luaD_pretailcall(L, ci, ra, b, 0); /* prepare call frame */

        goto startfunc; /* execute the callee */
      }
      vmcase(OP_RETURN) {
        int n = GETARG_B(i) - 1; /* number of results */
        int nparams1 = GETARG_C(i);
        if (n < 0)                   /* not fixed? */
          n = cast_int(L->top - ra); /* get what is available */
        savepc(ci);
        if (TESTARG_k(i)) { /* may there be open upvalues? */
          if (L->top < ci->top) L->top = ci->top;
          luaF_close(L, base, CLOSEKTOP, 1);
          updatetrap(ci);
          updatestack(ci);
        }
        if (nparams1) /* vararg function? */
          ci->func -= ci->u.l.nextraargs + nparams1;
        L->top = ra + n; /* set call for 'luaD_poscall' */
        luaD_poscall(L, ci, n);
        updatetrap(ci); /* 'luaD_poscall' can change hooks */
        goto ret;
      }
      vmcase(OP_RETURN0) {
        if (l_unlikely(L->hookmask)) {
          L->top = ra;
          savepc(ci);
          luaD_poscall(L, ci, 0); /* no hurry... */
          trap = 1;
        } else { /* do the 'poscall' here */
          int nres;
          L->ci = ci->previous; /* back to caller */
          L->top = base - 1;
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
            setnilvalue(s2v(L->top++)); /* all results are nil */
        }
        goto ret;
      }
      vmcase(OP_RETURN1) {
        if (l_unlikely(L->hookmask)) {
          L->top = ra + 1;
          savepc(ci);
          luaD_poscall(L, ci, 1); /* no hurry... */
          trap = 1;
        } else { /* do the 'poscall' here */
          int nres = ci->nresults;
          L->ci = ci->previous; /* back to caller */
          if (nres == 0)
            L->top = base - 1; /* asked for no results */
          else {
            setobjs2s(L, base - 1, ra); /* at least this result */
            L->top = base;
            for (; l_unlikely(nres > 1); nres--)
              setnilvalue(s2v(L->top++)); /* complete missing results */
          }
        }
      ret: /* return from a Lua function */
        if (ci->callstatus & CIST_FRESH)
          return NULL; /* end this frame */
        else {
          ci = ci->previous;
          goto returning; /* continue running caller in this frame */
        }
      }
      vmcase(OP_FORLOOP) {
        if (ttisinteger(s2v(ra + 2))) { /* integer loop? */
          lua_Unsigned count = l_castS2U(ivalue(s2v(ra + 1)));
          if (count > 0) { /* still more iterations? */
            lua_Integer step = ivalue(s2v(ra + 2));
            lua_Integer idx = ivalue(s2v(ra)); /* internal index */
            chgivalue(s2v(ra + 1), count - 1); /* update counter */
            idx = intop(+, idx, step);         /* add step to index */
            chgivalue(s2v(ra), idx);           /* update internal index */
            setivalue(s2v(ra + 3), idx);       /* and control variable */
            pc -= GETARG_Bx(i);                /* jump back */
          }
        } else if (floatforloop(ra)) /* float loop */
          pc -= GETARG_Bx(i);        /* jump back */
        updatetrap(ci);              /* allows a signal to break the loop */
        vmbreak;
      }
      vmcase(OP_FORPREP) {
        savestate(L, ci);                           /* in case of errors */
        if (forprep(L, ra)) pc += GETARG_Bx(i) + 1; /* skip the loop */
        vmbreak;
      }
      vmcase(OP_TFORPREP) {
        /* create to-be-closed upvalue (if needed) */
        halfProtect(luaF_newtbcupval(L, ra + 3));
        pc += GETARG_Bx(i);
        i = *(pc++); /* go to next instruction */
        lua_assert(GET_OPCODE(i) == OP_TFORCALL && ra == RA(i));
        goto l_tforcall;
      }
      vmcase(OP_TFORCALL) {
      l_tforcall:
        /* 'ra' has the iterator function, 'ra + 1' has the state,
           'ra + 2' has the control variable, and 'ra + 3' has the
           to-be-closed variable. The call will use the stack after
           these values (starting at 'ra + 4')
        */
        /* push function, state, and control variable */
        memcpy(ra + 4, ra, 3 * sizeof(*ra));
        L->top = ra + 4 + 3;
        ProtectNT(luaD_call(L, ra + 4, GETARG_C(i))); /* do the call */
        updatestack(ci); /* stack may have changed */
        i = *(pc++);     /* go to next instruction */
        lua_assert(GET_OPCODE(i) == OP_TFORLOOP && ra == RA(i));
        goto l_tforloop;
      }
      vmcase(OP_TFORLOOP) {
      l_tforloop:
        if (!ttisnil(s2v(ra + 4))) {    /* continue loop? */
          setobjs2s(L, ra + 2, ra + 4); /* save control variable */
          pc -= GETARG_Bx(i);           /* jump back */
        }
        vmbreak;
      }
      vmcase(OP_SETLIST) {
        int n = GETARG_B(i);
        unsigned int last = GETARG_C(i);
        Table *h = hvalue(s2v(ra));
        if (n == 0)
          n = cast_int(L->top - ra) - 1; /* get up to the top */
        else
          L->top = ci->top; /* correct top in case of emergency GC */
        last += n;
        if (TESTARG_k(i)) {
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
          pc++;
        }
        if (last > luaH_realasize(h))   /* needs more space? */
          luaH_resizearray(L, h, last); /* preallocate it at once */
        for (; n > 0; n--) {
          TValue *val = s2v(ra + n);
          setobj2t(L, &h->array[last - 1], val);
          last--;
          luaC_barrierback(L, obj2gco(h), val);
        }
        vmbreak;
      }
      vmcase(OP_CLOSURE) {
        Proto *p = cl->p->p[GETARG_Bx(i)];
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
        checkGC(L, ra + 1);
        vmbreak;
      }
      vmcase(OP_VARARG) {
        int n = GETARG_C(i) - 1; /* required results */
        Protect(luaT_getvarargs(L, ci, ra, n));
        vmbreak;
      }
      vmcase(OP_VARARGPREP) {
        ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));
        if (l_unlikely(trap)) { /* previous "Protect" updated trap */
          luaD_hookcall(L, ci);
          L->oldpc = 1; /* next opcode will be seen as a "new" line */
        }
        updatebase(ci); /* function has new base after adjustment */
        vmbreak;
      }
      vmcase(OP_EXTRAARG) {
        lua_assert(0);
        vmbreak;
      }
    }
  }
}

void luaV_execute_aot(lua_State *L, CallInfo *ci) {
  do {
    LClosure *cl = clLvalue(s2v(ci->func));
    if (cl->p->aot_implementation) {
      ci = cl->p->aot_implementation(L, ci);
    } else {
      ci = luaV_execute_(L, ci);
    }
  } while (ci);
}

#define luaV_execute luaV_execute_aot // use preprocessor magic so no overlapping symbols
#else
// Miniture Executer
#include "host/shared.h"
void luaV_miniexc(){
  
}
// Interpreter Executer
void luaV_execute (lua_State *L, CallInfo *ci) {
  /* TODO:
  - Implement JIT (state)
  - Implement Mini (state)
  */
  LClosure *cl;
  TValue *k;
  StkId base;
  const Instruction *pc;
  int trap;
#if LUA_USE_JUMPTABLE
#endif
 startfunc:
  trap = L->hookmask;
 returning:  /* trap already set */
  cl = clLvalue(s2v(ci->func));
  k = cl->p->k;
  pc = ci->u.l.savedpc;
  if (l_unlikely(trap)) {
    if (pc == cl->p->code) {  /* first instruction (not resuming)? */
      if (cl->p->is_vararg)
        trap = 0;  /* hooks will start after VARARGPREP instruction */
      else  /* check 'call' hook */
        luaD_hookcall(L, ci);
    }
    ci->u.l.trap = 1;  /* assume trap is on, for now */
  }
  base = ci->func + 1;
  /* main loop of interpreter */
  for (;;) {
    Instruction i;  /* instruction being executed */
    StkId ra;  /* instruction's A register */
    vmfetch();
    #if 0
      /* low-level line tracing for debugging Lua */
      luaG_runerror("line: %d\n", luaG_getfuncline(cl->p, pcRel(pc, cl->p)));
    #endif
    lua_assert(base == ci->func + 1);
    lua_assert(base <= L->top && L->top < L->stack_last);
    /* invalidate top for instructions not expecting it */
    lua_assert(isIT(i) || (cast_void(L->top = base), 1));
    vmdispatch (GET_OPCODE(i)) {
      vmcase(OP_MOVE) {
        setobjs2s(L, ra, RB(i));
        vmbreak;
      }
      vmcase(OP_LOADI) {
        lua_Integer b = GETARG_sBx(i);
        setivalue(s2v(ra), b);
        vmbreak;
      }
      vmcase(OP_LOADF) {
        int b = GETARG_sBx(i);
        setfltvalue(s2v(ra), cast_num(b));
        vmbreak;
      }
      vmcase(OP_LOADK) {
        TValue *rb = k + GETARG_Bx(i);
        setobj2s(L, ra, rb);
        vmbreak;
      }
      vmcase(OP_LOADKX) {
        TValue *rb;
        rb = k + GETARG_Ax(*pc); pc++;
        setobj2s(L, ra, rb);
        vmbreak;
      }
      vmcase(OP_LOADFALSE) {
        setbfvalue(s2v(ra));
        vmbreak;
      }
      vmcase(OP_LFALSESKIP) {
        setbfvalue(s2v(ra));
        pc++;  /* skip next instruction */
        vmbreak;
      }
      vmcase(OP_LOADTRUE) {
        setbtvalue(s2v(ra));
        vmbreak;
      }
      vmcase(OP_LOADNIL) {
        int b = GETARG_B(i);
        do {
          setnilvalue(s2v(ra++));
        } while (b--);
        vmbreak;
      }
      vmcase(OP_GETUPVAL) {
        int b = GETARG_B(i);
        setobj2s(L, ra, cl->upvals[b]->v);
        vmbreak;
      }
      vmcase(OP_SETUPVAL) {
        UpVal *uv = cl->upvals[GETARG_B(i)];
        setobj(L, uv->v, s2v(ra));
        luaC_barrier(L, uv, s2v(ra));
        vmbreak;
      }
      vmcase(OP_GETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_B(i)]->v;
        TValue *rc = KC(i);
        TString *key = tsvalue(rc);  /* key must be a string */
        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
          setobj2s(L, ra, slot);
        }
        else
          Protect(luaV_finishget(L, upval, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_GETTABLE) {
        StkId ra = RA(i);
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = vRC(i);
        lua_Unsigned n;
        if (ttisinteger(rc)  /* fast track for integers? */
            ? (cast_void(n = ivalue(rc)), luaV_fastgeti(L, rb, n, slot))
            : luaV_fastget(L, rb, rc, slot, luaH_get)) {
          setobj2s(L, ra, slot);
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_GETI) {
        const TValue *slot;
        TValue *rb = vRB(i);
        int c = GETARG_C(i);
        if (luaV_fastgeti(L, rb, c, slot)) {
          setobj2s(L, ra, slot);
        }
        else {
          TValue key;
          setivalue(&key, c);
          Protect(luaV_finishget(L, rb, &key, ra, slot));
        }
        vmbreak;
      }
      vmcase(OP_GETFIELD) {
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = KC(i);
        TString *key = tsvalue(rc);  /* key must be a string */
        if (luaV_fastget(L, rb, key, slot, luaH_getshortstr)) {
          setobj2s(L, ra, slot);
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_SETTABUP) {
        const TValue *slot;
        TValue *upval = cl->upvals[GETARG_A(i)]->v;
        TValue *rb = KB(i);
        TValue *rc = RKC(i);
        TString *key = tsvalue(rb);  /* key must be a string */

        /* verify locks */
        Table *t = hvalue(upval);
        if (l_unlikely(t->locked))
          luaG_runerror(L, "attempt to modify locked table.");

        if (luaV_fastget(L, upval, key, slot, luaH_getshortstr)) {
          luaV_finishfastset(L, upval, slot, rc);
        }
        else
          Protect(luaV_finishset(L, upval, rb, rc, slot));
        vmbreak;
      }
      vmcase(OP_SETTABLE) {
        const TValue *slot;
        TValue *rb = vRB(i);  /* key (table is in 'ra') */
        TValue *rc = RKC(i);  /* value */
        lua_Unsigned n;

        /* verify locks */
        Table *t = hvalue(s2v(ra));
        if (l_unlikely(t->locked))
          luaG_runerror(L, "attempt to modify locked table.");
        
        if (ttisinteger(rb)  /* fast track for integers? */
            ? (cast_void(n = ivalue(rb)), luaV_fastgeti(L, s2v(ra), n, slot))
            : luaV_fastget(L, s2v(ra), rb, slot, luaH_get)) {
          luaV_finishfastset(L, s2v(ra), slot, rc);
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
        vmbreak;
      }
      vmcase(OP_SETI) {
        const TValue *slot;
        int c = GETARG_B(i);
        TValue *rc = RKC(i);

        /* verify locks */
        Table *t = hvalue(s2v(ra));
        if (l_unlikely(t->locked))
          luaG_runerror(L, "attempt to modify locked table.");
        
        if (luaV_fastgeti(L, s2v(ra), c, slot)) {
          luaV_finishfastset(L, s2v(ra), slot, rc);
        }
        else {
          TValue key;
          setivalue(&key, c);
          Protect(luaV_finishset(L, s2v(ra), &key, rc, slot));
        }
        vmbreak;
      }
      vmcase(OP_SETFIELD) {
        const TValue *slot;
        TValue *rb = KB(i);
        TValue *rc = RKC(i);
        TString *key = tsvalue(rb);  /* key must be a string */
        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {
          if (l_unlikely(hvalue(s2v(ra))->locked))
            halfProtect(luaG_runerror(L, "attempt to modify locked table."));
          luaV_finishfastset(L, s2v(ra), slot, rc);
        }
        else
          Protect(luaV_finishset(L, s2v(ra), rb, rc, slot));
        vmbreak;
      }
      vmcase(OP_NEWTABLE) {
        int b = GETARG_B(i);  /* log2(hash size) + 1 */
        int c = GETARG_C(i);  /* array size */
        Table *t;
        if (b > 0)
          b = 1 << (b - 1);  /* size is 2^(b - 1) */
        lua_assert((!TESTARG_k(i)) == (GETARG_Ax(*pc) == 0));
        if (TESTARG_k(i))  /* non-zero extra argument? */
          c += GETARG_Ax(*pc) * (MAXARG_C + 1);  /* add it to size */
        pc++;  /* skip extra argument */
        L->top = ra + 1;  /* correct top in case of emergency GC */
        t = luaH_new(L);  /* memory allocation */
        sethvalue2s(L, ra, t);
        if (b != 0 || c != 0)
          luaH_resize(L, t, c, b);  /* idem */
        checkGC(L, ra + 1);
        vmbreak;
      }
      vmcase(OP_SELF) {
        const TValue *slot;
        TValue *rb = vRB(i);
        TValue *rc = RKC(i);
        TString *key = tsvalue(rc);  /* key must be a string */
        setobj2s(L, ra + 1, rb);
        if (luaV_fastget(L, rb, key, slot, luaH_getstr)) {
          setobj2s(L, ra, slot);
        }
        else
          Protect(luaV_finishget(L, rb, rc, ra, slot));
        vmbreak;
      }
      vmcase(OP_ADDI) {
        op_arithI(L, l_addi, luai_numadd);
        vmbreak;
      }
      vmcase(OP_ADDK) {
        op_arithK(L, l_addi, luai_numadd);
        vmbreak;
      }
      vmcase(OP_SUBK) {
        op_arithK(L, l_subi, luai_numsub);
        vmbreak;
      }
      vmcase(OP_MULK) {
        op_arithK(L, l_muli, luai_nummul);
        vmbreak;
      }
      vmcase(OP_MODK) {
        op_arithK(L, luaV_mod, luaV_modf);
        vmbreak;
      }
      vmcase(OP_POWK) {
        op_arithfK(L, luai_numpow);
        vmbreak;
      }
      vmcase(OP_DIVK) {
        op_arithfK(L, luai_numdiv);
        vmbreak;
      }
      vmcase(OP_IDIVK) {
        op_arithK(L, luaV_idiv, luai_numidiv);
        vmbreak;
      }
      vmcase(OP_BANDK) {
        op_bitwiseK(L, l_band);
        vmbreak;
      }
      vmcase(OP_BORK) {
        op_bitwiseK(L, l_bor);
        vmbreak;
      }
      vmcase(OP_BXORK) {
        op_bitwiseK(L, l_bxor);
        vmbreak;
      }
      vmcase(OP_SHRI) {
        TValue *rb = vRB(i);
        int ic = GETARG_sC(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
          pc++; setivalue(s2v(ra), luaV_shiftl(ib, -ic));
        }
        vmbreak;
      }
      vmcase(OP_SHLI) {
        TValue *rb = vRB(i);
        int ic = GETARG_sC(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
          pc++; setivalue(s2v(ra), luaV_shiftl(ic, ib));
        }
        vmbreak;
      }
      vmcase(OP_ADD) {
        op_arith(L, l_addi, luai_numadd);
        vmbreak;
      }
      vmcase(OP_SUB) {
        op_arith(L, l_subi, luai_numsub);
        vmbreak;
      }
      vmcase(OP_MUL) {
        op_arith(L, l_muli, luai_nummul);
        vmbreak;
      }
      vmcase(OP_MOD) {
        op_arith(L, luaV_mod, luaV_modf);
        vmbreak;
      }
      vmcase(OP_POW) {
        op_arithf(L, luai_numpow);
        vmbreak;
      }
      vmcase(OP_DIV) {  /* float division (always with floats) */
        op_arithf(L, luai_numdiv);
        vmbreak;
      }
      vmcase(OP_IDIV) {  /* floor division */
        op_arith(L, luaV_idiv, luai_numidiv);
        vmbreak;
      }
      vmcase(OP_BAND) {
        op_bitwise(L, l_band);
        vmbreak;
      }
      vmcase(OP_BOR) {
        op_bitwise(L, l_bor);
        vmbreak;
      }
      vmcase(OP_BXOR) {
        op_bitwise(L, l_bxor);
        vmbreak;
      }
      vmcase(OP_SHR) {
        op_bitwise(L, luaV_shiftr);
        vmbreak;
      }
      vmcase(OP_SHL) {
        op_bitwise(L, luaV_shiftl);
        vmbreak;
      }
      vmcase(OP_MMBIN) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
        TValue *rb = vRB(i);
        TMS tm = (TMS)GETARG_C(i);
        StkId result = RA(pi);
        lua_assert(OP_ADD <= GET_OPCODE(pi) && GET_OPCODE(pi) <= OP_SHR);
        Protect(luaT_trybinTM(L, s2v(ra), rb, result, tm));
        vmbreak;
      }
      vmcase(OP_MMBINI) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
        int imm = GETARG_sB(i);
        TMS tm = (TMS)GETARG_C(i);
        int flip = GETARG_k(i);
        StkId result = RA(pi);
        Protect(luaT_trybiniTM(L, s2v(ra), imm, flip, result, tm));
        vmbreak;
      }
      vmcase(OP_MMBINK) {
        Instruction pi = *(pc - 2);  /* original arith. expression */
        TValue *imm = KB(i);
        TMS tm = (TMS)GETARG_C(i);
        int flip = GETARG_k(i);
        StkId result = RA(pi);
        Protect(luaT_trybinassocTM(L, s2v(ra), imm, flip, result, tm));
        vmbreak;
      }
      vmcase(OP_UNM) {
        TValue *rb = vRB(i);
        lua_Number nb;
        if (ttisinteger(rb)) {
          lua_Integer ib = ivalue(rb);
          setivalue(s2v(ra), intop(-, 0, ib));
        }
        else if (tonumberns(rb, nb)) {
          setfltvalue(s2v(ra), luai_numunm(L, nb));
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_UNM));
        vmbreak;
      }
      vmcase(OP_BNOT) {
        TValue *rb = vRB(i);
        lua_Integer ib;
        if (tointegerns(rb, &ib)) {
          setivalue(s2v(ra), intop(^, ~l_castS2U(0), ib));
        }
        else
          Protect(luaT_trybinTM(L, rb, rb, ra, TM_BNOT));
        vmbreak;
      }
      vmcase(OP_NOT) {
        TValue *rb = vRB(i);
        if (l_isfalse(rb))
          setbtvalue(s2v(ra));
        else
          setbfvalue(s2v(ra));
        vmbreak;
      }
      vmcase(OP_LEN) {
        Protect(luaV_objlen(L, ra, vRB(i)));
        vmbreak;
      }
      vmcase(OP_CONCAT) {
        int n = GETARG_B(i);  /* number of elements to concatenate */
        L->top = ra + n;  /* mark the end of concat operands */
        ProtectNT(luaV_concat(L, n));
        checkGC(L, L->top); /* 'luaV_concat' ensures correct top */
        vmbreak;
      }
      vmcase(OP_CLOSE) {
        Protect(luaF_close(L, ra, LUA_OK, 1));
        vmbreak;
      }
      vmcase(OP_TBC) {
        /* create new to-be-closed upvalue */
        halfProtect(luaF_newtbcupval(L, ra));
        vmbreak;
      }
      vmcase(OP_JMP) {
        dojump(ci, i, 0);
        vmbreak;
      }
      vmcase(OP_EQ) {
        int cond;
        TValue *rb = vRB(i);
        Protect(cond = luaV_equalobj(L, s2v(ra), rb));
        docondjump();
        vmbreak;
      }
      vmcase(OP_LT) {
        op_order(L, l_lti, LTnum, lessthanothers);
        vmbreak;
      }
      vmcase(OP_LE) {
        op_order(L, l_lei, LEnum, lessequalothers);
        vmbreak;
      }
      vmcase(OP_EQK) {
        TValue *rb = KB(i);
        /* basic types do not use '__eq'; we can use raw equality */
        int cond = luaV_rawequalobj(s2v(ra), rb);
        docondjump();
        vmbreak;
      }
      vmcase(OP_EQI) {
        int cond;
        int im = GETARG_sB(i);
        if (ttisinteger(s2v(ra)))
          cond = (ivalue(s2v(ra)) == im);
        else if (ttisfloat(s2v(ra)))
          cond = luai_numeq(fltvalue(s2v(ra)), cast_num(im));
        else
          cond = 0;  /* other types cannot be equal to a number */
        docondjump();
        vmbreak;
      }
      vmcase(OP_LTI) {
        op_orderI(L, l_lti, luai_numlt, 0, TM_LT);
        vmbreak;
      }
      vmcase(OP_LEI) {
        op_orderI(L, l_lei, luai_numle, 0, TM_LE);
        vmbreak;
      }
      vmcase(OP_GTI) {
        op_orderI(L, l_gti, luai_numgt, 1, TM_LT);
        vmbreak;
      }
      vmcase(OP_GEI) {
        op_orderI(L, l_gei, luai_numge, 1, TM_LE);
        vmbreak;
      }
      vmcase(OP_TEST) {
        int cond = !l_isfalse(s2v(ra));
        docondjump();
        vmbreak;
      }
      vmcase(OP_TESTSET) {
        StkId ra = RA(i);
        TValue *rb = vRB(i);
        if (GETARG_C(i) == NULL_COALESCE) { /* R(C) is used as an identifier, as it was previously unused. */
          if (ttisnil(rb)) {
            pc++;
          }
          else {
            setobj2s(L, ra, rb);
            donextjump(ci);
          }
        }
        else {
          if (l_isfalse(rb) == GETARG_k(i))
          {
            pc++;
          }
          else {
            setobj2s(L, ra, rb);
            donextjump(ci);
          }
        }
        vmbreak;
      }
      vmcase(OP_CALL) {
        CallInfo *newci;
        int b = GETARG_B(i);
        int nresults = GETARG_C(i) - 1;
        if (b != 0)  /* fixed number of arguments? */
          L->top = ra + b;  /* top signals number of arguments */
        /* else previous instruction set top */
        savepc(L);  /* in case of errors */
        if ((newci = luaD_precall(L, ra, nresults)) == NULL)
          updatetrap(ci);  /* C call; nothing else to be done */
        else {  /* Lua call: run function in this same C frame */
          ci = newci;
          goto startfunc;
        }
        vmbreak;
      }
      vmcase(OP_TAILCALL) {
        int b = GETARG_B(i);  /* number of arguments + 1 (function) */
        int n;  /* number of results when calling a C function */
        int nparams1 = GETARG_C(i);
        /* delta is virtual 'func' - real 'func' (vararg functions) */
        int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;
        if (b != 0)
          L->top = ra + b;
        else  /* previous instruction set top */
          b = cast_int(L->top - ra);
        savepc(ci);  /* several calls here can raise errors */
        if (TESTARG_k(i)) {
          luaF_closeupval(L, base);  /* close upvalues from current call */
          lua_assert(L->tbclist < base);  /* no pending tbc variables */
          lua_assert(base == ci->func + 1);
        }
        if ((n = luaD_pretailcall(L, ci, ra, b, delta)) < 0)  /* Lua function? */
          goto startfunc;  /* execute the callee */
        else {  /* C function? */
          ci->func -= delta;  /* restore 'func' (if vararg) */
          luaD_poscall(L, ci, n);  /* finish caller */
          updatetrap(ci);  /* 'luaD_poscall' can change hooks */
          goto ret;  /* caller returns after the tail call */
        }
      }
      vmcase(OP_RETURN) {
        int n = GETARG_B(i) - 1;  /* number of results */
        int nparams1 = GETARG_C(i);
        if (n < 0)  /* not fixed? */
          n = cast_int(L->top - ra);  /* get what is available */
        savepc(ci);
        if (TESTARG_k(i)) {  /* may there be open upvalues? */
          ci->u2.nres = n;  /* save number of returns */
          if (L->top < ci->top)
            L->top = ci->top;
          luaF_close(L, base, CLOSEKTOP, 1);
          updatetrap(ci);
          updatestack(ci);
        }
        if (nparams1)  /* vararg function? */
          ci->func -= ci->u.l.nextraargs + nparams1;
        L->top = ra + n;  /* set call for 'luaD_poscall' */
        luaD_poscall(L, ci, n);
        updatetrap(ci);  /* 'luaD_poscall' can change hooks */
        goto ret;
      }
      vmcase(OP_RETURN0) {
        if (l_unlikely(L->hookmask)) {
          L->top = ra;
          savepc(ci);
          luaD_poscall(L, ci, 0);  /* no hurry... */
          trap = 1;
        }
        else {  /* do the 'poscall' here */
          int nres;
          L->ci = ci->previous;  /* back to caller */
          L->top = base - 1;
          for (nres = ci->nresults; l_unlikely(nres > 0); nres--)
            setnilvalue(s2v(L->top++));  /* all results are nil */
        }
        goto ret;
      }
      vmcase(OP_RETURN1) {
        if (l_unlikely(L->hookmask)) {
          L->top = ra + 1;
          savepc(ci);
          luaD_poscall(L, ci, 1);  /* no hurry... */
          trap = 1;
        }
        else {  /* do the 'poscall' here */
          int nres = ci->nresults;
          L->ci = ci->previous;  /* back to caller */
          if (nres == 0)
            L->top = base - 1;  /* asked for no results */
          else {
            setobjs2s(L, base - 1, ra);  /* at least this result */
            L->top = base;
            for (; l_unlikely(nres > 1); nres--)
              setnilvalue(s2v(L->top++));  /* complete missing results */
          }
        }
       ret:  /* return from a Lua function */
        if (ci->callstatus & CIST_FRESH)
          return;  /* end this frame */
        else {
          ci = ci->previous;
          goto returning;  /* continue running caller in this frame */
        }
      }
      vmcase(OP_FORLOOP) {
        if (ttisinteger(s2v(ra + 2))) {  /* integer loop? */
          lua_Unsigned count = l_castS2U(ivalue(s2v(ra + 1)));
          if (count > 0) {  /* still more iterations? */
            lua_Integer step = ivalue(s2v(ra + 2));
            lua_Integer idx = ivalue(s2v(ra));  /* internal index */
            chgivalue(s2v(ra + 1), count - 1);  /* update counter */
            idx = intop(+, idx, step);  /* add step to index */
            chgivalue(s2v(ra), idx);  /* update internal index */
            setivalue(s2v(ra + 3), idx);  /* and control variable */
            pc -= GETARG_Bx(i);  /* jump back */
          }
        }
        else if (floatforloop(ra))  /* float loop */
          pc -= GETARG_Bx(i);  /* jump back */
        updatetrap(ci);  /* allows a signal to break the loop */
        vmbreak;
      }
      vmcase(OP_FORPREP) {
        savestate(L, ci);  /* in case of errors */
        if (forprep(L, ra))
          pc += GETARG_Bx(i) + 1;  /* skip the loop */
        vmbreak;
      }
      vmcase(OP_TFORPREP) {
        /* create to-be-closed upvalue (if needed) */
        const Instruction* callpc = pc + GETARG_Bx(i);
        i = *callpc;
        if ((!ttisfunction(s2v(ra)))) {
          setobjs2s(L, ra + 1, ra);
          setfvalue(s2v(ra), next);
        }
        if (ttypetag(s2v(ra)) == LUA_VLCF
              && ttistable(s2v(ra+1))
              && ttisnil(s2v(ra+3))
              && !trap
              && (GETARG_C(i) == 1 || GETARG_C(i) == 2)
        ) {
          if (fvalue(s2v(ra)) == next && ttisnil(s2v(ra + 2))) {
            settt_(s2v(ra + 3), LUA_VITER);
            val_(s2v(ra + 3)).it = 0;
          } else if (fvalue(s2v(ra)) == ipairsaux && ttisinteger(s2v(ra + 2))) {
            settt_(s2v(ra + 3), LUA_VITERI);
          } else {
            /* create to-be-closed upvalue (if needed) */
            halfProtect(luaF_newtbcupval(L, ra + 3));
          }
        } else {
          /* create to-be-closed upvalue (if needed) */
          halfProtect(luaF_newtbcupval(L, ra + 3));
        }
        pc = callpc + 1;
        lua_assert(GET_OPCODE(i) == OP_TFORCALL && ra == RA(i));
        goto l_tforcall;
      }
      vmcase(OP_TFORCALL) {
       l_tforcall:
        /* 'ra' has the iterator function, 'ra + 1' has the state,
           'ra + 2' has the control variable, and 'ra + 3' has the
           to-be-closed variable. The call will use the stack after
           these values (starting at 'ra + 4')
        */
        /* push function, state, and control variable */
        memcpy(ra + 4, ra, 3 * sizeof(*ra));
        L->top = ra + 4 + 3;

        /* if the object is not a function then wrap it in a pairs */
        /*if (!ttisfunction(s2v(ra + 4))) {
          
        }else{*/
          ProtectNT(luaD_call(L, ra + 4, GETARG_C(i)));  /* do the call */
        /*}*/
        
        updatestack(ci);  /* stack may have changed */
        i = *(pc++);  /* go to next instruction */
        lua_assert(GET_OPCODE(i) == OP_TFORLOOP && ra == RA(i));
        goto l_tforloop;
      }
      vmcase(OP_TFORLOOP) {
        l_tforloop:
        if (!ttisnil(s2v(ra + 4))) {  /* continue loop? */
          setobjs2s(L, ra + 2, ra + 4);  /* save control variable */
          pc -= GETARG_Bx(i);  /* jump back */
        }
        vmbreak;
      }
      vmcase(OP_SETLIST) {
        int n = GETARG_B(i);
        unsigned int last = GETARG_C(i);
        Table *h = hvalue(s2v(ra));
        if (n == 0)
          n = cast_int(L->top - ra) - 1;  /* get up to the top */
        else
          L->top = ci->top;  /* correct top in case of emergency GC */
        last += n;
        if (TESTARG_k(i)) {
          last += GETARG_Ax(*pc) * (MAXARG_C + 1);
          pc++;
        }
        if (last > luaH_realasize(h))  /* needs more space? */
          luaH_resizearray(L, h, last);  /* preallocate it at once */
        for (; n > 0; n--) {
          TValue *val = s2v(ra + n);
          setobj2t(L, &h->array[last - 1], val);
          last--;
          luaC_barrierback(L, obj2gco(h), val);
        }
        vmbreak;
      }
      vmcase(OP_CLOSURE) {
        Proto *p = cl->p->p[GETARG_Bx(i)];
        halfProtect(pushclosure(L, p, cl->upvals, base, ra));
        checkGC(L, ra + 1);
        vmbreak;
      }
      vmcase(OP_VARARG) {
        int n = GETARG_C(i) - 1;  /* required results */
        Protect(luaT_getvarargs(L, ci, ra, n));
        vmbreak;
      }
      vmcase(OP_VARARGPREP) {
        ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));
        if (l_unlikely(trap)) {  /* previous "Protect" updated trap */
          luaD_hookcall(L, ci);
          L->oldpc = 1;  /* next opcode will be seen as a "new" line */
        }
        updatebase(ci);  /* function has new base after adjustment */
        vmbreak;
      }
      vmcase(OP_EXTRAARG) {
        lua_assert(0);
        vmbreak;
      }
    }
  }
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




/* Define 'chdir' for systems that do not implement it */
#ifdef NO_CHDIR
#define chdir(p) (-1)
#define chdir_error "Function 'chdir' not provided by system"
#else
#define chdir_error strerror(errno)
#endif

#ifdef _WIN32
#define chdir(p) (_chdir(p))
#define getcwd(d, s) (_getcwd(d, s))
#define rmdir(p) (_rmdir(p))
#define LFS_EXPORT __declspec(dllexport)
#ifndef fileno
#define fileno(f) (_fileno(f))
#endif
#else
#define LFS_EXPORT
#endif

#ifdef __cplusplus
extern "C" {
#endif

LFS_EXPORT int luaopen_lfs(lua_State* L);

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lfunc_h
#define lfunc_h


#define sizeCclosure(n) \
  (cast_int(offsetof(CClosure, upvalue)) + cast_int(sizeof(TValue)) * (n))

#define sizeLclosure(n) \
  (cast_int(offsetof(LClosure, upvals)) + cast_int(sizeof(TValue *)) * (n))

/* test whether thread is in 'twups' list */
#define isintwups(L) (L->twups != L)

/*
** maximum number of upvalues in a closure (both C and Lua). (Value
** must fit in a VM register.)
*/
#define MAXUPVAL 255

#define upisopen(up) ((up)->v != &(up)->u.value)

#define uplevel(up) check_exp(upisopen(up), cast(StkId, (up)->v))

/*
** maximum number of misses before giving up the cache of closures
** in prototypes
*/
#define MAXMISS 10

/* special status to close upvalues preserving the top of the stack */
#define CLOSEKTOP (-1)

LUAI_FUNC Proto *luaF_newproto(lua_State *L);
LUAI_FUNC CClosure *luaF_newCclosure(lua_State *L, int nupvals);
LUAI_FUNC LClosure *luaF_newLclosure(lua_State *L, int nupvals);
LUAI_FUNC void luaF_initupvals(lua_State *L, LClosure *cl);
LUAI_FUNC UpVal *luaF_findupval(lua_State *L, StkId level);
LUAI_FUNC void luaF_newtbcupval(lua_State *L, StkId level);
LUAI_FUNC void luaF_closeupval(lua_State *L, StkId level);
LUAI_FUNC void luaF_close(lua_State *L, StkId level, int status, int yy);
LUAI_FUNC void luaF_unlinkupval(UpVal *uv);
LUAI_FUNC void luaF_freeproto(lua_State *L, Proto *f);
LUAI_FUNC const char *luaF_getlocalname(const Proto *func, int local_number,
                                        int pc);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lgc_h
#define lgc_h


/*
** Collectable objects may have one of three colors: white, which means
** the object is not marked; gray, which means the object is marked, but
** its references may be not marked; and black, which means that the
** object and all its references are marked.  The main invariant of the
** garbage collector, while marking objects, is that a black object can
** never point to a white one. Moreover, any gray object must be in a
** "gray list" (gray, grayagain, weak, allweak, ephemeron) so that it
** can be visited again before finishing the collection cycle. (Open
** upvalues are an exception to this rule.)  These lists have no meaning
** when the invariant is not being enforced (e.g., sweep phase).
*/

/*
** Possible states of the Garbage Collector
*/
#define GCSpropagate 0
#define GCSenteratomic 1
#define GCSatomic 2
#define GCSswpallgc 3
#define GCSswpfinobj 4
#define GCSswptobefnz 5
#define GCSswpend 6
#define GCScallfin 7
#define GCSpause 8

#define issweepphase(g) \
  (GCSswpallgc <= (g)->gcstate && (g)->gcstate <= GCSswpend)

/*
** macro to tell when main invariant (white objects cannot point to black
** ones) must be kept. During a collection, the sweep
** phase may break the invariant, as objects turned white may point to
** still-black objects. The invariant is restored when sweep ends and
** all objects are white again.
*/

#define keepinvariant(g) ((g)->gcstate <= GCSatomic)

/*
** some useful bit tricks
*/
#define resetbits(x, m) ((x) &= cast_byte(~(m)))
#define setbits(x, m) ((x) |= (m))
#define testbits(x, m) ((x) & (m))
#define bitmask(b) (1 << (b))
#define bit2mask(b1, b2) (bitmask(b1) | bitmask(b2))
#define l_setbit(x, b) setbits(x, bitmask(b))
#define resetbit(x, b) resetbits(x, bitmask(b))
#define testbit(x, b) testbits(x, bitmask(b))

/*
** Layout for bit use in 'marked' field. First three bits are
** used for object "age" in generational mode. Last bit is used
** by tests.
*/
#define WHITE0BIT 3    /* object is white (type 0) */
#define WHITE1BIT 4    /* object is white (type 1) */
#define BLACKBIT 5     /* object is black */
#define FINALIZEDBIT 6 /* object has been marked for finalization */

#define TESTBIT 7

#define WHITEBITS bit2mask(WHITE0BIT, WHITE1BIT)

#define iswhite(x) testbits((x)->marked, WHITEBITS)
#define isblack(x) testbit((x)->marked, BLACKBIT)
#define isgray(x) /* neither white nor black */ \
  (!testbits((x)->marked, WHITEBITS | bitmask(BLACKBIT)))

#define tofinalize(x) testbit((x)->marked, FINALIZEDBIT)

#define otherwhite(g) ((g)->currentwhite ^ WHITEBITS)
#define isdeadm(ow, m) ((m) & (ow))
#define isdead(g, v) isdeadm(otherwhite(g), (v)->marked)

#define changewhite(x) ((x)->marked ^= WHITEBITS)
#define nw2black(x) check_exp(!iswhite(x), l_setbit((x)->marked, BLACKBIT))

#define luaC_white(g) cast_byte((g)->currentwhite &WHITEBITS)

/* object age in generational mode */
#define G_NEW 0      /* created in current cycle */
#define G_SURVIVAL 1 /* created in previous cycle */
#define G_OLD0 2     /* marked old by frw. barrier in this cycle */
#define G_OLD1 3     /* first full cycle as old */
#define G_OLD 4      /* really old object (not to be visited) */
#define G_TOUCHED1 5 /* old object touched this cycle */
#define G_TOUCHED2 6 /* old object touched in previous cycle */

#define AGEBITS 7 /* all age bits (111) */

#define getage(o) ((o)->marked & AGEBITS)
#define setage(o, a) ((o)->marked = cast_byte(((o)->marked & (~AGEBITS)) | a))
#define isold(o) (getage(o) > G_SURVIVAL)

#define changeage(o, f, t) \
  check_exp(getage(o) == (f), (o)->marked ^= ((f) ^ (t)))

/* Default Values for GC parameters */
#define LUAI_GENMAJORMUL 100
#define LUAI_GENMINORMUL 20

/* wait memory to double before starting new cycle */
#define LUAI_GCPAUSE 200

/*
** some gc parameters are stored divided by 4 to allow a maximum value
** up to 1023 in a 'lu_byte'.
*/
#define getgcparam(p) ((p)*4)
#define setgcparam(p, v) ((p) = (v) / 4)

#define LUAI_GCMUL 100

/* how much to allocate before next GC step (log2) */
#define LUAI_GCSTEPSIZE 13 /* 8 KB */

/*
** Check whether the declared GC mode is generational. While in
** generational mode, the collector can go temporarily to incremental
** mode to improve performance. This is signaled by 'g->lastatomic != 0'.
*/
#define isdecGCmodegen(g) (g->gckind == KGC_GEN || g->lastatomic != 0)

/*
** Control when GC is running:
*/
#define GCSTPUSR 1 /* bit true when GC stopped by user */
#define GCSTPGC 2  /* bit true when GC stopped by itself */
#define GCSTPCLS 4 /* bit true when closing Lua state */
#define gcrunning(g) ((g)->gcstp == 0)

/*
** Does one step of collection when debt becomes positive. 'pre'/'pos'
** allows some adjustments to be done only when needed. macro
** 'condchangemem' is used only for heavy tests (forcing a full
** GC cycle on every opportunity)
*/
#define luaC_condGC(L, pre, pos) \
  {                              \
    if (G(L)->GCdebt > 0) {      \
      pre;                       \
      luaC_step(L);              \
      pos;                       \
    };                           \
    condchangemem(L, pre, pos);  \
  }

/* more often than not, 'pre'/'pos' are empty */
#define luaC_checkGC(L) luaC_condGC(L, (void)0, (void)0)

#define luaC_barrier(L, p, v)                              \
  ((iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) \
       ? luaC_barrier_(L, obj2gco(p), gcvalue(v))          \
       : cast_void(0))

#define luaC_barrierback(L, p, v)                          \
  ((iscollectable(v) && isblack(p) && iswhite(gcvalue(v))) \
       ? luaC_barrierback_(L, p)                           \
       : cast_void(0))

#define luaC_objbarrier(L, p, o)                                         \
  ((isblack(p) && iswhite(o)) ? luaC_barrier_(L, obj2gco(p), obj2gco(o)) \
                              : cast_void(0))

LUAI_FUNC void luaC_fix(lua_State *L, GCObject *o);
LUAI_FUNC void luaC_freeallobjects(lua_State *L);
LUAI_FUNC void luaC_step(lua_State *L);
LUAI_FUNC void luaC_runtilstate(lua_State *L, int statesmask);
LUAI_FUNC void luaC_fullgc(lua_State *L, int isemergency);
LUAI_FUNC GCObject *luaC_newobj(lua_State *L, int tt, size_t sz);
LUAI_FUNC void luaC_barrier_(lua_State *L, GCObject *o, GCObject *v);
LUAI_FUNC void luaC_barrierback_(lua_State *L, GCObject *o);
LUAI_FUNC void luaC_checkfinalizer(lua_State *L, GCObject *o, Table *mt);
LUAI_FUNC void luaC_changemode(lua_State *L, int newmode);

#endif

#ifdef __cplusplus
}
#endif



#undef vmdispatch
#undef vmcase
#undef vmbreak

#define vmdispatch(x) goto *disptab[x];

#define vmcase(l) L_##l:

#define vmbreak \
  vmfetch();    \
  vmdispatch(GET_OPCODE(i));

static const void *const disptab[NUM_OPCODES] = {

#if 0
** you can update the following list with this command:
**
**  sed -n '/^OP_/\!d; s/OP_/\&\&L_OP_/ ; s/,.*/,/ ; s/\/.*// ; p'  lopcodes.h
**
#endif

    &&L_OP_MOVE,     &&L_OP_LOADI,      &&L_OP_LOADF,      &&L_OP_LOADK,
    &&L_OP_LOADKX,   &&L_OP_LOADFALSE,  &&L_OP_LFALSESKIP, &&L_OP_LOADTRUE,
    &&L_OP_LOADNIL,  &&L_OP_GETUPVAL,   &&L_OP_SETUPVAL,   &&L_OP_GETTABUP,
    &&L_OP_GETTABLE, &&L_OP_GETI,       &&L_OP_GETFIELD,   &&L_OP_SETTABUP,
    &&L_OP_SETTABLE, &&L_OP_SETI,       &&L_OP_SETFIELD,   &&L_OP_NEWTABLE,
    &&L_OP_SELF,     &&L_OP_ADDI,       &&L_OP_ADDK,       &&L_OP_SUBK,
    &&L_OP_MULK,     &&L_OP_MODK,       &&L_OP_POWK,       &&L_OP_DIVK,
    &&L_OP_IDIVK,    &&L_OP_BANDK,      &&L_OP_BORK,       &&L_OP_BXORK,
    &&L_OP_SHRI,     &&L_OP_SHLI,       &&L_OP_ADD,        &&L_OP_SUB,
    &&L_OP_MUL,      &&L_OP_MOD,        &&L_OP_POW,        &&L_OP_DIV,
    &&L_OP_IDIV,     &&L_OP_BAND,       &&L_OP_BOR,        &&L_OP_BXOR,
    &&L_OP_SHL,      &&L_OP_SHR,        &&L_OP_MMBIN,      &&L_OP_MMBINI,
    &&L_OP_MMBINK,   &&L_OP_UNM,        &&L_OP_BNOT,       &&L_OP_NOT,
    &&L_OP_LEN,      &&L_OP_CONCAT,     &&L_OP_CLOSE,      &&L_OP_TBC,
    &&L_OP_JMP,      &&L_OP_EQ,         &&L_OP_LT,         &&L_OP_LE,
    &&L_OP_EQK,      &&L_OP_EQI,        &&L_OP_LTI,        &&L_OP_LEI,
    &&L_OP_GTI,      &&L_OP_GEI,        &&L_OP_TEST,       &&L_OP_TESTSET,
    &&L_OP_CALL,     &&L_OP_TAILCALL,   &&L_OP_RETURN,     &&L_OP_RETURN0,
    &&L_OP_RETURN1,  &&L_OP_FORLOOP,    &&L_OP_FORPREP,    &&L_OP_TFORPREP,
    &&L_OP_TFORCALL, &&L_OP_TFORLOOP,   &&L_OP_SETLIST,    &&L_OP_CLOSURE,
    &&L_OP_VARARG,   &&L_OP_VARARGPREP, &&L_OP_EXTRAARG

};
#ifdef __cplusplus
extern "C" {
#endif



/* 
Provides a simple interface to switch the interpreter state.
*/


#ifndef LLANGSTATE_H
#ifndef INTERNAL_AOT
#define LLANGSTATE_H

extern int State = 1;

/*
1: normal interpreter
2: mini interpreter
3: jit interpreter
4: byteaot
5: caot
6: iraot
*/

int luaB_state(lua_State *L){
    /* switches the interpreter state */
    #ifdef AOT_IS_MODULE
        lua_error("AOT compiler is used and the state is locked.");
        return 0;
    #else
        int n = lua_gettop(L); /* number of arguments */
        if (n != 1) {
            lua_pushliteral(L, "wrong number of arguments");
            lua_error(L);
        }
        if (!lua_isnumber(L, 1)) {
            lua_pushliteral(L, "wrong argument type");
            lua_error(L);
        }
        if (lua_tonumber(L, 1) < 1 || lua_tonumber(L, 1) > 3) {
            lua_pushliteral(L, "invalid state");
            lua_error(L);
        }
        State = lua_tonumber(L, 1);
        return 0;
    #endif
}

int luaB_getstate(lua_State *L){
    /* returns the current interpreter state */
    #ifdef AOT_IS_MODULE
        lua_pushnumber(L, 3);
    #else
        lua_pushnumber(L, State);
    #endif
    return 1;
}
#endif // INTERNAL_AOT
#endif // LLANGSTATE_H
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef llex_h
#define llex_h

#include <limits.h>


/*
** Single-char tokens (terminal symbols) are represented by their own
** numeric code. Other tokens start at the following value.
*/
#define FIRST_RESERVED (UCHAR_MAX + 1)

#if !defined(LUA_ENV)
#define LUA_ENV "_ENV"
#endif

/*
 * WARNING: if you change the order of this enumeration,
 * grep "ORDER RESERVED"
 */
enum RESERVED {
  /* terminal symbols denoted by reserved words */
  TK_AUTO = FIRST_RESERVED,
  TK_BREAK,
  TK_CONTINUE,
  TK_DO,
  TK_ELSE,
  TK_FALSE,
  TK___FILE__,
  TK_FOR,
  TK_FUNCTION,
  TK_GOTO,
  TK_IF,
  TK_IN,
  TK_LET,
  TK___LINE__,
  TK_LOCAL,
  TK_NIL,
  TK_RETURN,
  TK_TRUE,
  TK_VAR,
  TK_CASE, 
  TK_DEFAULT, 
  TK_AS, 
  TK_BEGIN, 
  TK_EXTENDS, 
  TK_INSTANCEOF,
  TK_SWITCH, 
  TK_ENUM, 
  TK_NEW, 
  TK_CLASS,
  TK_PARENT, 
  TK_EXPORT,
  TK_CONFIG,
  TK_WHILE,

  /* other terminal symbols */
  TK_AND,
  TK_NOT,
  TK_OR,
  TK_POW,
  TK_IDIV,
  TK_CONCAT,
  TK_DOTS,
  TK_EQ,
  TK_GE,
  TK_LE,
  TK_NE,
  TK_CADD,
  TK_CSUB,
  TK_CMUL,
  TK_CDIV,
  TK_CMOD,
  TK_CCONCAT,
  TK_PLUSPLUS,
  TK_MINUSMINUS,
  TK_SHL,
  TK_SHR,
  TK_ARROW,
  TK_DBCOLON,
  TK_EOS,
  TK_FLT,
  TK_INT,
  TK_NAME,
  TK_STRING,
  TK_COAL,
  TK_WALRUS,
};

/* number of reserved words */
#define NUM_RESERVED (cast_int(TK_WHILE - FIRST_RESERVED))

typedef union {
  lua_Number r;
  lua_Integer i;
  TString *ts;
} SemInfo; /* semantics information */

typedef struct Token {
  int token;
  SemInfo seminfo;
} Token;

/* state of the lexer plus state of the parser when shared by all
   functions */
typedef struct LexState {
  int current;          /* current character (charint) */
  int linenumber;       /* input line counter */
  int lastline;         /* line of last token 'consumed' */
  Token t;              /* current token */
  Token lookahead;      /* look ahead token */
  struct FuncState *fs; /* current function (parser) */
  struct lua_State *L;
  ZIO *z;              /* input stream */
  Mbuffer *buff;       /* buffer for tokens */
  Table *h;            /* to avoid collection/reuse strings */
  struct Dyndata *dyd; /* dynamic structures used by the parser */
  TString *source;     /* current source name */
  TString *envn;       /* environment variable name */

  /* added in cobalt */
  std::vector<TString*> export_symbols;
  
  /** configurations */
  bool strict_type_config=false;
  bool check_type=false;
} LexState;

LUAI_FUNC void luaX_init(lua_State *L);
LUAI_FUNC void luaX_setinput(lua_State *L, LexState *ls, ZIO *z,
                             TString *source, int firstchar);
LUAI_FUNC TString *luaX_newstring(LexState *ls, const char *str, size_t l);
LUAI_FUNC void luaX_next(LexState *ls);
LUAI_FUNC void luaX_prev(LexState *ls);
LUAI_FUNC int luaX_lookahead(LexState *ls);
LUAI_FUNC l_noret luaX_syntaxerror(LexState *ls, const char *s);
LUAI_FUNC l_noret luaX_notedsyntaxerror(LexState *ls, const char *s, const char *msg);
LUAI_FUNC void luaX_syntaxwarning(LexState *ls, const char *s);
LUAI_FUNC const char *luaX_token2str(LexState *ls, int token);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef llimits_h
#define llimits_h

#include <limits.h>
#include <stddef.h>


/*
** 'lu_mem' and 'l_mem' are unsigned/signed integers big enough to count
** the total memory used by Lua (in bytes). Usually, 'size_t' and
** 'ptrdiff_t' should work, but we use 'long' for 16-bit machines.
*/
#if defined(LUAI_MEM) /* { external definitions? */
typedef LUAI_UMEM lu_mem;
typedef LUAI_MEM l_mem;
#elif LUAI_IS32INT      /* }{ */
typedef size_t lu_mem;
typedef ptrdiff_t l_mem;
#else /* 16-bit ints */ /* }{ */
typedef unsigned long lu_mem;
typedef long l_mem;
#endif                  /* } */

/* chars used as small naturals (so that 'char' is reserved for characters) */
typedef unsigned char lu_byte;
typedef signed char ls_byte;

/* maximum value for size_t */
#define MAX_SIZET ((size_t)(~(size_t)0))

/* maximum size visible for Lua (must be representable in a lua_Integer) */
#define MAX_SIZE \
  (sizeof(size_t) < sizeof(lua_Integer) ? MAX_SIZET : (size_t)(LUA_MAXINTEGER))

#define MAX_LUMEM ((lu_mem)(~(lu_mem)0))

#define MAX_LMEM ((l_mem)(MAX_LUMEM >> 1))

#define MAX_INT INT_MAX /* maximum value of an int */

/*
** floor of the log2 of the maximum signed value for integral type 't'.
** (That is, maximum 'n' such that '2^n' fits in the given signed type.)
*/
#define log2maxs(t) (sizeof(t) * 8 - 2)

/*
** test whether an unsigned value is a power of 2 (or zero)
*/
#define ispow2(x) (((x) & ((x)-1)) == 0)

/* number of chars of a literal string without the ending \0 */
#define LL(x) (sizeof(x) / sizeof(char) - 1)

/*
** conversion of pointer to unsigned integer:
** this is for hashing only; there is no problem if the integer
** cannot hold the whole pointer value
*/
#define point2uint(p) ((unsigned int)((size_t)(p)&UINT_MAX))

/* types of 'usual argument conversions' for lua_Number and lua_Integer */
typedef LUAI_UACNUMBER l_uacNumber;
typedef LUAI_UACINT l_uacInt;

/*
** Internal assertions for in-house debugging
*/
#if defined LUAI_ASSERT
#undef NDEBUG
#include <assert.h>
#define lua_assert(c) assert(c)
#endif

#if defined(lua_assert)
#define check_exp(c, e) (lua_assert(c), (e))
/* to avoid problems with conditions too long */
#define lua_longassert(c) ((c) ? (void)0 : lua_assert(0))
#else
#define lua_assert(c) ((void)0)
#define check_exp(c, e) (e)
#define lua_longassert(c) ((void)0)
#endif

/*
** assertion for checking API calls
*/
#if !defined(luai_apicheck)
#define luai_apicheck(l, e) ((void)l, lua_assert(e))
#endif

#define api_check(l, e, msg) luai_apicheck(l, (e) && msg)

/* macro to avoid warnings about unused variables */
#if !defined(UNUSED)
#define UNUSED(x) ((void)(x))
#endif

/* type casts (a macro highlights casts in the code) */
#define cast(t, exp) ((t)(exp))

#define cast_void(i) cast(void, (i))
#define cast_voidp(i) cast(void *, (i))
#define cast_num(i) cast(lua_Number, (i))
#define cast_int(i) cast(int, (i))
#define cast_uint(i) cast(unsigned int, (i))
#define cast_byte(i) cast(lu_byte, (i))
#define cast_uchar(i) cast(unsigned char, (i))
#define cast_char(i) cast(char, (i))
#define cast_charp(i) cast(char *, (i))
#define cast_sizet(i) cast(size_t, (i))

/* cast a signed lua_Integer to lua_Unsigned */
#if !defined(l_castS2U)
#define l_castS2U(i) ((lua_Unsigned)(i))
#endif

/*
** cast a lua_Unsigned to a signed lua_Integer; this cast is
** not strict ISO C, but two-complement architectures should
** work fine.
*/
#if !defined(l_castU2S)
#define l_castU2S(i) ((lua_Integer)(i))
#endif

/*
** non-return type
*/
#if !defined(l_noret)

#if defined(__GNUC__)
#define l_noret void __attribute__((noreturn))
#elif defined(_MSC_VER) && _MSC_VER >= 1200
#define l_noret void __declspec(noreturn)
#else
#define l_noret void
#endif

#endif

/*
** Inline functions
*/
#if !defined(LUA_USE_C89)
#define l_inline inline
#elif defined(__GNUC__)
#define l_inline __inline__
#else
#define l_inline /* empty */
#endif

#define l_sinline static l_inline

/*
** type for virtual-machine instructions;
** must be an unsigned with (at least) 4 bytes (see details in lopcodes.h)
*/
#if LUAI_IS32INT
typedef unsigned int l_uint32;
#else
typedef unsigned long l_uint32;
#endif

typedef l_uint32 Instruction;

/*
** Maximum length for short strings, that is, strings that are
** internalized. (Cannot be smaller than reserved words or tags for
** metamethods, as these strings must be internalized;
** #("function") = 8, #("__newindex") = 10.)
*/
#if !defined(LUAI_MAXSHORTLEN)
#define LUAI_MAXSHORTLEN 40
#endif

/*
** Initial size for the string table (must be power of 2).
** The Lua core alone registers ~50 strings (reserved words +
** metaevent keys + a few others). Libraries would typically add
** a few dozens more.
*/
#if !defined(MINSTRTABSIZE)
#define MINSTRTABSIZE 128
#endif

/*
** Size of cache for strings in the API. 'N' is the number of
** sets (better be a prime) and "M" is the size of each set (M == 1
** makes a direct cache.)
*/
#if !defined(STRCACHE_N)
#define STRCACHE_N 53
#define STRCACHE_M 2
#endif

/* minimum size for string buffer */
#if !defined(LUA_MINBUFFER)
#define LUA_MINBUFFER 32
#endif

/*
** Maximum depth for nested C calls, syntactical nested non-terminals,
** and other features implemented through recursion in C. (Value must
** fit in a 16-bit unsigned integer. It must also be compatible with
** the size of the C stack.)
*/
#if !defined(LUAI_MAXCCALLS)
#define LUAI_MAXCCALLS 200
#endif

/*
** macros that are executed whenever program enters the Lua core
** ('lua_lock') and leaves the core ('lua_unlock')
*/
#if !defined(lua_lock)
#define lua_lock(L) ((void)0)
#define lua_unlock(L) ((void)0)
#endif

/*
** macro executed during Lua functions at points where the
** function can yield.
*/
#if !defined(luai_threadyield)
#define luai_threadyield(L) \
  {                         \
    lua_unlock(L);          \
    lua_lock(L);            \
  }
#endif

/*
** these macros allow user-specific actions when a thread is
** created/deleted/resumed/yielded.
*/
#if !defined(luai_userstateopen)
#define luai_userstateopen(L) ((void)L)
#endif

#if !defined(luai_userstateclose)
#define luai_userstateclose(L) ((void)L)
#endif

#if !defined(luai_userstatethread)
#define luai_userstatethread(L, L1) ((void)L)
#endif

#if !defined(luai_userstatefree)
#define luai_userstatefree(L, L1) ((void)L)
#endif

#if !defined(luai_userstateresume)
#define luai_userstateresume(L, n) ((void)L)
#endif

#if !defined(luai_userstateyield)
#define luai_userstateyield(L, n) ((void)L)
#endif

/*
** The luai_num* macros define the primitive operations over numbers.
*/

/* floor division (defined as 'floor(a/b)') */
#if !defined(luai_numidiv)
#define luai_numidiv(L, a, b) ((void)L, l_floor(luai_numdiv(L, a, b)))
#endif

/* float division */
#if !defined(luai_numdiv)
#define luai_numdiv(L, a, b) ((a) / (b))
#endif

/*
** modulo: defined as 'a - floor(a/b)*b'; the direct computation
** using this definition has several problems with rounding errors,
** so it is better to use 'fmod'. 'fmod' gives the result of
** 'a - trunc(a/b)*b', and therefore must be corrected when
** 'trunc(a/b) ~= floor(a/b)'. That happens when the division has a
** non-integer negative result: non-integer result is equivalent to
** a non-zero remainder 'm'; negative result is equivalent to 'a' and
** 'b' with different signs, or 'm' and 'b' with different signs
** (as the result 'm' of 'fmod' has the same sign of 'a').
*/
#if !defined(luai_nummod)
#define luai_nummod(L, a, b, m)                                 \
  {                                                             \
    (void)L;                                                    \
    (m) = l_mathop(fmod)(a, b);                                 \
    if (((m) > 0) ? (b) < 0 : ((m) < 0 && (b) > 0)) (m) += (b); \
  }
#endif

/* exponentiation */
#if !defined(luai_numpow)
#define luai_numpow(L, a, b) \
  ((void)L, (b == 2) ? (a) * (a) : l_mathop(pow)(a, b))
#endif

/* the others are quite standard operations */
#if !defined(luai_numadd)
#define luai_numadd(L, a, b) ((a) + (b))
#define luai_numsub(L, a, b) ((a) - (b))
#define luai_nummul(L, a, b) ((a) * (b))
#define luai_numunm(L, a) (-(a))
#define luai_numeq(a, b) ((a) == (b))
#define luai_numlt(a, b) ((a) < (b))
#define luai_numle(a, b) ((a) <= (b))
#define luai_numgt(a, b) ((a) > (b))
#define luai_numge(a, b) ((a) >= (b))
#define luai_numisnan(a) (!luai_numeq((a), (a)))
#endif

/*
** macro to control inclusion of some hard tests on stack reallocation
*/
#if !defined(HARDSTACKTESTS)
#define condmovestack(L, pre, pos) ((void)0)
#else
/* realloc stack keeping its size */
#define condmovestack(L, pre, pos)  \
  {                                 \
    int sz_ = stacksize(L);         \
    pre;                            \
    luaD_reallocstack((L), sz_, 0); \
    pos;                            \
  }
#endif

#if !defined(HARDMEMTESTS)
#define condchangemem(L, pre, pos) ((void)0)
#else
#define condchangemem(L, pre, pos) \
  {                                \
    if (gcrunning(G(L))) {         \
      pre;                         \
      luaC_fullgc(L, 0);           \
      pos;                         \
    }                              \
  }
#endif

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLARITH_H
#define LLLARITH_H


namespace lll {

class Register;
class Value;

class Arith : public Opcode {
 public:
  // Constructor
  Arith(CompilerState& cs, Stack& stack);

  // Compiles the opcode
  void Compile();

 private:
  // Compilation steps
  void CheckXTag();
  void CheckYTag();
  void ComputeInt();
  void ComputeFloat();
  void ComputeTaggedMethod();

  // Returns whether the opcode can perform an integer operation
  bool HasIntegerOp();

  // Performs the integer/float binary operation
  llvm::Value* PerformIntOp(llvm::Value* lhs, llvm::Value* rhs);
  llvm::Value* PerformFloatOp(llvm::Value* lhs, llvm::Value* rhs);

  // Obtains the corresponding tag for the opcode
  int GetMethodTag();

  Register& ra_;
  Value& rkb_;
  Value& rkc_;
  Value& x_;
  Value& y_;
  llvm::BasicBlock* check_y_;
  llvm::BasicBlock* intop_;
  llvm::BasicBlock* floatop_;
  llvm::BasicBlock* tmop_;
  llvm::Value* x_int_;
  llvm::Value* x_float_;
  IncomingList x_float_inc_;
  IncomingList y_float_inc_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLCOMPILER_H
#define LLLCOMPILER_H

#include <memory>
#include <string>


namespace lll {

class Engine;

class Compiler {
 public:
  // Constructor, receiver the proto that will be compiled
  Compiler(lua_State* L, Proto* proto);

  // Starts the function compilation
  // Returns false if it fails
  bool Compile();

  // Gets the compilation error message
  const std::string& GetErrorMessage();

  // Gets the engine (only if compilation succeeds)
  Engine* GetEngine();

 private:
  // Compiles the Lua proto instructions
  bool CompileInstructions();

  // Returns true if the module doesn't have any error
  bool VerifyModule();

  // Optimize the generated module
  bool OptimizeModule();

  // Creates the engine and returns true if it doesn't have any error
  bool CreateEngine();

  // Compiles the specific instruction
  void CompileMove();
  void CompileLoadk(bool extraarg);
  void CompileLoadbool();
  void CompileLoadnil();
  void CompileGetupval();
  void CompileGettabup();
  void CompileGettable();
  void CompileSettabup();
  void CompileSetupval();
  void CompileSettable();
  void CompileNewtable();
  void CompileSelf();
  void CompileUnm();
  void CompileBNot();
  void CompileNot();
  void CompileLen();
  void CompileConcat();
  void CompileJmp();
  void CompileCmp(const std::string& function);
  void CompileTest();
  void CompileTestset();
  void CompileCall();
  void CompileTailcall();
  void CompileReturn();
  void CompileForloop();
  void CompileForprep();
  void CompileTforcall();
  void CompileTforloop();
  void CompileSetlist();
  void CompileClosure();
  void CompileCheckcg(llvm::Value* reg);

  std::string error_;
  CompilerState cs_;
  Stack stack_;
  std::unique_ptr<Engine> engine_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLCOMPILERSTATE_H
#define LLLCOMPILERSTATE_H

#include <llvm/IR/Function.h>
#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>

#include <vector>


extern "C" {

struct Proto;
struct lua_State;
}

namespace lll {

class CompilerState {
 public:
  CompilerState(lua_State* L, Proto* proto);

  // Makes a llvm int value
  llvm::Value* MakeInt(int64_t value, llvm::Type* type = nullptr);

  // Converts an int to boolean (value != 0)
  llvm::Value* ToBool(llvm::Value* value);

  // Injects a pointer from host to jit
  llvm::Value* InjectPointer(llvm::Type* type, void* ptr);

  // Obtains the pointer to the field at $offset
  llvm::Value* GetFieldPtr(llvm::Value* strukt, llvm::Type* fieldtype,
                           size_t offset, const std::string& name);

  // Loads the field at $offset
  llvm::Value* LoadField(llvm::Value* strukt, llvm::Type* fieldtype,
                         size_t offset, const std::string& name);

  // Sets a field at $offset
  void SetField(llvm::Value* strukt, llvm::Value* fieldvalue, size_t offset,
                const std::string& fieldname);

  // Create a function call
  llvm::Value* CreateCall(const std::string& name,
                          std::initializer_list<llvm::Value*> args,
                          const std::string& retname = "");

  // Obtains the base of the stack
  llvm::Value* GetBase();

  // Updates base value
  void UpdateBase();

  // Sets L->top = ci->top
  void ReloadTop();

  // Assigns the top as the $n register
  void SetTop(int n);

  // Returns the ptrdiff from register $n to top
  llvm::Value* TopDiff(int n);

  // Creates the entry block
  void InitEntryBlock();

  // Creates a sub-block with $suffix
  llvm::BasicBlock* CreateSubBlock(const std::string& suffix,
                                   llvm::BasicBlock* preview = nullptr);

  // Prints a message inside the jitted function (DEBUG)
  template <typename... Arguments>
  void DebugPrint(const std::string& format, Arguments... args) {
    auto function = module_->getFunction("printf");
    if (!function) {
      auto rettype = llvm::Type::getVoidTy(context_);
      auto paramtype = llvm::PointerType::get(rt_.MakeIntT(1), 0);
      auto functype = llvm::FunctionType::get(rettype, {paramtype}, true);
      function = llvm::Function::Create(
          functype, llvm::Function::ExternalLinkage, "printf", module_.get());
    }
    auto callargs = {B_.CreateGlobalStringPtr(format + "\n"), args...};
    B_.CreateCall(function, callargs);
  }

  lua_State* L_;
  Proto* proto_;
  llvm::LLVMContext& context_;
  Runtime& rt_;
  std::unique_ptr<llvm::Module> module_;
  llvm::Function* function_;
  llvm::IRBuilder<> B_;
  llvm::BasicBlock* entry_;
  std::vector<llvm::BasicBlock*> blocks_;
  struct {
    llvm::Value* state;
    llvm::Value* closure;
    llvm::Value* ci;
    llvm::Value* upvals;
    llvm::Value* base;
    llvm::Value* xnumber;
    llvm::Value* ynumber;
    llvm::Value* meminteger;
  } values_;
  int curr_;
  Instruction instr_;

 private:
  // Creates the main function
  llvm::Function* CreateMainFunction();
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLCORE_H
#define LLLCORE_H


/* Compiles a function and attachs it to the proto
** In success returns 0, else returns 1
** If errmsg != NULL also returns the error message (must be freed) */
int LLLCompile(lua_State *L, Proto *p, char **errmsg);

/* Also compiles all children functions */
int LLLCompileAll(lua_State *L, Proto *p, char **errmsg);

/* Enables or disables the auto compilation */
void LLLSetAutoCompileEnable(int enable);

/* Returns whether the auto compilation is enable */
int LLLIsAutoCompileEnable();

/* Sets the number of calls required to auto-compile a function */
void LLLSetCallsToCompile(int calls);

/* Obtains the number of calls required to auto-compile a function */
int LLLGetCallsToCompile();

/* Returns whether the function is compiled */
int LLLIsCompiled(Proto *p);

/* Destroys the engine */
void LLLFreeEngine(lua_State *L, Proto *p);

/* Dumps the LLMV function (debug) */
void LLLDump(Proto *p);

/* Writes the bytecode and the asm of $p to $path (debug) */
void LLLWrite(Proto *p, const char *path);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLENGINE_H
#define LLLENGINE_H

#include <llvm/ExecutionEngine/ExecutionEngine.h>

#include <memory>

namespace lll {

class Engine {
 public:
  Engine(llvm::ExecutionEngine* ee, llvm::Module* module,
         llvm::Function* function);

  // Gets the compiled function
  void* GetFunction();

  // Dumps the compiled modules
  void Dump();

  // Writes the bytecode and asm files
  void Write(const std::string& path);

 private:
  std::unique_ptr<llvm::ExecutionEngine> ee_;
  llvm::Module* module_;
  void* function_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLLOGICAL_H
#define LLLLOGICAL_H


namespace lll {

class Register;
class Value;

class Logical : public Opcode {
 public:
  // Constructor
  Logical(CompilerState& cs, Stack& stack);

  // Compiles the opcode
  void Compile();

 private:
  // Compilation steps
  void ComputeInteger();
  void ComputeTaggedMethod();

  // Performs the integer binary operation
  llvm::Value* PerformIntOp(llvm::Value* a, llvm::Value* b);

  // Obtains the corresponding tag for the opcode
  int GetMethodTag();

  Register& ra_;
  Value& rkb_;
  Value& rkc_;
  llvm::BasicBlock* trytm_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLOPCODE_H
#define LLLOPCODE_H

#include <string>
#include <vector>

namespace llvm {
class BasicBlock;
class Value;
class Type;
}  // namespace llvm

namespace lll {

class CompilerState;
class Stack;

class Opcode {
 public:
  // Default contructor
  Opcode(CompilerState& cs, Stack& stack);

  // Compiles the opcode
  virtual void Compile() = 0;

 protected:
  // List of incomming values and blocks
  typedef std::vector<std::pair<llvm::Value*, llvm::BasicBlock*>> IncomingList;

  // Creates a Phi value and adds it's incoming values
  llvm::Value* CreatePHI(llvm::Type* type, const IncomingList& incoming,
                         const std::string& name);

  CompilerState& cs_;
  Stack& stack_;
  llvm::BasicBlock* entry_;
  llvm::BasicBlock* exit_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLRUNTIME_H
#define LLLRUNTIME_H

#include <llvm/IR/LLVMContext.h>

#include <cstdio>
#include <map>

#define STRINGFY(a) #a
#define STRINGFY2(a) STRINGFY(a)

namespace lll {

class Runtime {
 public:
  // Gets the unique instance
  // Creates it when called for the first time
  static Runtime* Instance();

  // Obtains the type declaration
  llvm::Type* GetType(const std::string& name);

  // Obtains the function declaration
  llvm::Function* GetFunction(llvm::Module* module, const std::string& name);

  // Makes a llvm int type
  llvm::Type* MakeIntT(int nbytes = sizeof(int));

 private:
  Runtime();
  void InitTypes();
  void InitFunctions();

  // Adds a named struct type with $size bytes
  void AddStructType(const std::string& name, size_t size);

  // Adds a function that can be compiled
  void AddFunction(const std::string& name, llvm::FunctionType* type,
                   void* address);

  // Verifies if the key exists in the map. If not, abort! (debug only)
  template <typename MapType>
  inline void AssertKeyExists(const MapType& map, const std::string& key) {
#ifdef DEBUG
    if (map.find(key) == map.end()) {
        fprinf(stderr, "Key not found %s!\n", key.c_str();
        exit(1);
    }
#else
    (void)map;
    (void)key;
#endif
  }

  static Runtime* instance_;
  llvm::LLVMContext& context_;
  std::map<std::string, llvm::Type*> types_;
  std::map<std::string, llvm::FunctionType*> functions_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLTABLEGET_H
#define LLLTABLEGET_H


namespace lll {

class Value;
class Register;

class TableGet : public Opcode {
 public:
  // Constructor
  TableGet(CompilerState& cs, Stack& stack, Value& table, Value& key,
           Register& dest);

  // Compiles the opcode
  void Compile();

 private:
  // Compilation steps
  void CheckTable();
  void SwithTag();
  void PerformGet();
  void SearchForTM();
  void SaveResult();
  void FinishGet();

  // Call of a specific luaH_get*
  typedef llvm::Value* (Value::*GetMethod)();
  void PerformGetCase(llvm::BasicBlock* block, GetMethod getmethod,
                      const char* suffix);

  Value& table_;
  Value& key_;
  Register& dest_;
  llvm::Value* tablevalue_;
  IncomingList results_;
  IncomingList tms_;
  llvm::BasicBlock* switchtag_;
  llvm::BasicBlock* getint_;
  llvm::BasicBlock* getshrstr_;
  llvm::BasicBlock* getlngstr_;
  llvm::BasicBlock* getany_;
  llvm::BasicBlock* saveresult_;
  llvm::BasicBlock* searchtm_;
  llvm::BasicBlock* finishget_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLTABLESET_H
#define LLLTABLESET_H


namespace lll {

class Value;

class TableSet : public Opcode {
 public:
  // Constructor
  TableSet(CompilerState& cs, Stack& stack, Value& table, Value& key,
           Value& value);

  // Compiles the opcode
  void Compile();

 private:
  // Compilation steps
  void CheckTable();
  void SwithTag();
  void PerformGet();
  void CallGCBarrier();
  void FastSet();
  void FinishSet();

  // Call of a specific luaH_get*
  typedef llvm::Value* (Value::*GetMethod)();
  void PerformGetCase(llvm::BasicBlock* block, GetMethod getmethod,
                      const char* suffix);

  Value& table_;
  Value& key_;
  Value& value_;
  llvm::Value* tablevalue_;
  llvm::Value* slot_;
  IncomingList slots_;
  IncomingList oldvals_;
  llvm::BasicBlock* switchtag_;
  llvm::BasicBlock* getint_;
  llvm::BasicBlock* getshrstr_;
  llvm::BasicBlock* getlngstr_;
  llvm::BasicBlock* getnil_;
  llvm::BasicBlock* getany_;
  llvm::BasicBlock* callgcbarrier_;
  llvm::BasicBlock* fastset_;
  llvm::BasicBlock* finishset_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLVALUE_H
#define LLLVALUE_H

#include <string>
#include <vector>

namespace llvm {
class Value;
class Type;
}  // namespace llvm

extern "C" {
struct lua_TValue;
}

namespace lll {

class CompilerState;

// The top abstraction for constant, registers and upvalues
class Value {
 public:
  // Constructor
  Value(CompilerState& cs);

  // Returns whether the values has the following tag
  llvm::Value* HasTag(int tag);

  // Obtains the tag of the value
  virtual llvm::Value* GetTag() = 0;

  // Obtains the TValue (this should only be used when calling functions)
  virtual llvm::Value* GetTValue() = 0;

  // Access methods
  virtual llvm::Value* GetBoolean() = 0;
  virtual llvm::Value* GetInteger() = 0;
  virtual llvm::Value* GetFloat() = 0;
  virtual llvm::Value* GetTString() = 0;
  virtual llvm::Value* GetTable() = 0;
  virtual llvm::Value* GetGCValue() = 0;

 protected:
  CompilerState& cs_;
};

// Represents a constant
class Constant : public Value {
 public:
  // Constructor
  Constant(CompilerState& cs, int arg);

  // Value Implementation
  llvm::Value* GetTag();
  llvm::Value* GetTValue();
  llvm::Value* GetBoolean();
  llvm::Value* GetInteger();
  llvm::Value* GetFloat();
  llvm::Value* GetTString();
  llvm::Value* GetTable();
  llvm::Value* GetGCValue();

 private:
  struct lua_TValue* tvalue_;
};

// Base class for mutable values: upvalues and registers
class MutableValue : public Value {
 public:
  // Constructor
  MutableValue(CompilerState& cs);

  // Value Implementation
  virtual llvm::Value* GetTag();
  virtual llvm::Value* GetTValue() = 0;
  virtual llvm::Value* GetBoolean();
  virtual llvm::Value* GetInteger();
  virtual llvm::Value* GetFloat();
  virtual llvm::Value* GetTString();
  virtual llvm::Value* GetTable();
  virtual llvm::Value* GetGCValue();

  // Manipulates the tag of the value
  virtual void SetTagK(int tag);
  virtual void SetTag(llvm::Value* tag);

  // Sets the value field
  virtual void SetValue(llvm::Value* value);

  // Copy the contents of $value to this
  virtual void Assign(Value& value);

  // Sets the value and the tag
  virtual void SetBoolean(llvm::Value* bvalue);
  virtual void SetInteger(llvm::Value* ivalue);
  virtual void SetFloat(llvm::Value* fvalue);

 protected:
  // TValue fields
  enum Field { VALUE = 0, TAG = 1 };

  // Obtains the pointer to a field
  llvm::Value* GetField(Field field);

  // Obtains the pointer to a value and cast it to $type
  llvm::Value* GetValuePtr(llvm::Type* type, const std::string& fieldname);

  // Obtains the value and load it
  llvm::Value* GetValue(llvm::Type* type, const std::string& fieldname);
};

// Represents a register of lua stack
class Register : public MutableValue {
 public:
  // Constructor
  Register(CompilerState& cs, int arg);

  // Initializes the values (create allocas)
  void Init();

  // Reloads the tvalue, should be called after stack update
  void ReloadTValue();

  // Obtains the TValue
  llvm::Value* GetTValue();

 private:
  int arg_;
  llvm::Value* tvalue_;
};

// Represents a register that is only known at runtime
class RTRegister : public MutableValue {
 public:
  // Constructor
  RTRegister(CompilerState& cs, llvm::Value* tvalue);

  // Obtains the TValue
  llvm::Value* GetTValue();

 private:
  llvm::Value* tvalue_;
};

// Represents an upvalue
class Upvalue : public MutableValue {
 public:
  // Constructor
  Upvalue(CompilerState& cs, int arg);

  // Reloads the tvalue
  void ReloadTValue();

  // Obtains the pointer to UpVal structure
  llvm::Value* GetUpVal();

  // Obtains the TValue
  llvm::Value* GetTValue();

 private:
  int arg_;
  llvm::Value* upval_;
  llvm::Value* tvalue_;
};

// Manages all values
class Stack {
 public:
  // Constructor
  Stack(CompilerState& cs);

  // Obtains a RK(arg) value
  Value& GetRK(int arg);

  // Obtains a constant
  Constant& GetK(int arg);

  // Obtains a register
  Register& GetR(int arg);

  // Obtains an upvalue
  Upvalue& GetUp(int arg);

  // Initializes the values; should be called at the entry block
  void InitValues();

  // Updates the registers after a stack reallocation
  void Update();

 private:
  CompilerState& cs_;
  std::vector<Constant> k_;
  std::vector<Register> r_;
  std::vector<Upvalue> u_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef LLLVARARG_H
#define LLLVARARG_H


namespace lll {

class Register;

class Vararg : public Opcode {
 public:
  // Constructor
  Vararg(CompilerState& cs, Stack& stack);

  // Compiles the opcode
  void Compile();

 private:
  // Compilation steps
  void ComputeAvailableArgs();
  void ComputeRequiredArgs();
  void ComputeNMoves();
  void MoveAvailable();
  void FillRequired();

  // Retuns the register at ra + offset
  llvm::Value* GetRegisterFromA(llvm::Value* offset);

  llvm::Value* available_;
  llvm::Value* required_;
  llvm::Value* nmoves_;
  llvm::BasicBlock* movecheck_;
  llvm::BasicBlock* move_;
  llvm::BasicBlock* fillcheck_;
  llvm::BasicBlock* fill_;
};

}  // namespace lll

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif

#include <llvm-c/Core.h>

int test() {
    // Initialize LLVM
    LLVMInitializeCore(LLVMGetGlobalPassRegistry());
    LLVMContextRef context = LLVMContextCreate();
    LLVMModuleRef module = LLVMModuleCreateWithName("lua_module");
    LLVMBuilderRef builder = LLVMCreateBuilderInContext(context);

    // Create a function
    LLVMTypeRef funcType = LLVMFunctionType(LLVMInt32TypeInContext(context), NULL, 0, 0);
    LLVMValueRef func = LLVMAddFunction(module, "main", funcType);
    LLVMBasicBlockRef entry = LLVMAppendBasicBlock(func, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    // Create LLVM IR instructions
    LLVMValueRef x = LLVMConstInt(LLVMInt32TypeInContext(context), 10, 0);
    LLVMValueRef y = LLVMConstInt(LLVMInt32TypeInContext(context), 20, 0);
    LLVMValueRef sum = LLVMBuildAdd(builder, x, y, "sum");
    LLVMBuildRet(builder, sum);

    // Print LLVM IR code
    char* irCode = LLVMPrintModuleToString(module);
    printf("LLVM IR:\n%s\n", irCode);

    // Clean up
    LLVMDisposeModule(module);
    LLVMContextDispose(context);

    return 0;
}
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lmem_h
#define lmem_h

#include <stddef.h>


#define luaM_error(L) luaD_throw(L, LUA_ERRMEM)

/*
** This macro tests whether it is safe to multiply 'n' by the size of
** type 't' without overflows. Because 'e' is always constant, it avoids
** the runtime division MAX_SIZET/(e).
** (The macro is somewhat complex to avoid warnings:  The 'sizeof'
** comparison avoids a runtime comparison when overflow cannot occur.
** The compiler should be able to optimize the real test by itself, but
** when it does it, it may give a warning about "comparison is always
** false due to limited range of data type"; the +1 tricks the compiler,
** avoiding this warning but also this optimization.)
*/
#define luaM_testsize(n, e) \
  (sizeof(n) >= sizeof(size_t) && cast_sizet((n)) + 1 > MAX_SIZET / (e))

#define luaM_checksize(L, n, e) \
  (luaM_testsize(n, e) ? luaM_toobig(L) : cast_void(0))

/*
** Computes the minimum between 'n' and 'MAX_SIZET/sizeof(t)', so that
** the result is not larger than 'n' and cannot overflow a 'size_t'
** when multiplied by the size of type 't'. (Assumes that 'n' is an
** 'int' or 'unsigned int' and that 'int' is not larger than 'size_t'.)
*/
#define luaM_limitN(n, t)                   \
  ((cast_sizet(n) <= MAX_SIZET / sizeof(t)) \
       ? (n)                                \
       : cast_uint((MAX_SIZET / sizeof(t))))

/*
** Arrays of chars do not need any test
*/
#define luaM_reallocvchar(L, b, on, n) \
  cast_charp(luaM_saferealloc_(L, (b), (on) * sizeof(char), (n) * sizeof(char)))

#define luaM_freemem(L, b, s) luaM_free_(L, (b), (s))
#define luaM_free(L, b) luaM_free_(L, (b), sizeof(*(b)))
#define luaM_freearray(L, b, n) luaM_free_(L, (b), (n) * sizeof(*(b)))

#define luaM_new(L, t) cast(t *, luaM_malloc_(L, sizeof(t), 0))
#define luaM_newvector(L, n, t) cast(t *, luaM_malloc_(L, (n) * sizeof(t), 0))
#define luaM_newvectorchecked(L, n, t) \
  (luaM_checksize(L, n, sizeof(t)), luaM_newvector(L, n, t))

#define luaM_newobject(L, tag, s) luaM_malloc_(L, (s), tag)

#define luaM_growvector(L, v, nelems, size, t, limit, e)           \
  ((v) = cast(t *, luaM_growaux_(L, v, nelems, &(size), sizeof(t), \
                                 luaM_limitN(limit, t), e)))

#define luaM_reallocvector(L, v, oldn, n, t)                   \
  (cast(t *, luaM_realloc_(L, v, cast_sizet(oldn) * sizeof(t), \
                           cast_sizet(n) * sizeof(t))))

#define luaM_shrinkvector(L, v, size, fs, t) \
  ((v) = cast(t *, luaM_shrinkvector_(L, v, &(size), fs, sizeof(t))))

LUAI_FUNC l_noret luaM_toobig(lua_State *L);

/* not to be called directly */
LUAI_FUNC void *luaM_realloc_(lua_State *L, void *block, size_t oldsize,
                              size_t size);
LUAI_FUNC void *luaM_saferealloc_(lua_State *L, void *block, size_t oldsize,
                                  size_t size);
LUAI_FUNC void luaM_free_(lua_State *L, void *block, size_t osize);
LUAI_FUNC void *luaM_growaux_(lua_State *L, void *block, int nelems, int *size,
                              int size_elem, int limit, const char *what);
LUAI_FUNC void *luaM_shrinkvector_(lua_State *L, void *block, int *nelem,
                                   int final_n, int size_elem);
LUAI_FUNC void *luaM_malloc_(lua_State *L, size_t size, int tag);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif

/*
** $Id: lobject.h $
** Type definitions for Lua objects
** See Copyright Notice in cobalt.h
*/

#ifndef lobject_h
#define lobject_h

#include <stdarg.h>


/*
** Extra types for collectable non-values
*/
#define LUA_TUPVAL LUA_NUMTYPES         /* upvalues */
#define LUA_TPROTO (LUA_NUMTYPES + 1)   /* function prototypes */
#define LUA_TDEADKEY (LUA_NUMTYPES + 2) /* removed keys in tables */

/*
** Used in for-loops
*/
#define LUA_TITER  (LUA_NUMTYPES+3) /* Iterator marker */
#define LUA_VITER  makevariant(LUA_TITER, 0)
#define LUA_VITERI  makevariant(LUA_TITER, 1)

/*
** number of all possible types (including LUA_TNONE but excluding DEADKEY)
*/
#define LUA_TOTALTYPES (LUA_TPROTO + 2)

/*
** tags for Tagged Values have the following use of bits:
** bits 0-3: actual tag (a LUA_T* constant)
** bits 4-5: variant bits
** bit 6: whether value is collectable
*/

/* add variant bits to a type */
#define makevariant(t, v) ((t) | ((v) << 4))

/*
** Union of all Lua values
*/
typedef union Value {
  struct GCObject *gc; /* collectable objects */
  void *p;             /* light userdata */
  lua_CFunction f;     /* light C functions */
  lua_Integer i;       /* integer numbers */
  lua_Number n;        /* float numbers */
  unsigned int it; /* iterator index */
} Value;

/*
** Tagged Values. This is the basic representation of values in Lua:
** an actual value plus a tag with its type.
*/

#define TValuefields \
  Value value_;      \
  lu_byte tt_

typedef struct TValue {
  TValuefields;
} TValue;

#define val_(o) ((o)->value_)
#define valraw(o) (val_(o))

/* raw type tag of a TValue */
#define rawtt(o) ((o)->tt_)

/* tag with no variants (bits 0-3) */
#define novariant(t) ((t)&0x0F)

/* type tag of a TValue (bits 0-3 for tags + variant bits 4-5) */
#define withvariant(t) ((t)&0x3F)
#define ttypetag(o) withvariant(rawtt(o))

/* type of a TValue */
#define ttype(o) (novariant(rawtt(o)))

/* Macros to test type */
#define checktag(o, t) (rawtt(o) == (t))
#define checktype(o, t) (ttype(o) == (t))

/* Macros for internal tests */

/* collectable object has the same tag as the original value */
#define righttt(obj) (ttypetag(obj) == gcvalue(obj)->tt)

/*
** Any value being manipulated by the program either is non
** collectable, or the collectable object has the right tag
** and it is not dead. The option 'L == NULL' allows other
** macros using this one to be used where L is not available.
*/
#define checkliveness(L, obj)          \
  ((void)L, lua_longassert(            \
                !iscollectable(obj) || \
                (righttt(obj) && (L == NULL || !isdead(G(L), gcvalue(obj))))))

/* Macros to set values */

/* set a value's tag */
#define settt_(o, t) ((o)->tt_ = (t))

/* main macro to copy values (from 'obj2' to 'obj1') */
#define setobj(L, obj1, obj2)         \
  {                                   \
    TValue *io1 = (obj1);             \
    const TValue *io2 = (obj2);       \
    io1->value_ = io2->value_;        \
    settt_(io1, io2->tt_);            \
    checkliveness(L, io1);            \
    lua_assert(!isnonstrictnil(io1)); \
  }
#define ogsetobj(L, obj1, obj2)  \
  {                            \
    const TValue* o2 = (obj2); \
    TValue* o1 = (obj1);       \
    o1->value = o2->value;     \
    o1->tt = o2->tt;           \
    checkliveness(G(L), o1);   \
  }
/*
** Different types of assignments, according to source and destination.
** (They are mostly equal now, but may be different in the future.)
*/

/* from stack to stack */
#define setobjs2s(L, o1, o2) setobj(L, s2v(o1), s2v(o2))
/* to stack (not from same stack) */
#define setobj2s(L, o1, o2) setobj(L, s2v(o1), o2)
/* from table to same table */
#define setobjt2t setobj
/* to new object */
#define setobj2n setobj
/* to table */
#define setobj2t setobj

/*
** Entries in a Lua stack. Field 'tbclist' forms a list of all
** to-be-closed variables active in this stack. Dummy entries are
** used when the distance between two tbc variables does not fit
** in an unsigned short. They are represented by delta==0, and
** their real delta is always the maximum value that fits in
** that field.
*/
typedef union StackValue {
  TValue val;
  struct {
    TValuefields;
    unsigned short delta;
  } tbclist;
} StackValue;

/* index to stack elements */
typedef StackValue *StkId;

/* convert a 'StackValue' to a 'TValue' */
#define s2v(o) (&(o)->val)

/*
** {==================================================================
** Nil
** ===================================================================
*/

/* Standard nil */
#define LUA_VNIL makevariant(LUA_TNIL, 0)

/* Empty slot (which might be different from a slot containing nil) */
#define LUA_VEMPTY makevariant(LUA_TNIL, 1)

/* Value returned for a key not found in a table (absent key) */
#define LUA_VABSTKEY makevariant(LUA_TNIL, 2)

/* macro to test for (any kind of) nil */
#define ttisnil(v) checktype((v), LUA_TNIL)

/* macro to test for a standard nil */
#define ttisstrictnil(o) checktag((o), LUA_VNIL)

#define setnilvalue(obj) settt_(obj, LUA_VNIL)

#define isabstkey(v) checktag((v), LUA_VABSTKEY)

/*
** macro to detect non-standard nils (used only in assertions)
*/
#define isnonstrictnil(v) (ttisnil(v) && !ttisstrictnil(v))

/*
** By default, entries with any kind of nil are considered empty.
** (In any definition, values associated with absent keys must also
** be accepted as empty.)
*/
#define isempty(v) ttisnil(v)

/* macro defining a value corresponding to an absent key */
#define ABSTKEYCONSTANT {NULL}, LUA_VABSTKEY

/* mark an entry as empty */
#define setempty(v) settt_(v, LUA_VEMPTY)

/* }================================================================== */

/*
** {==================================================================
** Booleans
** ===================================================================
*/

#define LUA_VFALSE makevariant(LUA_TBOOLEAN, 0)
#define LUA_VTRUE makevariant(LUA_TBOOLEAN, 1)

#define ttisboolean(o) checktype((o), LUA_TBOOLEAN)
#define ttisfalse(o) checktag((o), LUA_VFALSE)
#define ttistrue(o) checktag((o), LUA_VTRUE)

#define l_isfalse(o) (ttisfalse(o) || ttisnil(o))

#define setbfvalue(obj) settt_(obj, LUA_VFALSE)
#define setbtvalue(obj) settt_(obj, LUA_VTRUE)

/* }================================================================== */

/*
** {==================================================================
** Threads
** ===================================================================
*/

#define LUA_VTHREAD makevariant(LUA_TTHREAD, 0)

#define ttisthread(o) checktag((o), ctb(LUA_VTHREAD))

#define thvalue(o) check_exp(ttisthread(o), gco2th(val_(o).gc))

#define setthvalue(L, obj, x)     \
  {                               \
    TValue *io = (obj);           \
    lua_State *x_ = (x);          \
    val_(io).gc = obj2gco(x_);    \
    settt_(io, ctb(LUA_VTHREAD)); \
    checkliveness(L, io);         \
  }

#define setthvalue2s(L, o, t) setthvalue(L, s2v(o), t)

/* }================================================================== */

/*
** {==================================================================
** Collectable Objects
** ===================================================================
*/

/*
** Common Header for all collectable objects (in macro form, to be
** included in other objects)
*/
#define CommonHeader     \
  struct GCObject *next; \
  lu_byte tt;            \
  lu_byte marked

/* Common type for all collectable objects */
typedef struct GCObject {
  CommonHeader;
} GCObject;

/* Bit mark for collectable types */
#define BIT_ISCOLLECTABLE (1 << 6)

#define iscollectable(o) (rawtt(o) & BIT_ISCOLLECTABLE)

/* mark a tag as collectable */
#define ctb(t) ((t) | BIT_ISCOLLECTABLE)

#define gcvalue(o) check_exp(iscollectable(o), val_(o).gc)

#define gcvalueraw(v) ((v).gc)

#define setgcovalue(L, obj, x) \
  {                            \
    TValue *io = (obj);        \
    GCObject *i_g = (x);       \
    val_(io).gc = i_g;         \
    settt_(io, ctb(i_g->tt));  \
  }

/* }================================================================== */

/*
** {==================================================================
** Numbers
** ===================================================================
*/

/* Variant tags for numbers */
#define LUA_VNUMINT makevariant(LUA_TNUMBER, 0) /* integer numbers */
#define LUA_VNUMFLT makevariant(LUA_TNUMBER, 1) /* float numbers */

#define ttisnumber(o) checktype((o), LUA_TNUMBER)
#define ttisfloat(o) checktag((o), LUA_VNUMFLT)
#define ttisinteger(o) checktag((o), LUA_VNUMINT)

#define nvalue(o) \
  check_exp(ttisnumber(o), (ttisinteger(o) ? cast_num(ivalue(o)) : fltvalue(o)))
#define fltvalue(o) check_exp(ttisfloat(o), val_(o).n)
#define ivalue(o) check_exp(ttisinteger(o), val_(o).i)

#define fltvalueraw(v) ((v).n)
#define ivalueraw(v) ((v).i)

#define setfltvalue(obj, x)  \
  {                          \
    TValue *io = (obj);      \
    val_(io).n = (x);        \
    settt_(io, LUA_VNUMFLT); \
  }

#define chgfltvalue(obj, x)    \
  {                            \
    TValue *io = (obj);        \
    lua_assert(ttisfloat(io)); \
    val_(io).n = (x);          \
  }

#define setivalue(obj, x)    \
  {                          \
    TValue *io = (obj);      \
    val_(io).i = (x);        \
    settt_(io, LUA_VNUMINT); \
  }

#define chgivalue(obj, x)        \
  {                              \
    TValue *io = (obj);          \
    lua_assert(ttisinteger(io)); \
    val_(io).i = (x);            \
  }

/* }================================================================== */

/*
** {==================================================================
** Strings
** ===================================================================
*/

/* Variant tags for strings */
#define LUA_VSHRSTR makevariant(LUA_TSTRING, 0) /* short strings */
#define LUA_VLNGSTR makevariant(LUA_TSTRING, 1) /* long strings */

#define ttisstring(o) checktype((o), LUA_TSTRING)
#define ttisshrstring(o) checktag((o), ctb(LUA_VSHRSTR))
#define ttislngstring(o) checktag((o), ctb(LUA_VLNGSTR))

#define tsvalueraw(v) (gco2ts((v).gc))

#define tsvalue(o) check_exp(ttisstring(o), gco2ts(val_(o).gc))

#define setsvalue(L, obj, x)   \
  {                            \
    TValue *io = (obj);        \
    TString *x_ = (x);         \
    val_(io).gc = obj2gco(x_); \
    settt_(io, ctb(x_->tt));   \
    checkliveness(L, io);      \
  }

/* set a string to the stack */
#define setsvalue2s(L, o, s) setsvalue(L, s2v(o), s)

/* set a string to a new object */
#define setsvalue2n setsvalue

/*
** Header for a string value.
*/
typedef struct TString {
  CommonHeader;
  lu_byte extra;  /* reserved words for short strings; "has hash" for longs */
  lu_byte shrlen; /* length for short strings */
  unsigned int hash;
  union {
    size_t lnglen;         /* length for long strings */
    struct TString *hnext; /* linked list for hash table */
  } u;
  char contents[1];
} TString;

/*
** Get the actual string (array of bytes) from a 'TString'.
*/
#define getstr(ts) ((ts)->contents)

/* get the actual string (array of bytes) from a Lua value */
#define svalue(o) getstr(tsvalue(o))

/* get string length from 'TString *s' */
#define tsslen(s) ((s)->tt == LUA_VSHRSTR ? (s)->shrlen : (s)->u.lnglen)

/* get string length from 'TValue *o' */
#define vslen(o) tsslen(tsvalue(o))

/* }================================================================== */

/*
** {==================================================================
** Userdata
** ===================================================================
*/

/*
** Light userdata should be a variant of userdata, but for compatibility
** reasons they are also different types.
*/
#define LUA_VLIGHTUSERDATA makevariant(LUA_TLIGHTUSERDATA, 0)

#define LUA_VUSERDATA makevariant(LUA_TUSERDATA, 0)

#define ttislightuserdata(o) checktag((o), LUA_VLIGHTUSERDATA)
#define ttisfulluserdata(o) checktag((o), ctb(LUA_VUSERDATA))

#define pvalue(o) check_exp(ttislightuserdata(o), val_(o).p)
#define uvalue(o) check_exp(ttisfulluserdata(o), gco2u(val_(o).gc))

#define pvalueraw(v) ((v).p)

#define setpvalue(obj, x)           \
  {                                 \
    TValue *io = (obj);             \
    val_(io).p = (x);               \
    settt_(io, LUA_VLIGHTUSERDATA); \
  }

#define setuvalue(L, obj, x)        \
  {                                 \
    TValue *io = (obj);             \
    Udata *x_ = (x);                \
    val_(io).gc = obj2gco(x_);      \
    settt_(io, ctb(LUA_VUSERDATA)); \
    checkliveness(L, io);           \
  }

/* Ensures that addresses after this type are always fully aligned. */
typedef union UValue {
  TValue uv;
  LUAI_MAXALIGN; /* ensures maximum alignment for udata bytes */
} UValue;

/*
** Header for userdata with user values;
** memory area follows the end of this structure.
*/
typedef struct Udata {
  CommonHeader;
  unsigned short nuvalue; /* number of user values */
  size_t len;             /* number of bytes */
  struct Table *metatable;
  GCObject *gclist;
  UValue uv[1]; /* user values */
} Udata;

/*
** Header for userdata with no user values. These userdata do not need
** to be gray during GC, and therefore do not need a 'gclist' field.
** To simplify, the code always use 'Udata' for both kinds of userdata,
** making sure it never accesses 'gclist' on userdata with no user values.
** This structure here is used only to compute the correct size for
** this representation. (The 'bindata' field in its end ensures correct
** alignment for binary data following this header.)
*/
typedef struct Udata0 {
  CommonHeader;
  unsigned short nuvalue; /* number of user values */
  size_t len;             /* number of bytes */
  struct Table *metatable;
  union {
    LUAI_MAXALIGN;
  } bindata;
} Udata0;

/* compute the offset of the memory area of a userdata */
#define udatamemoffset(nuv)               \
  ((nuv) == 0 ? offsetof(Udata0, bindata) \
              : offsetof(Udata, uv) + (sizeof(UValue) * (nuv)))

/* get the address of the memory block inside 'Udata' */
#define getudatamem(u) (cast_charp(u) + udatamemoffset((u)->nuvalue))

/* compute the size of a userdata */
#define sizeudata(nuv, nb) (udatamemoffset(nuv) + (nb))

/* }================================================================== */

/*
** {==================================================================
** Prototypes
** ===================================================================
*/

#define LUA_VPROTO makevariant(LUA_TPROTO, 0)

/*
** Description of an upvalue for function prototypes
*/
typedef struct Upvaldesc {
  TString *name;   /* upvalue name (for debug information) */
  lu_byte instack; /* whether it is in stack (register) */
  lu_byte idx;     /* index of upvalue (in stack or in outer function's list) */
  lu_byte kind;    /* kind of corresponding variable */
} Upvaldesc;

/*
** Description of a local variable for function prototypes
** (used for debug information)
*/
typedef struct LocVar {
  TString *varname;
  int startpc; /* first point where variable is active */
  int endpc;   /* first point where variable is dead */
} LocVar;

/*
** Associates the absolute line source for a given instruction ('pc').
** The array 'lineinfo' gives, for each instruction, the difference in
** lines from the previous instruction. When that difference does not
** fit into a byte, Lua saves the absolute line for that instruction.
** (Lua also saves the absolute line periodically, to speed up the
** computation of a line number: we can use binary search in the
** absolute-line array, but we must traverse the 'lineinfo' array
** linearly to compute a line.)
*/
typedef struct AbsLineInfo {
  int pc;
  int line;
} AbsLineInfo;

/*
** AOT implementation
*/
typedef struct CallInfo *(*AotCompiledFunction)(lua_State *L,
                                                struct CallInfo *ci);

/*
** Function Prototypes
*/
typedef struct Proto {
  CommonHeader;
  lu_byte numparams; /* number of fixed (named) parameters */
  lu_byte is_vararg;
  lu_byte maxstacksize; /* number of registers needed by this function */
  int sizeupvalues;     /* size of 'upvalues' */
  int sizek;            /* size of 'k' */
  int sizecode;
  int sizelineinfo;
  int sizep; /* size of 'p' */
  int sizelocvars;
  int sizeabslineinfo; /* size of 'abslineinfo' */
  int linedefined;     /* debug information  */
  int lastlinedefined; /* debug information  */
  TValue *k;           /* constants used by the function */
  Instruction *code;   /* opcodes */
  struct Proto **p;    /* functions defined inside the function */
  Upvaldesc *upvalues; /* upvalue information */
  ls_byte *lineinfo;   /* information about source lines (debug information) */
  AbsLineInfo *abslineinfo; /* idem */
  LocVar *locvars; /* information about local variables (debug information) */
  TString *source; /* used for debug information */
  GCObject *gclist;
  AotCompiledFunction aot_implementation; /* used in AOT C compiler */
} Proto;

/* }================================================================== */

/*
** {==================================================================
** Functions
** ===================================================================
*/

#define LUA_VUPVAL makevariant(LUA_TUPVAL, 0)

/* Variant tags for functions */
#define LUA_VLCL makevariant(LUA_TFUNCTION, 0) /* Lua closure */
#define LUA_VLCF makevariant(LUA_TFUNCTION, 1) /* light C function */
#define LUA_VCCL makevariant(LUA_TFUNCTION, 2) /* C closure */

#define ttisfunction(o) checktype(o, LUA_TFUNCTION)
#define ttisLclosure(o) checktag((o), ctb(LUA_VLCL))
#define ttislcf(o) checktag((o), LUA_VLCF)
#define ttisCclosure(o) checktag((o), ctb(LUA_VCCL))
#define ttisclosure(o) (ttisLclosure(o) || ttisCclosure(o))

#define isLfunction(o) ttisLclosure(o)

#define clvalue(o) check_exp(ttisclosure(o), gco2cl(val_(o).gc))
#define clLvalue(o) check_exp(ttisLclosure(o), gco2lcl(val_(o).gc))
#define fvalue(o) check_exp(ttislcf(o), val_(o).f)
#define clCvalue(o) check_exp(ttisCclosure(o), gco2ccl(val_(o).gc))

#define fvalueraw(v) ((v).f)

#define setclLvalue(L, obj, x) \
  {                            \
    TValue *io = (obj);        \
    LClosure *x_ = (x);        \
    val_(io).gc = obj2gco(x_); \
    settt_(io, ctb(LUA_VLCL)); \
    checkliveness(L, io);      \
  }

#define setclLvalue2s(L, o, cl) setclLvalue(L, s2v(o), cl)

#define setfvalue(obj, x) \
  {                       \
    TValue *io = (obj);   \
    val_(io).f = (x);     \
    settt_(io, LUA_VLCF); \
  }

#define setclCvalue(L, obj, x) \
  {                            \
    TValue *io = (obj);        \
    CClosure *x_ = (x);        \
    val_(io).gc = obj2gco(x_); \
    settt_(io, ctb(LUA_VCCL)); \
    checkliveness(L, io);      \
  }

/*
** Upvalues for Lua closures
*/
typedef struct UpVal {
  CommonHeader;
  lu_byte tbc; /* true if it represents a to-be-closed variable */
  TValue *v;   /* points to stack or to its own value */
  union {
    struct {              /* (when open) */
      struct UpVal *next; /* linked list */
      struct UpVal **previous;
    } open;
    TValue value; /* the value (when closed) */
  } u;
} UpVal;

#define ClosureHeader \
  CommonHeader;       \
  lu_byte nupvalues;  \
  GCObject *gclist

typedef struct CClosure {
  ClosureHeader;
  lua_CFunction f;
  TValue upvalue[1]; /* list of upvalues */
} CClosure;

typedef struct LClosure {
  ClosureHeader;
  struct Proto *p;
  UpVal *upvals[1]; /* list of upvalues */
} LClosure;

typedef union Closure {
  CClosure c;
  LClosure l;
} Closure;

#define getproto(o) (clLvalue(o)->p)

/* }================================================================== */

/*
** {==================================================================
** Tables
** ===================================================================
*/

#define LUA_VTABLE makevariant(LUA_TTABLE, 0)

#define ttistable(o) checktag((o), ctb(LUA_VTABLE))

#define hvalue(o) check_exp(ttistable(o), gco2t(val_(o).gc))

#define sethvalue(L, obj, x)     \
  {                              \
    TValue *io = (obj);          \
    Table *x_ = (x);             \
    val_(io).gc = obj2gco(x_);   \
    settt_(io, ctb(LUA_VTABLE)); \
    checkliveness(L, io);        \
  }

#define sethvalue2s(L, o, h) sethvalue(L, s2v(o), h)

/*
** Nodes for Hash tables: A pack of two TValue's (key-value pairs)
** plus a 'next' field to link colliding entries. The distribution
** of the key's fields ('key_tt' and 'key_val') not forming a proper
** 'TValue' allows for a smaller size for 'Node' both in 4-byte
** and 8-byte alignments.
*/
typedef union Node {
  struct NodeKey {
    TValuefields;   /* fields for value */
    lu_byte key_tt; /* key type */
    int next;       /* for chaining */
    Value key_val;  /* key value */
  } u;
  TValue i_val; /* direct access to node's value as a proper 'TValue' */
} Node;

/* copy a value into a key */
#define setnodekey(L, node, obj) \
  {                              \
    Node *n_ = (node);           \
    const TValue *io_ = (obj);   \
    n_->u.key_val = io_->value_; \
    n_->u.key_tt = io_->tt_;     \
    checkliveness(L, io_);       \
  }

/* copy a value from a key */
#define getnodekey(L, obj, node) \
  {                              \
    TValue *io_ = (obj);         \
    const Node *n_ = (node);     \
    io_->value_ = n_->u.key_val; \
    io_->tt_ = n_->u.key_tt;     \
    checkliveness(L, io_);       \
  }

/*
** About 'alimit': if 'isrealasize(t)' is true, then 'alimit' is the
** real size of 'array'. Otherwise, the real size of 'array' is the
** smallest power of two not smaller than 'alimit' (or zero iff 'alimit'
** is zero); 'alimit' is then used as a hint for #t.
*/

#define BITRAS (1 << 7)
#define isrealasize(t) (!((t)->flags & BITRAS))
#define setrealasize(t) ((t)->flags &= cast_byte(~BITRAS))
#define setnorealasize(t) ((t)->flags |= BITRAS)

typedef struct Table {
  CommonHeader;
  lu_byte flags;       /* 1<<p means tagmethod(p) is not present */
  lu_byte lsizenode;   /* log2 of size of 'node' array */
  unsigned int alimit; /* "limit" of 'array' array */
  TValue *array;       /* array part */
  Node *node;
  Node *lastfree; /* any free position is before this position */
  struct Table *metatable;
  GCObject *gclist;
  int locked; /* for locked tables */
} Table;

/*
** Macros to manipulate keys inserted in nodes
*/
#define keytt(node) ((node)->u.key_tt)
#define keyval(node) ((node)->u.key_val)

#define keyisnil(node) (keytt(node) == LUA_TNIL)
#define keyisinteger(node) (keytt(node) == LUA_VNUMINT)
#define keyival(node) (keyval(node).i)
#define keyisshrstr(node) (keytt(node) == ctb(LUA_VSHRSTR))
#define keystrval(node) (gco2ts(keyval(node).gc))

#define setnilkey(node) (keytt(node) = LUA_TNIL)

#define keyiscollectable(n) (keytt(n) & BIT_ISCOLLECTABLE)

#define gckey(n) (keyval(n).gc)
#define gckeyN(n) (keyiscollectable(n) ? gckey(n) : NULL)

/*
** Dead keys in tables have the tag DEADKEY but keep their original
** gcvalue. This distinguishes them from regular keys but allows them to
** be found when searched in a special way. ('next' needs that to find
** keys removed from a table during a traversal.)
*/
#define setdeadkey(node) (keytt(node) = LUA_TDEADKEY)
#define keyisdead(node) (keytt(node) == LUA_TDEADKEY)

/* }================================================================== */

/*
** 'module' operation for hashing (size is always a power of 2)
*/
#define lmod(s, size) \
  (check_exp((size & (size - 1)) == 0, (cast_int((s) & ((size)-1)))))

#define twoto(x) (1 << (x))
#define sizenode(t) (twoto((t)->lsizenode))

/* size of buffer for 'luaO_utf8esc' function */
#define UTF8BUFFSZ 8

LUAI_FUNC int luaO_utf8esc(char *buff, unsigned long x);
LUAI_FUNC int luaO_ceillog2(unsigned int x);
LUAI_FUNC int luaO_rawarith(lua_State *L, int op, const TValue *p1,
                            const TValue *p2, TValue *res);
LUAI_FUNC void luaO_arith(lua_State *L, int op, const TValue *p1,
                          const TValue *p2, StkId res);
LUAI_FUNC size_t luaO_str2num(const char *s, TValue *o);
LUAI_FUNC int luaO_hexavalue(int c);
LUAI_FUNC void luaO_tostring(lua_State *L, TValue *obj);
LUAI_FUNC const char *luaO_pushvfstring(lua_State *L, const char *fmt,
                                        va_list argp);
LUAI_FUNC const char *luaO_pushfstring(lua_State *L, const char *fmt, ...);
LUAI_FUNC void luaO_chunkid(char *out, const char *source, size_t srclen);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lopcodes_h
#define lopcodes_h


/*===========================================================================
  We assume that instructions are unsigned 32-bit integers.
  All instructions have an opcode in the first 7 bits.
  Instructions can have the following formats:

        3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
        1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
iABC          C(8)     |      B(8)     |k|     A(8)      |   Op(7)     |
iABx                Bx(17)               |     A(8)      |   Op(7)     |
iAsBx              sBx (signed)(17)      |     A(8)      |   Op(7)     |
iAx                           Ax(25)                     |   Op(7)     |
isJ                           sJ(25)                     |   Op(7)     |

  A signed argument is represented in excess K: the represented value is
  the written unsigned value minus K, where K is half the maximum for the
  corresponding unsigned argument.
===========================================================================*/

enum OpMode { iABC, iABx, iAsBx, iAx, isJ }; /* basic instruction formats */

/*
** size and position of opcode arguments.
*/
#define SIZE_C 8
#define SIZE_B 8
#define SIZE_Bx (SIZE_C + SIZE_B + 1)
#define SIZE_A 8
#define SIZE_Ax (SIZE_Bx + SIZE_A)
#define SIZE_sJ (SIZE_Bx + SIZE_A)

#define SIZE_OP 7

#define POS_OP 0

#define POS_A (POS_OP + SIZE_OP)
#define POS_k (POS_A + SIZE_A)
#define POS_B (POS_k + 1)
#define POS_C (POS_B + SIZE_B)

#define POS_Bx POS_k

#define POS_Ax POS_A

#define POS_sJ POS_A

/*
** Identifier used in R(C) for OP_TESTSET, to indicate whether 'false' should be falsy.
*/
#define NULL_COALESCE 2

/*
** limits for opcode arguments.
** we use (signed) 'int' to manipulate most arguments,
** so they must fit in ints.
*/

/* Check whether type 'int' has at least 'b' bits ('b' < 32) */
#define L_INTHASBITS(b) ((UINT_MAX >> ((b)-1)) >= 1)

#if L_INTHASBITS(SIZE_Bx)
#define MAXARG_Bx ((1 << SIZE_Bx) - 1)
#else
#define MAXARG_Bx MAX_INT
#endif

#define OFFSET_sBx (MAXARG_Bx >> 1) /* 'sBx' is signed */

#if L_INTHASBITS(SIZE_Ax)
#define MAXARG_Ax ((1 << SIZE_Ax) - 1)
#else
#define MAXARG_Ax MAX_INT
#endif

#if L_INTHASBITS(SIZE_sJ)
#define MAXARG_sJ ((1 << SIZE_sJ) - 1)
#else
#define MAXARG_sJ MAX_INT
#endif

#define OFFSET_sJ (MAXARG_sJ >> 1)

#define MAXARG_A ((1 << SIZE_A) - 1)
#define MAXARG_B ((1 << SIZE_B) - 1)
#define MAXARG_C ((1 << SIZE_C) - 1)
#define OFFSET_sC (MAXARG_C >> 1)

#define int2sC(i) ((i) + OFFSET_sC)
#define sC2int(i) ((i)-OFFSET_sC)

/* creates a mask with 'n' 1 bits at position 'p' */
#define MASK1(n, p) ((~((~(Instruction)0) << (n))) << (p))

/* creates a mask with 'n' 0 bits at position 'p' */
#define MASK0(n, p) (~MASK1(n, p))

/*
** the following macros help to manipulate instructions
*/

#define GET_OPCODE(i) (cast(OpCode, ((i) >> POS_OP) & MASK1(SIZE_OP, 0)))
#define SET_OPCODE(i, o)                 \
  ((i) = (((i)&MASK0(SIZE_OP, POS_OP)) | \
          ((cast(Instruction, o) << POS_OP) & MASK1(SIZE_OP, POS_OP))))

#define checkopm(i, m) (getOpMode(GET_OPCODE(i)) == m)

#define getarg(i, pos, size) (cast_int(((i) >> (pos)) & MASK1(size, 0)))
#define setarg(i, v, pos, size)    \
  ((i) = (((i)&MASK0(size, pos)) | \
          ((cast(Instruction, v) << pos) & MASK1(size, pos))))

#define GETARG_A(i) getarg(i, POS_A, SIZE_A)
#define SETARG_A(i, v) setarg(i, v, POS_A, SIZE_A)

#define GETARG_B(i) check_exp(checkopm(i, iABC), getarg(i, POS_B, SIZE_B))
#define GETARG_sB(i) sC2int(GETARG_B(i))
#define SETARG_B(i, v) setarg(i, v, POS_B, SIZE_B)

#define GETARG_C(i) check_exp(checkopm(i, iABC), getarg(i, POS_C, SIZE_C))
#define GETARG_sC(i) sC2int(GETARG_C(i))
#define SETARG_C(i, v) setarg(i, v, POS_C, SIZE_C)

#define TESTARG_k(i) \
  check_exp(checkopm(i, iABC), (cast_int(((i) & (1u << POS_k)))))
#define GETARG_k(i) check_exp(checkopm(i, iABC), getarg(i, POS_k, 1))
#define SETARG_k(i, v) setarg(i, v, POS_k, 1)

#define GETARG_Bx(i) check_exp(checkopm(i, iABx), getarg(i, POS_Bx, SIZE_Bx))
#define SETARG_Bx(i, v) setarg(i, v, POS_Bx, SIZE_Bx)

#define GETARG_Ax(i) check_exp(checkopm(i, iAx), getarg(i, POS_Ax, SIZE_Ax))
#define SETARG_Ax(i, v) setarg(i, v, POS_Ax, SIZE_Ax)

#define GETARG_sBx(i) \
  check_exp(checkopm(i, iAsBx), getarg(i, POS_Bx, SIZE_Bx) - OFFSET_sBx)
#define SETARG_sBx(i, b) SETARG_Bx((i), cast_uint((b) + OFFSET_sBx))

#define GETARG_sJ(i) \
  check_exp(checkopm(i, isJ), getarg(i, POS_sJ, SIZE_sJ) - OFFSET_sJ)
#define SETARG_sJ(i, j) setarg(i, cast_uint((j) + OFFSET_sJ), POS_sJ, SIZE_sJ)

#define CREATE_ABCk(o, a, b, c, k)                                      \
  ((cast(Instruction, o) << POS_OP) | (cast(Instruction, a) << POS_A) | \
   (cast(Instruction, b) << POS_B) | (cast(Instruction, c) << POS_C) |  \
   (cast(Instruction, k) << POS_k))

#define CREATE_ABx(o, a, bc)                                            \
  ((cast(Instruction, o) << POS_OP) | (cast(Instruction, a) << POS_A) | \
   (cast(Instruction, bc) << POS_Bx))

#define CREATE_Ax(o, a) \
  ((cast(Instruction, o) << POS_OP) | (cast(Instruction, a) << POS_Ax))

#define CREATE_sJ(o, j, k)                                               \
  ((cast(Instruction, o) << POS_OP) | (cast(Instruction, j) << POS_sJ) | \
   (cast(Instruction, k) << POS_k))

#if !defined(MAXINDEXRK) /* (for debugging only) */
#define MAXINDEXRK MAXARG_B
#endif

/*
** invalid register that fits in 8 bits
*/
#define NO_REG MAXARG_A

/*
** R[x] - register
** K[x] - constant (in constant table)
** RK(x) == if k(i) then K[x] else R[x]
*/

/*
** Grep "ORDER OP" if you change these enums. Opcodes marked with a (*)
** has extra descriptions in the notes after the enumeration.
*/

typedef enum {
  /*----------------------------------------------------------------------
    name		args	description
  ------------------------------------------------------------------------*/
  OP_MOVE,       /*	A B	R[A] := R[B]					*/
  OP_LOADI,      /*	A sBx	R[A] := sBx					*/
  OP_LOADF,      /*	A sBx	R[A] := (lua_Number)sBx				*/
  OP_LOADK,      /*	A Bx	R[A] := K[Bx]					*/
  OP_LOADKX,     /*	A	R[A] := K[extra arg]				*/
  OP_LOADFALSE,  /*	A	R[A] := false  */
  OP_LFALSESKIP, /*A	R[A] := false; pc++	(*)			*/
  OP_LOADTRUE,   /*	A	R[A] := true   */
  OP_LOADNIL,    /*	A B	R[A], R[A+1], ..., R[A+B] := nil
                  */
  OP_GETUPVAL,   /*	A B	R[A] := UpValue[B]   */
  OP_SETUPVAL,   /*	A B	UpValue[B] := R[A]   */

  OP_GETTABUP, /*	A B C	R[A] := UpValue[B][K[C]:string] */
  OP_GETTABLE, /*	A B C	R[A] := R[B][R[C]] */
  OP_GETI,     /*	A B C	R[A] := R[B][C]					*/
  OP_GETFIELD, /*	A B C	R[A] := R[B][K[C]:string] */

  OP_SETTABUP, /*	A B C	UpValue[A][K[B]:string] := RK(C)
                */
  OP_SETTABLE, /*	A B C	R[A][R[B]] := RK(C) */
  OP_SETI,     /*	A B C	R[A][B] := RK(C)				*/
  OP_SETFIELD, /*	A B C	R[A][K[B]:string] := RK(C) */

  OP_NEWTABLE, /*	A B C k	R[A] := {} */

  OP_SELF, /*	A B C	R[A+1] := R[B]; R[A] := R[B][RK(C):string]	*/

  OP_ADDI, /*	A B sC	R[A] := R[B] + sC				*/

  OP_ADDK,  /*	A B C	R[A] := R[B] + K[C]:number			*/
  OP_SUBK,  /*	A B C	R[A] := R[B] - K[C]:number			*/
  OP_MULK,  /*	A B C	R[A] := R[B] * K[C]:number			*/
  OP_MODK,  /*	A B C	R[A] := R[B] % K[C]:number			*/
  OP_POWK,  /*	A B C	R[A] := R[B] ^ K[C]:number			*/
  OP_DIVK,  /*	A B C	R[A] := R[B] / K[C]:number			*/
  OP_IDIVK, /*	A B C	R[A] := R[B] // K[C]:number			*/

  OP_BANDK, /*	A B C	R[A] := R[B] & K[C]:integer			*/
  OP_BORK,  /*	A B C	R[A] := R[B] | K[C]:integer			*/
  OP_BXORK, /*	A B C	R[A] := R[B] ~ K[C]:integer			*/

  OP_SHRI, /*	A B sC	R[A] := R[B] >> sC				*/
  OP_SHLI, /*	A B sC	R[A] := sC << R[B]				*/

  OP_ADD,  /*	A B C	R[A] := R[B] + R[C]				*/
  OP_SUB,  /*	A B C	R[A] := R[B] - R[C]				*/
  OP_MUL,  /*	A B C	R[A] := R[B] * R[C]				*/
  OP_MOD,  /*	A B C	R[A] := R[B] % R[C]				*/
  OP_POW,  /*	A B C	R[A] := R[B] ^ R[C]				*/
  OP_DIV,  /*	A B C	R[A] := R[B] / R[C]				*/
  OP_IDIV, /*	A B C	R[A] := R[B] // R[C]				*/

  OP_BAND, /*	A B C	R[A] := R[B] & R[C]				*/
  OP_BOR,  /*	A B C	R[A] := R[B] | R[C]				*/
  OP_BXOR, /*	A B C	R[A] := R[B] ~ R[C]				*/
  OP_SHL,  /*	A B C	R[A] := R[B] << R[C]				*/
  OP_SHR,  /*	A B C	R[A] := R[B] >> R[C]				*/

  OP_MMBIN,  /*	A B C	call C metamethod over R[A] and R[B]	(*)	*/
  OP_MMBINI, /*	A sB C k	call C metamethod over R[A] and sB	*/
  OP_MMBINK, /*	A B C k		call C metamethod over R[A] and K[B]	*/

  OP_UNM,  /*	A B	R[A] := -R[B]					*/
  OP_BNOT, /*	A B	R[A] := ~R[B]					*/
  OP_NOT,  /*	A B	R[A] := not R[B]				*/
  OP_LEN,  /*	A B	R[A] := #R[B] (length operator)			*/

  OP_CONCAT, /*	A B	R[A] := R[A].. ... ..R[A + B - 1]		*/

  OP_CLOSE, /*	A	close all upvalues >= R[A]			*/
  OP_TBC,   /*	A	mark variable A "to be closed"			*/
  OP_JMP,   /*	sJ	pc += sJ					*/
  OP_EQ,    /*	A B k	if ((R[A] == R[B]) ~= k) then pc++		*/
  OP_LT,    /*	A B k	if ((R[A] <  R[B]) ~= k) then pc++		*/
  OP_LE,    /*	A B k	if ((R[A] <= R[B]) ~= k) then pc++		*/

  OP_EQK, /*	A B k	if ((R[A] == K[B]) ~= k) then pc++		*/
  OP_EQI, /*	A sB k	if ((R[A] == sB) ~= k) then pc++		*/
  OP_LTI, /*	A sB k	if ((R[A] < sB) ~= k) then pc++			*/
  OP_LEI, /*	A sB k	if ((R[A] <= sB) ~= k) then pc++		*/
  OP_GTI, /*	A sB k	if ((R[A] > sB) ~= k) then pc++			*/
  OP_GEI, /*	A sB k	if ((R[A] >= sB) ~= k) then pc++		*/

  OP_TEST,    /*	A k	if (not R[A] == k) then pc++			*/
  OP_TESTSET, /*	A B k	if (not R[B] == k) then pc++ else R[A] := R[B]
                 (*) */

  OP_CALL,     /*	A B C	R[A], ... ,R[A+C-2] := R[A](R[A+1], ... ,R[A+B-1]) */
  OP_TAILCALL, /*	A B C k	return R[A](R[A+1], ... ,R[A+B-1])
                */

  OP_RETURN,  /*	A B C k	return R[A], ... ,R[A+B-2]	(see note)	*/
  OP_RETURN0, /*		return */
  OP_RETURN1, /*	A	return R[A] */

  OP_FORLOOP, /*	A Bx	update counters; if loop continues then pc-=Bx;
               */
  OP_FORPREP, /*	A Bx	<check values and prepare counters>;
                           if not to run then pc+=Bx+1;			*/

  OP_TFORPREP, /*	A Bx	create upvalue for R[A + 3]; pc+=Bx
                */
  OP_TFORCALL, /*	A C	R[A+4], ... ,R[A+3+C] := R[A](R[A+1], R[A+2]);
                */
  OP_TFORLOOP, /*	A Bx	if R[A+2] ~= nil then { R[A]=R[A+2]; pc -= Bx }
                */

  OP_SETLIST, /*	A B C k	R[A][C+i] := R[A+i], 1 <= i <= B
               */

  OP_CLOSURE, /*	A Bx	R[A] := closure(KPROTO[Bx]) */

  OP_VARARG, /*	A C	R[A], R[A+1], ..., R[A+C-2] = vararg		*/

  OP_VARARGPREP, /*A	(adjust vararg parameters)			*/

  OP_EXTRAARG /*	Ax	extra (larger) argument for previous opcode
               */
} OpCode;

#define NUM_OPCODES ((int)(OP_EXTRAARG) + 1)

/*===========================================================================
  Notes:

  (*) Opcode OP_LFALSESKIP is used to convert a condition to a boolean
  value, in a code equivalent to (not cond ? false : true).  (It
  produces false and skips the next instruction producing true.)

  (*) Opcodes OP_MMBIN and variants follow each arithmetic and
  bitwise opcode. If the operation succeeds, it skips this next
  opcode. Otherwise, this opcode calls the corresponding metamethod.

  (*) Opcode OP_TESTSET is used in short-circuit expressions that need
  both to jump and to produce a value, such as (a = b or c).

  (*) In OP_CALL, if (B == 0) then B = top - A. If (C == 0), then
  'top' is set to last_result+1, so next open instruction (OP_CALL,
  OP_RETURN*, OP_SETLIST) may use 'top'.

  (*) In OP_VARARG, if (C == 0) then use actual number of varargs and
  set top (like in OP_CALL with C == 0).

  (*) In OP_RETURN, if (B == 0) then return up to 'top'.

  (*) In OP_LOADKX and OP_NEWTABLE, the next instruction is always
  OP_EXTRAARG.

  (*) In OP_SETLIST, if (B == 0) then real B = 'top'; if k, then
  real C = EXTRAARG _ C (the bits of EXTRAARG concatenated with the
  bits of C).

  (*) In OP_NEWTABLE, B is log2 of the hash size (which is always a
  power of 2) plus 1, or zero for size zero. If not k, the array size
  is C. Otherwise, the array size is EXTRAARG _ C.

  (*) For comparisons, k specifies what condition the test should accept
  (true or false).

  (*) In OP_MMBINI/OP_MMBINK, k means the arguments were flipped
   (the constant is the first operand).

  (*) All 'skips' (pc++) assume that next instruction is a jump.

  (*) In instructions OP_RETURN/OP_TAILCALL, 'k' specifies that the
  function builds upvalues, which may need to be closed. C > 0 means
  the function is vararg, so that its 'func' must be corrected before
  returning; in this case, (C - 1) is its number of fixed parameters.

  (*) In comparisons with an immediate operand, C signals whether the
  original operand was a float. (It must be corrected in case of
  metamethods.)

===========================================================================*/

/*
** masks for instruction properties. The format is:
** bits 0-2: op mode
** bit 3: instruction set register A
** bit 4: operator is a test (next instruction must be a jump)
** bit 5: instruction uses 'L->top' set by previous instruction (when B == 0)
** bit 6: instruction sets 'L->top' for next instruction (when C == 0)
** bit 7: instruction is an MM instruction (call a metamethod)
*/

LUAI_DDEC(const lu_byte luaP_opmodes[NUM_OPCODES];)

#define getOpMode(m) (cast(enum OpMode, luaP_opmodes[m] & 7))
#define testAMode(m) (luaP_opmodes[m] & (1 << 3))
#define testTMode(m) (luaP_opmodes[m] & (1 << 4))
#define testITMode(m) (luaP_opmodes[m] & (1 << 5))
#define testOTMode(m) (luaP_opmodes[m] & (1 << 6))
#define testMMMode(m) (luaP_opmodes[m] & (1 << 7))

/* "out top" (set top for next instruction) */
#define isOT(i)                                       \
  ((testOTMode(GET_OPCODE(i)) && GETARG_C(i) == 0) || \
   GET_OPCODE(i) == OP_TAILCALL)

/* "in top" (uses top from previous instruction) */
#define isIT(i) (testITMode(GET_OPCODE(i)) && GETARG_B(i) == 0)

#define opmode(mm, ot, it, t, a, m) \
  (((mm) << 7) | ((ot) << 6) | ((it) << 5) | ((t) << 4) | ((a) << 3) | (m))

/* number of list items to accumulate before a SETLIST instruction */
#define LFIELDS_PER_FLUSH 50

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#if !defined(lopnames_h)
#define lopnames_h

#include <stddef.h>

/* ORDER OP */

static const char *const opnames[] = {
    "MOVE",       "LOADI",    "LOADF",    "LOADK",      "LOADKX",   "LOADFALSE",
    "LFALSESKIP", "LOADTRUE", "LOADNIL",  "GETUPVAL",   "SETUPVAL", "GETTABUP",
    "GETTABLE",   "GETI",     "GETFIELD", "SETTABUP",   "SETTABLE", "SETI",
    "SETFIELD",   "NEWTABLE", "SELF",     "ADDI",       "ADDK",     "SUBK",
    "MULK",       "MODK",     "POWK",     "DIVK",       "IDIVK",    "BANDK",
    "BORK",       "BXORK",    "SHRI",     "SHLI",       "ADD",      "SUB",
    "MUL",        "MOD",      "POW",      "DIV",        "IDIV",     "BAND",
    "BOR",        "BXOR",     "SHL",      "SHR",        "MMBIN",    "MMBINI",
    "MMBINK",     "UNM",      "BNOT",     "NOT",        "LEN",      "CONCAT",
    "CLOSE",      "TBC",      "JMP",      "EQ",         "LT",       "LE",
    "EQK",        "EQI",      "LTI",      "LEI",        "GTI",      "GEI",
    "TEST",       "TESTSET",  "CALL",     "TAILCALL",   "RETURN",   "RETURN0",
    "RETURN1",    "FORLOOP",  "FORPREP",  "TFORPREP",   "TFORCALL", "TFORLOOP",
    "SETLIST",    "CLOSURE",  "VARARG",   "VARARGPREP", "EXTRAARG", NULL};

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lparser_h
#define lparser_h


/*
** Expression and variable descriptor.
** Code generation for variables and expressions can be delayed to allow
** optimizations; An 'expdesc' structure describes a potentially-delayed
** variable/expression. It has a description of its "main" value plus a
** list of conditional jumps that can also produce its value (generated
** by short-circuit operators 'and'/'or').
*/

/* kinds of variables/expressions */
typedef enum {
  VVOID,     /* when 'expdesc' describes the last expression of a list,
                this kind means an empty list (so, no expression) */
  VNIL,      /* constant nil */
  VTRUE,     /* constant true */
  VFALSE,    /* constant false */
  VK,        /* constant in 'k'; info = index of constant in 'k' */
  VKFLT,     /* floating constant; nval = numerical float value */
  VKINT,     /* integer constant; ival = numerical integer value */
  VKSTR,     /* string constant; strval = TString address;
                (string is fixed by the lexer) */
  VNONRELOC, /* expression has its value in a fixed register;
                info = result register */
  VLOCAL,    /* local variable; var.ridx = register index;
                var.vidx = relative index in 'actvar.arr'  */
  VUPVAL,    /* upvalue variable; info = index of upvalue in 'upvalues' */
  VCONST,    /* compile-time <const> variable;
                info = absolute index in 'actvar.arr'  */
  VINDEXED,  /* indexed variable;
                ind.t = table register;
                ind.idx = key's R index */
  VINDEXUP,  /* indexed upvalue;
                ind.t = table upvalue;
                ind.idx = key's K index */
  VINDEXI,   /* indexed variable with constant integer;
                  ind.t = table register;
                  ind.idx = key's value */
  VINDEXSTR, /* indexed variable with literal string;
                ind.t = table register;
                ind.idx = key's K index */
  VJMP,      /* expression is a test/comparison;
                info = pc of corresponding jump instruction */
  VRELOC,    /* expression can put result in any register;
                info = instruction pc */
  VCALL,     /* expression is a function call; info = instruction pc */
  VVARARG    /* vararg expression; info = instruction pc */
} expkind;

#define vkisvar(k) (VLOCAL <= (k) && (k) <= VINDEXSTR)
#define vkisindexed(k) (VINDEXED <= (k) && (k) <= VINDEXSTR)

typedef struct expdesc {
  expkind k;
  union {
    lua_Integer ival; /* for VKINT */
    lua_Number nval;  /* for VKFLT */
    TString *strval;  /* for VKSTR */
    int info;         /* for generic use */
    struct {          /* for indexed variables */
      short idx;      /* index (R or "long" K) */
      lu_byte t;      /* table (register or upvalue) */
    } ind;
    struct {               /* for local variables */
      lu_byte ridx;        /* register holding the variable */
      unsigned short vidx; /* compiler index (in 'actvar.arr')  */
    } var;
  } u;
  int t; /* patch list of 'exit when true' */
  int f; /* patch list of 'exit when false' */
} expdesc;

/* kinds of variables */
#define VDKREG 0     /* regular */
#define RDKCONST 1   /* constant */
#define RDKTOCLOSE 2 /* to-be-closed */
#define RDKCTC 3     /* compile-time constant */

/* description of an active local variable */
typedef union Vardesc {
  struct {
    TValuefields; /* constant value (if it is a compile-time constant) */
    lu_byte kind;
    lu_byte ridx;  /* register holding the variable */
    short pidx;    /* index of the variable in the Proto's 'locvars' array */
    TString *name; /* variable name */
  } vd;
  TValue k; /* constant value (if any) */
} Vardesc;

/* description of pending goto statements and label statements */
typedef struct Labeldesc {
  TString *name;   /* label identifier */
  int pc;          /* position in code */
  int line;        /* line where it appeared */
  lu_byte nactvar; /* number of active variables in that position */
  lu_byte close;   /* goto that escapes upvalues */
} Labeldesc;

/* list of labels or gotos */
typedef struct Labellist {
  Labeldesc *arr; /* array */
  int n;          /* number of entries in use */
  int size;       /* array size */
} Labellist;

/* dynamic structures used by the parser */
typedef struct Dyndata {
  struct { /* list of all active local variables */
    Vardesc *arr;
    int n;
    int size;
  } actvar;
  Labellist gt;    /* list of pending gotos */
  Labellist label; /* list of active labels */
} Dyndata;

/* control of blocks */
struct BlockCnt; /* defined in lparser.c */

/* state needed to generate code for a given function */
typedef struct FuncState {
  Proto *f;               /* current function header */
  struct FuncState *prev; /* enclosing function */
  struct LexState *ls;    /* lexical state */
  struct BlockCnt *bl;    /* chain of current blocks */
  int pc;                 /* next position to code (equivalent to 'ncode') */
  int lasttarget;         /* 'label' of last 'jump label' */
  int previousline;       /* last line that was saved in 'lineinfo' */
  int nk;                 /* number of elements in 'k' */
  int np;                 /* number of elements in 'p' */
  int nabslineinfo;       /* number of elements in 'abslineinfo' */
  int firstlocal;         /* index of first local var (in Dyndata array) */
  int firstlabel;         /* index of first label (in 'dyd->label->arr') */
  short ndebugvars;       /* number of elements in 'f->locvars' */
  lu_byte nactvar;        /* number of active local variables */
  lu_byte nups;           /* number of upvalues */
  lu_byte freereg;        /* first free register */
  lu_byte iwthabs;   /* instructions issued since last absolute line info */
  lu_byte needclose; /* function needs to close upvalues when returning */
} FuncState;

LUAI_FUNC int luaY_nvarstack(FuncState *fs);
LUAI_FUNC LClosure *luaY_parser(lua_State *L, ZIO *z, Mbuffer *buff,
                                Dyndata *dyd, const char *name, int firstchar);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#if !defined(lplcap_h)
#define lplcap_h


/* kinds of captures */
typedef enum CapKind {
  Cclose, /* not used in trees */
  Cposition,
  Cconst,    /* ktable[key] is Lua constant */
  Cbackref,  /* ktable[key] is "name" of group to get capture */
  Carg,      /* 'key' is arg's number */
  Csimple,   /* next node is pattern */
  Ctable,    /* next node is pattern */
  Cfunction, /* ktable[key] is function; next node is pattern */
  Cquery,    /* ktable[key] is table; next node is pattern */
  Cstring,   /* ktable[key] is string; next node is pattern */
  Cnum,      /* numbered capture; 'key' is number of value to return */
  Csubst,    /* substitution capture; next node is pattern */
  Cfold,     /* ktable[key] is function; next node is pattern */
  Cruntime,  /* not used in trees (is uses another type for tree) */
  Cgroup     /* ktable[key] is group's "name" */
} CapKind;

typedef struct Capture {
  const char *s;      /* subject position */
  unsigned short idx; /* extra info (group name, arg index, etc.) */
  byte kind;          /* kind of capture */
  byte siz;           /* size of full capture + 1 (0 = not a full capture) */
} Capture;

typedef struct CapState {
  Capture *cap;  /* current capture */
  Capture *ocap; /* (original) capture list */
  lua_State *L;
  int ptop;        /* index of last argument to 'match' */
  const char *s;   /* original string */
  int valuecached; /* value stored in cache slot */
  int reclevel;    /* recursion level */
} CapState;

LUAI_FUNC int runtimecap(CapState *cs, Capture *close, const char *s, int *rem);
LUAI_FUNC int getcaptures(lua_State *L, const char *s, const char *r, int ptop);
LUAI_FUNC int finddyncap(Capture *cap, Capture *last);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#if !defined(lplcode_h)
#define lplcode_h


LUAI_FUNC int tocharset(TTree *tree, Charset *cs);
LUAI_FUNC int checkaux(TTree *tree, int pred);
LUAI_FUNC int fixedlen(TTree *tree);
LUAI_FUNC int hascaptures(TTree *tree);
LUAI_FUNC int lp_gc(lua_State *L);
LUAI_FUNC Instruction *compile(lua_State *L, Pattern *p);
LUAI_FUNC void realloccode(lua_State *L, Pattern *p, int nsize);
LUAI_FUNC int sizei(const Instruction *i);

#define PEnullable 0
#define PEnofail 1

/*
** nofail(t) implies that 't' cannot fail with any input
*/
#define nofail(t) checkaux(t, PEnofail)

/*
** (not nullable(t)) implies 't' cannot match without consuming
** something
*/
#define nullable(t) checkaux(t, PEnullable)

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#if !defined(lpltree_h)
#define lpltree_h


/*
** types of trees
*/
typedef enum TTag {
  TChar = 0, /* 'n' = char */
  TSet,      /* the set is stored in next CHARSETSIZE bytes */
  TAny,
  TTrue,
  TFalse,
  TUTFR,     /* range of UTF-8 codepoints; 'n' has initial codepoint;
                'cap' has length; 'key' has first byte;
                extra info is similar for end codepoint */
  TRep,      /* 'sib1'* */
  TSeq,      /* 'sib1' 'sib2' */
  TChoice,   /* 'sib1' / 'sib2' */
  TNot,      /* !'sib1' */
  TAnd,      /* &'sib1' */
  TCall,     /* ktable[key] is rule's key; 'sib2' is rule being called */
  TOpenCall, /* ktable[key] is rule's key */
  TRule,     /* ktable[key] is rule's key (but key == 0 for unused rules);
                'sib1' is rule's pattern pre-rule; 'sib2' is next rule;
                extra info 'n' is rule's sequential number */
  TXInfo,    /* extra info */
  TGrammar,  /* 'sib1' is initial (and first) rule */
  TBehind,   /* 'sib1' is pattern, 'n' is how much to go back */
  TCapture,  /* captures: 'cap' is kind of capture (enum 'CapKind');
                ktable[key] is Lua value associated with capture;
                'sib1' is capture body */
  TRunTime,  /* run-time capture: 'key' is Lua function;
               'sib1' is capture body */
  TThrow,    /* labeled failure: ktable[key] is label's name */

} TTag;

/*
** Tree trees
** The first child of a tree (if there is one) is immediately after
** the tree.  A reference to a second child (ps) is its position
** relative to the position of the tree itself.
*/
typedef struct TTree {
  byte tag;
  byte cap;           /* kind of capture (if it is a capture) */
  unsigned short key; /* key in ktable for Lua data (0 if no key) */
  union {
    int ps; /* occasional second child */
    int n;  /* occasional counter */
  } u;
} TTree;

/*
** A complete pattern has its tree plus, if already compiled,
** its corresponding code
*/
typedef struct Pattern {
  union Instruction *code;
  int codesize;
  TTree tree[1];
} Pattern;

/* number of children for each tree */
LUAI_FUNC const byte numsiblings[];

/* access to children */
#define sib1(t) ((t) + 1)
#define sib2(t) ((t) + (t)->u.ps)

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#if !defined(lpltypes_h)
#define lpltypes_h

#include <assert.h>
#include <limits.h>


#define VERSION "1.6.1"

#define PATTERN_T "pattern"
#define MAXSTACKIDX "maxstack"

/*
** compatibility with Lua 5.1
*/
#if (LUA_VERSION_NUM == 501)

#define lp_equal lua_equal

#define lua_getuservalue lua_getfenv
#define lua_setuservalue lua_setfenv

#define lua_rawlen lua_objlen

#define luaL_setfuncs(L, f, n) luaL_register(L, NULL, f)
#define luaL_newlib(L, f) luaL_register(L, "lpeglabel", f)

typedef size_t lua_Unsigned;

#endif

#if !defined(lp_equal)
#define lp_equal(L, idx1, idx2) lua_compare(L, (idx1), (idx2), LUA_OPEQ)
#endif

/* default maximum size for call/backtrack stack */
#if !defined(MAXBACK)
#define MAXBACK 400
#endif

/* maximum number of rules in a grammar (limited by 'unsigned short') */
#if !defined(MAXRULES)
#define MAXRULES 1000
#endif

/* initial size for capture's list */
#define INITCAPSIZE 32

/* index, on Lua stack, for subject */
#define SUBJIDX 2

/* number of fixed arguments to 'match' (before capture arguments) */
#define FIXEDARGS 3

/* index, on Lua stack, for capture list */
#define caplistidx(ptop) ((ptop) + 2)

/* index, on Lua stack, for pattern's ktable */
#define ktableidx(ptop) ((ptop) + 3)

/* index, on Lua stack, for backtracking stack */
#define stackidx(ptop) ((ptop) + 4)

typedef unsigned char byte;

#define BITSPERCHAR 8

#define CHARSETSIZE ((UCHAR_MAX / BITSPERCHAR) + 1)

typedef struct Charset {
  byte cs[CHARSETSIZE];
} Charset;

#define loopset(v, b)                   \
  {                                     \
    int v;                              \
    for (v = 0; v < CHARSETSIZE; v++) { \
      b;                                \
    }                                   \
  }

/* access to charset */
#define treebuffer(t) ((byte *)((t) + 1))

/* number of slots needed for 'n' bytes */
#define bytes2slots(n) (((n)-1) / sizeof(TTree) + 1)

/* set 'b' bit in charset 'cs' */
#define setchar(cs, b) ((cs)[(b) >> 3] |= (1 << ((b)&7)))

/*
** in capture instructions, 'kind' of capture and its offset are
** packed in field 'aux', 4 bits for each
*/
#define getkind(op) ((op)->i.aux & 0xF)
#define getoff(op) (((op)->i.aux >> 4) & 0xF)
#define joinkindoff(k, o) ((k) | ((o) << 4))

#define MAXOFF 0xF
#define MAXAUX 0xFF

/* maximum number of bytes to look behind */
#define MAXBEHIND MAXAUX

/* maximum size (in elements) for a pattern */
#define MAXPATTSIZE (SHRT_MAX - 10)

/* size (in elements) for an instruction plus extra l bytes */
#define instsize(l) (((l) + sizeof(Instruction) - 1) / sizeof(Instruction) + 1)

/* size (in elements) for a ISet instruction */
#define CHARSETINSTSIZE instsize(CHARSETSIZE)

/* size (in elements) for a IFunc instruction */
#define funcinstsize(p) ((p)->i.aux + 2)

#define testchar(st, c) (((int)(st)[((c) >> 3)] & (1 << ((c)&7))))

/* labeled failure begin */
#if !defined(LUAI_FUNC)
#define LUAI_FUNC extern
#endif

#define LFAIL 0

/* update the farthest failure */
#define updatefarthest(s1, s2) \
  {                            \
    if ((s2) > (s1)) s1 = s2;  \
  }

#define OUTPRED 0

#define INPRED 1
/* labeled failure end */

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#if !defined(lplvm_h)
#define lplvm_h


/* Virtual Machine's instructions */
typedef enum Opcode {
  IAny, /* if no char, fail */
  IChar,  /* if char != aux, fail */
  ISet,  /* if char not in buff, fail */
  ITestAny,  /* in no char, jump to 'offset' */
  ITestChar,  /* if char != aux, jump to 'offset' */
  ITestSet,  /* if char not in buff, jump to 'offset' */
  ISpan,  /* read a span of chars in buff */
  IUTFR,  /* if codepoint not in range [offset, utf_to], fail */
  IBehind,  /* walk back 'aux' characters (fail if not possible) */
  IRet,  /* return from a rule */
  IEnd,  /* end of pattern */
  IChoice,  /* stack a choice; next fail will jump to 'offset' */
  IPredChoice,  /* labeld failure: stack a choice; changes label env next fail will jump to 'offset' */ /*labeled failure */
  IJmp,  /* jump to 'offset' */
  ICall,  /* call rule at 'offset' */
  IOpenCall,  /* call rule number 'key' (must be closed to a ICall) */
  ICommit,  /* pop choice and jump to 'offset' */
  IPartialCommit,  /* update top choice to current position and jump */
  IBackCommit,  /* backtrack like "fail" but jump to its own 'offset' */
  IFailTwice,  /* pop one choice and then fail */
  IFail,  /* go back to saved state on choice and jump to saved offset */
  IGiveup,  /* internal use */
  IFullCapture,  /* complete capture of last 'off' chars */
  IOpenCapture,  /* start a capture */
  ICloseCapture,
  ICloseRunTime,
  IThrow,    /* fails with a given label */ /*labeled failure */
  IThrowRec, /* fails with a given label and call rule at 'offset' */ /*labeled failure */
  IEmpty  /* to fill empty slots left by optimizations */
} Opcode;

typedef union Instruction {
  struct Inst {
    byte code;
    byte aux;
    short key;
  } i;
  int offset;
  byte buff[1];
} Instruction;

/* extract 24-bit value from an instruction */
#define utf_to(inst) (((inst)->i.key << 8) | (inst)->i.aux)

LUAI_FUNC void printpatt(Instruction *p, int n);
LUAI_FUNC const char *match(lua_State *L, const char *o, const char *s,
                            const char *e, Instruction *op, Capture *capture,
                            int ptop, short *labelf,
                            const char **sfail); /* labeled failure */

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




void* alloc_entry(void* ud, void* ptr, size_t osize, size_t nsize);
void* pool_alloc(void* ud, void* ptr, size_t osize, size_t nsize);
void init_pool_alloc();
int luaopen_alloc(lua_State* L);
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lprefix_h
#define lprefix_h

/*
** Allows POSIX/XSI stuff
*/
#if !defined(LUA_USE_C89) /* { */

#if !defined(_XOPEN_SOURCE)
#define _XOPEN_SOURCE 600
#elif _XOPEN_SOURCE == 0
#undef _XOPEN_SOURCE /* use -D_XOPEN_SOURCE=0 to undefine it */
#endif

/*
** Allows manipulation of large files in gcc and some other compilers
*/
#if !defined(LUA_32BITS) && !defined(_FILE_OFFSET_BITS)
#define _LARGEFILE_SOURCE 1
#define _FILE_OFFSET_BITS 64
#endif

#endif /* } */

/*
** Windows stuff
*/
#if defined(_WIN32) /* { */

#if !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS /* avoid warnings about ISO C functions */
#endif

#endif /* } */

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif



#ifndef PYTHONINLUA_H
#define PYTHONINLUA_H
#define POBJECT "Python Object"

#if PY_MAJOR_VERSION < 3
  #define PyBytes_Check           PyString_Check
  #define PyBytes_AsStringAndSize PyString_AsStringAndSize
#endif

int py_convert(lua_State *L, PyObject *o);

typedef struct
{
    PyObject *o;
    int asindx;
} py_object;

py_object*    luaPy_to_pobject(lua_State *L, int n);

#endif
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#include <signal.h>


#ifndef lsig

#define lsig

struct lua_signal {
  char *name; /* name of the signal */
  int sig;    /* the signal */
};

#endif
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lstate_h
#define lstate_h


/*
** Some notes about garbage-collected objects: All objects in Lua must
** be kept somehow accessible until being freed, so all objects always
** belong to one (and only one) of these lists, using field 'next' of
** the 'CommonHeader' for the link:
**
** 'allgc': all objects not marked for finalization;
** 'finobj': all objects marked for finalization;
** 'tobefnz': all objects ready to be finalized;
** 'fixedgc': all objects that are not to be collected (currently
** only small strings, such as reserved words).
**
** For the generational collector, some of these lists have marks for
** generations. Each mark points to the first element in the list for
** that particular generation; that generation goes until the next mark.
**
** 'allgc' -> 'survival': new objects;
** 'survival' -> 'old': objects that survived one collection;
** 'old1' -> 'reallyold': objects that became old in last collection;
** 'reallyold' -> NULL: objects old for more than one cycle.
**
** 'finobj' -> 'finobjsur': new objects marked for finalization;
** 'finobjsur' -> 'finobjold1': survived   """";
** 'finobjold1' -> 'finobjrold': just old  """";
** 'finobjrold' -> NULL: really old       """".
**
** All lists can contain elements older than their main ages, due
** to 'luaC_checkfinalizer' and 'udata2finalize', which move
** objects between the normal lists and the "marked for finalization"
** lists. Moreover, barriers can age young objects in young lists as
** OLD0, which then become OLD1. However, a list never contains
** elements younger than their main ages.
**
** The generational collector also uses a pointer 'firstold1', which
** points to the first OLD1 object in the list. It is used to optimize
** 'markold'. (Potentially OLD1 objects can be anywhere between 'allgc'
** and 'reallyold', but often the list has no OLD1 objects or they are
** after 'old1'.) Note the difference between it and 'old1':
** 'firstold1': no OLD1 objects before this point; there can be all
**   ages after it.
** 'old1': no objects younger than OLD1 after this point.
*/

/*
** Moreover, there is another set of lists that control gray objects.
** These lists are linked by fields 'gclist'. (All objects that
** can become gray have such a field. The field is not the same
** in all objects, but it always has this name.)  Any gray object
** must belong to one of these lists, and all objects in these lists
** must be gray (with two exceptions explained below):
**
** 'gray': regular gray objects, still waiting to be visited.
** 'grayagain': objects that must be revisited at the atomic phase.
**   That includes
**   - black objects got in a write barrier;
**   - all kinds of weak tables during propagation phase;
**   - all threads.
** 'weak': tables with weak values to be cleared;
** 'ephemeron': ephemeron tables with white->white entries;
** 'allweak': tables with weak keys and/or weak values to be cleared.
**
** The exceptions to that "gray rule" are:
** - TOUCHED2 objects in generational mode stay in a gray list (because
** they must be visited again at the end of the cycle), but they are
** marked black because assignments to them must activate barriers (to
** move them back to TOUCHED1).
** - Open upvales are kept gray to avoid barriers, but they stay out
** of gray lists. (They don't even have a 'gclist' field.)
*/

/*
** About 'nCcalls':  This count has two parts: the lower 16 bits counts
** the number of recursive invocations in the C stack; the higher
** 16 bits counts the number of non-yieldable calls in the stack.
** (They are together so that we can change and save both with one
** instruction.)
*/

/* true if this thread does not have non-yieldable calls in the stack */
#define yieldable(L) (((L)->nCcalls & 0xffff0000) == 0)

/* real number of C calls */
#define getCcalls(L) ((L)->nCcalls & 0xffff)

/* Increment the number of non-yieldable calls */
#define incnny(L) ((L)->nCcalls += 0x10000)

/* Decrement the number of non-yieldable calls */
#define decnny(L) ((L)->nCcalls -= 0x10000)

/* Non-yieldable call increment */
#define nyci (0x10000 | 1)

struct lua_longjmp; /* defined in ldo.c */

/*
** Atomic type (relative to signals) to better ensure that 'lua_sethook'
** is thread safe
*/
#if !defined(l_signalT)
#include <signal.h>
#define l_signalT sig_atomic_t
#endif

/*
** Extra stack space to handle TM calls and some other extras. This
** space is not included in 'stack_last'. It is used only to avoid stack
** checks, either because the element will be promptly popped or because
** there will be a stack check soon after the push. Function frames
** never use this extra space, so it does not need to be kept clean.
*/
#define EXTRA_STACK 5

#define BASIC_STACK_SIZE (2 * LUA_MINSTACK)

#define stacksize(th) cast_int((th)->stack_last - (th)->stack)

/* kinds of Garbage Collection */
#define KGC_INC 0 /* incremental gc */
#define KGC_GEN 1 /* generational gc */

typedef struct stringtable {
  TString **hash;
  int nuse; /* number of elements */
  int size;
} stringtable;

/*
** Information about a call.
** About union 'u':
** - field 'l' is used only for Lua functions;
** - field 'c' is used only for C functions.
** About union 'u2':
** - field 'funcidx' is used only by C functions while doing a
** protected call;
** - field 'nyield' is used only while a function is "doing" an
** yield (from the yield until the next resume);
** - field 'nres' is used only while closing tbc variables when
** returning from a function;
** - field 'transferinfo' is used only during call/returnhooks,
** before the function starts or after it ends.
*/
typedef struct CallInfo {
  StkId func;                       /* function index in the stack */
  StkId top;                        /* top for this function */
  struct CallInfo *previous, *next; /* dynamic call link */
  union {
    struct { /* only for Lua functions */
      const Instruction *savedpc;
      volatile l_signalT trap;
      int nextraargs; /* # of extra arguments in vararg functions */
    } l;
    struct {           /* only for C functions */
      lua_KFunction k; /* continuation in case of yields */
      ptrdiff_t old_errfunc;
      lua_KContext ctx; /* context info. in case of yields */
    } c;
  } u;
  union {
    int funcidx; /* called-function index */
    int nyield;  /* number of values yielded */
    int nres;    /* number of values returned */
    struct {     /* info about transferred values (for call/return hooks) */
      unsigned short ftransfer; /* offset of first value transferred */
      unsigned short ntransfer; /* number of values transferred */
    } transferinfo;
  } u2;
  short nresults; /* expected number of results from this function */
  unsigned short callstatus;
} CallInfo;

/*
** Bits in CallInfo status
*/
#define CIST_OAH (1 << 0)       /* original value of 'allowhook' */
#define CIST_C (1 << 1)         /* call is running a C function */
#define CIST_FRESH (1 << 2)     /* call is on a fresh "luaV_execute" frame */
#define CIST_HOOKED (1 << 3)    /* call is running a debug hook */
#define CIST_YPCALL (1 << 4)    /* doing a yieldable protected call */
#define CIST_TAIL (1 << 5)      /* call was tail called */
#define CIST_HOOKYIELD (1 << 6) /* last hook called yielded */
#define CIST_FIN (1 << 7)       /* function "called" a finalizer */
#define CIST_TRAN (1 << 8)      /* 'ci' has transfer information */
#define CIST_CLSRET (1 << 9)    /* function is closing tbc variables */
/* Bits 10-12 are used for CIST_RECST (see below) */
#define CIST_RECST 10
#if defined(LUA_COMPAT_LT_LE)
#define CIST_LEQ (1 << 13) /* using __lt for __le */
#endif

/*
** Field CIST_RECST stores the "recover status", used to keep the error
** status while closing to-be-closed variables in coroutines, so that
** Lua can correctly resume after an yield from a __close method called
** because of an error.  (Three bits are enough for error status.)
*/
#define getcistrecst(ci) (((ci)->callstatus >> CIST_RECST) & 7)
#define setcistrecst(ci, st)                                              \
  check_exp(((st)&7) == (st), /* status must fit in three bits */         \
            ((ci)->callstatus = ((ci)->callstatus & ~(7 << CIST_RECST)) | \
                                ((st) << CIST_RECST)))

/* active function is a Lua function */
#define isLua(ci) (!((ci)->callstatus & CIST_C))

/* call is running Lua code (not a hook) */
#define isLuacode(ci) (!((ci)->callstatus & (CIST_C | CIST_HOOKED)))

/* assume that CIST_OAH has offset 0 and that 'v' is strictly 0/1 */
#define setoah(st, v) ((st) = ((st) & ~CIST_OAH) | (v))
#define getoah(st) ((st)&CIST_OAH)

/*
** 'global state', shared by all threads of this state
*/
typedef struct global_State {
  lua_Alloc frealloc; /* function to reallocate memory */
  void *ud;           /* auxiliary data to 'frealloc' */
  l_mem totalbytes;   /* number of bytes currently allocated - GCdebt */
  l_mem GCdebt;       /* bytes allocated not yet compensated by the collector */
  lu_mem GCestimate;  /* an estimate of the non-garbage memory in use */
  lu_mem lastatomic;  /* see function 'genstep' in file 'lgc.c' */
  stringtable strt;   /* hash table for strings */
  TValue l_registry;
  TValue nilvalue;   /* a nil value */
  unsigned int seed; /* randomized seed for hashes */
  lu_byte currentwhite;
  lu_byte gcstate;     /* state of garbage collector */
  lu_byte gckind;      /* kind of GC running */
  lu_byte gcstopem;    /* stops emergency collections */
  lu_byte genminormul; /* control for minor generational collections */
  lu_byte genmajormul; /* control for major generational collections */
  lu_byte gcstp;       /* control whether GC is running */
  lu_byte gcemergency; /* true if this is an emergency collection */
  lu_byte gcpause;     /* size of pause between successive GCs */
  lu_byte gcstepmul;   /* GC "speed" */
  lu_byte gcstepsize;  /* (log2 of) GC granularity */
  GCObject *allgc;     /* list of all collectable objects */
  GCObject **sweepgc;  /* current position of sweep in list */
  GCObject *finobj;    /* list of collectable objects with finalizers */
  GCObject *gray;      /* list of gray objects */
  GCObject *grayagain; /* list of objects to be traversed atomically */
  GCObject *weak;      /* list of tables with weak values */
  GCObject *ephemeron; /* list of ephemeron tables (weak keys) */
  GCObject *allweak;   /* list of all-weak tables */
  GCObject *tobefnz;   /* list of userdata to be GC */
  GCObject *fixedgc;   /* list of objects not to be collected */
  /* fields for generational collector */
  GCObject *survival;      /* start of objects that survived one GC cycle */
  GCObject *old1;          /* start of old1 objects */
  GCObject *reallyold;     /* objects more than one cycle old ("really old") */
  GCObject *firstold1;     /* first OLD1 object in the list (if any) */
  GCObject *finobjsur;     /* list of survival objects with finalizers */
  GCObject *finobjold1;    /* list of old1 objects with finalizers */
  GCObject *finobjrold;    /* list of really old objects with finalizers */
  struct lua_State *twups; /* list of threads with open upvalues */
  lua_CFunction panic;     /* to be called in unprotected errors */
  struct lua_State *mainthread;
  TString *memerrmsg;            /* message for memory-allocation errors */
  TString *tmname[TM_N];         /* array with tag-method names */
  struct Table *mt[LUA_NUMTAGS]; /* metatables for basic types */
  TString *strcache[STRCACHE_N][STRCACHE_M]; /* cache for strings in API */
  lua_WarnFunction warnf;                    /* warning function */
  void *ud_warn;                             /* auxiliary data to 'warnf' */
} global_State;

/*
** 'per thread' state
*/
struct lua_State {
  CommonHeader;
  lu_byte status;
  lu_byte allowhook;
  unsigned short nci; /* number of items in 'ci' list */
  StkId top;          /* first free slot in the stack */
  global_State *l_G;
  CallInfo *ci;     /* call info for current function */
  StkId stack_last; /* end of stack (last element + 1) */
  StkId stack;      /* stack base */
  UpVal *openupval; /* list of open upvalues in this stack */
  StkId tbclist;    /* list of to-be-closed variables */
  GCObject *gclist;
  struct lua_State *twups;      /* list of threads with open upvalues */
  struct lua_longjmp *errorJmp; /* current error recover point */
  CallInfo base_ci;             /* CallInfo for first level (C calling Lua) */
  volatile lua_Hook hook;
  ptrdiff_t errfunc; /* current error handling function (stack index) */
  l_uint32 nCcalls;  /* number of nested (non-yieldable | C)  calls */
  int oldpc;         /* last pc traced */
  int basehookcount;
  int hookcount;
  volatile l_signalT hookmask;
};

#define G(L) (L->l_G)

/*
** 'g->nilvalue' being a nil value flags that the state was completely
** build.
*/
#define completestate(g) ttisnil(&g->nilvalue)

/*
** Union of all collectable objects (only for conversions)
** ISO C99, 6.5.2.3 p.5:
** "if a union contains several structures that share a common initial
** sequence [...], and if the union object currently contains one
** of these structures, it is permitted to inspect the common initial
** part of any of them anywhere that a declaration of the complete type
** of the union is visible."
*/
union GCUnion {
  GCObject gc; /* common header */
  struct TString ts;
  struct Udata u;
  union Closure cl;
  struct Table h;
  struct Proto p;
  struct lua_State th; /* thread */
  struct UpVal upv;
};

/*
** ISO C99, 6.7.2.1 p.14:
** "A pointer to a union object, suitably converted, points to each of
** its members [...], and vice versa."
*/
#define cast_u(o) cast(union GCUnion *, (o))

/* macros to convert a GCObject into a specific value */
#define gco2ts(o) \
  check_exp(novariant((o)->tt) == LUA_TSTRING, &((cast_u(o))->ts))
#define gco2u(o) check_exp((o)->tt == LUA_VUSERDATA, &((cast_u(o))->u))
#define gco2lcl(o) check_exp((o)->tt == LUA_VLCL, &((cast_u(o))->cl.l))
#define gco2ccl(o) check_exp((o)->tt == LUA_VCCL, &((cast_u(o))->cl.c))
#define gco2cl(o) \
  check_exp(novariant((o)->tt) == LUA_TFUNCTION, &((cast_u(o))->cl))
#define gco2t(o) check_exp((o)->tt == LUA_VTABLE, &((cast_u(o))->h))
#define gco2p(o) check_exp((o)->tt == LUA_VPROTO, &((cast_u(o))->p))
#define gco2th(o) check_exp((o)->tt == LUA_VTHREAD, &((cast_u(o))->th))
#define gco2upv(o) check_exp((o)->tt == LUA_VUPVAL, &((cast_u(o))->upv))

/*
** macro to convert a Lua object into a GCObject
** (The access to 'tt' tries to ensure that 'v' is actually a Lua object.)
*/
#define obj2gco(v) check_exp((v)->tt >= LUA_TSTRING, &(cast_u(v)->gc))

/* actual number of total bytes allocated */
#define gettotalbytes(g) cast(lu_mem, (g)->totalbytes + (g)->GCdebt)

LUAI_FUNC void luaE_setdebt(global_State *g, l_mem debt);
LUAI_FUNC void luaE_freethread(lua_State *L, lua_State *L1);
LUAI_FUNC CallInfo *luaE_extendCI(lua_State *L);
LUAI_FUNC void luaE_freeCI(lua_State *L);
LUAI_FUNC void luaE_shrinkCI(lua_State *L);
LUAI_FUNC void luaE_checkcstack(lua_State *L);
LUAI_FUNC void luaE_incCstack(lua_State *L);
LUAI_FUNC void luaE_warning(lua_State *L, const char *msg, int tocont);
LUAI_FUNC void luaE_warnerror(lua_State *L, const char *where);
LUAI_FUNC int luaE_resetthread(lua_State *L, int status);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lstring_h
#define lstring_h


/*
** Memory-allocation error message must be preallocated (it cannot
** be created after memory is exhausted)
*/
#define MEMERRMSG "not enough memory"

/*
** Size of a TString: Size of the header plus space for the string
** itself (including final '\0').
*/
#define sizelstring(l) (offsetof(TString, contents) + ((l) + 1) * sizeof(char))

#define luaS_newliteral(L, s) \
  (luaS_newlstr(L, "" s, (sizeof(s) / sizeof(char)) - 1))

/*
** test whether a string is a reserved word
*/
#define isreserved(s) ((s)->tt == LUA_VSHRSTR && (s)->extra > 0)

/*
** equality for short strings, which are always internalized
*/
#define eqshrstr(a, b) check_exp((a)->tt == LUA_VSHRSTR, (a) == (b))

LUAI_FUNC unsigned int luaS_hash(const char *str, size_t l, unsigned int seed);
LUAI_FUNC unsigned int luaS_hashlongstr(TString *ts);
LUAI_FUNC int luaS_eqlngstr(TString *a, TString *b);
LUAI_FUNC void luaS_resize(lua_State *L, int newsize);
LUAI_FUNC void luaS_clearcache(global_State *g);
LUAI_FUNC void luaS_init(lua_State *L);
LUAI_FUNC void luaS_remove(lua_State *L, TString *ts);
LUAI_FUNC Udata *luaS_newudata(lua_State *L, size_t s, int nuvalue);
LUAI_FUNC TString *luaS_newlstr(lua_State *L, const char *str, size_t l);
LUAI_FUNC TString *luaS_new(lua_State *L, const char *str);
LUAI_FUNC TString *luaS_createlngstrobj(lua_State *L, size_t l);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#include <stdio.h>
#include <stdlib.h>

#ifdef _WIN32
#include <windows.h>
#define W

#elif defined(LUA_USE_POSIX) || defined(__unix__) || defined(__unix) || \
    defined(__APPLE__)
#include <sys/utsname.h>
#define U
#else
#define D
#endif

static const char* getCPUName() {
#ifdef W
  char cpuName[256];
  DWORD bufferSize = sizeof(cpuName);
  DWORD type = REG_SZ;
  HKEY hKey;

  if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                   "HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", 0,
                   KEY_READ, &hKey) == ERROR_SUCCESS) {
    if (RegQueryValueEx(hKey, "ProcessorNameString", NULL, &type,
                        (LPBYTE)cpuName, &bufferSize) == ERROR_SUCCESS) {
      RegCloseKey(hKey);
      return cpuName;
    }
    RegCloseKey(hKey);
  }

  return "Unknown Windows CPU";
#elif defined(U)
  struct utsname buf;
  if (uname(&buf) == 0) {
    return buf.machine;
  }
  return "Unknown Unix CPU";
#else
  return "Unknown CPU";
#endif
}

static const char* getGPUName() {
#ifdef W
  char gpuName[256];
  DWORD bufferSize = sizeof(gpuName);
  HDEVINFO deviceInfoSet =
      SetupDiGetClassDevs(&GUID_DEVCLASS_DISPLAY, NULL, NULL, DIGCF_PRESENT);
  if (deviceInfoSet != INVALID_HANDLE_VALUE) {
    SP_DEVINFO_DATA deviceInfoData;
    deviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
    for (DWORD i = 0; SetupDiEnumDeviceInfo(deviceInfoSet, i, &deviceInfoData);
         i++) {
      DWORD dataType;
      if (SetupDiGetDeviceRegistryProperty(
              deviceInfoSet, &deviceInfoData, SPDRP_HARDWAREID, &dataType,
              (BYTE*)gpuName, bufferSize, &bufferSize)) {
        if (strstr(gpuName, "VEN_") && strstr(gpuName, "DEV_")) {
          char* vendorID = strstr(gpuName, "VEN_") + 4;
          char* deviceID = strstr(gpuName, "DEV_") + 4;
          *strstr(vendorID, "&") = '\0';
          *strstr(deviceID, "&") = '\0';
          sprintf(gpuName, "%s %s", vendorID, deviceID);
          SetupDiDestroyDeviceInfoList(deviceInfoSet);
          return gpuName;
        }
      }
    }
    SetupDiDestroyDeviceInfoList(deviceInfoSet);
  }
  return "Unknown Windows GPU";
#elif defined(U)
  return "Unknown Unix GPU";
#else
  return "Unknown GPU";
#endif
}
#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef ltable_h
#define ltable_h


#define gnode(t, i) (&(t)->node[i])
#define gval(n) (&(n)->i_val)
#define gnext(n) ((n)->u.next)

/*
** Clear all bits of fast-access metamethods, which means that the table
** may have any of these metamethods. (First access that fails after the
** clearing will set the bit again.)
*/
#define invalidateTMcache(t) ((t)->flags &= ~maskflags)

/* true when 't' is using 'dummynode' as its hash part */
#define isdummy(t) ((t)->lastfree == NULL)

/* allocated size for hash nodes */
#define allocsizenode(t) (isdummy(t) ? 0 : sizenode(t))

/* returns the Node, given the value of a table entry */
#define nodefromval(v) cast(Node *, (v))

LUAI_FUNC const TValue *luaH_getint(Table *t, lua_Integer key);
LUAI_FUNC void luaH_setint(lua_State *L, Table *t, lua_Integer key,
                           TValue *value);
LUAI_FUNC const TValue *luaH_getshortstr(Table *t, TString *key);
LUAI_FUNC const TValue *luaH_getstr(Table *t, TString *key);
LUAI_FUNC const TValue *luaH_get(Table *t, const TValue *key);
LUAI_FUNC void luaH_newkey(lua_State *L, Table *t, const TValue *key,
                           TValue *value);
LUAI_FUNC void luaH_set(lua_State *L, Table *t, const TValue *key,
                        TValue *value);
LUAI_FUNC void luaH_finishset(lua_State *L, Table *t, const TValue *key,
                              const TValue *slot, TValue *value);
LUAI_FUNC Table *luaH_new(lua_State *L);
LUAI_FUNC void luaH_resize(lua_State *L, Table *t, unsigned int nasize,
                           unsigned int nhsize);
LUAI_FUNC void luaH_resizearray(lua_State *L, Table *t, unsigned int nasize);
LUAI_FUNC void luaH_free(lua_State *L, Table *t);
LUAI_FUNC int luaH_next(lua_State *L, Table *t, StkId key);
LUAI_FUNC lua_Unsigned luaH_getn(Table *t);
LUAI_FUNC unsigned int luaH_realasize(const Table *t);

#if defined(LUA_DEBUG)
LUAI_FUNC Node *luaH_mainposition(const Table *t, const TValue *key);
LUAI_FUNC int luaH_isdummy(const Table *t);
#endif

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef ltm_h
#define ltm_h


/*
 * WARNING: if you change the order of this enumeration,
 * grep "ORDER TM" and "ORDER OP"
 */
typedef enum {
  TM_INDEX,
  TM_NEWINDEX,
  TM_GC,
  TM_MODE,
  TM_LEN,
  TM_EQ, /* last tag method with fast access */
  TM_ADD,
  TM_SUB,
  TM_MUL,
  TM_MOD,
  TM_POW,
  TM_DIV,
  TM_IDIV,
  TM_BAND,
  TM_BOR,
  TM_BXOR,
  TM_SHL,
  TM_SHR,
  TM_UNM,
  TM_BNOT,
  TM_LT,
  TM_LE,
  TM_CONCAT,
  TM_CALL,
  TM_CLOSE,
  TM_N /* number of elements in the enum */
} TMS;

/*
** Mask with 1 in all fast-access methods. A 1 in any of these bits
** in the flag of a (meta)table means the metatable does not have the
** corresponding metamethod field. (Bit 7 of the flag is used for
** 'isrealasize'.)
*/
#define maskflags (~(~0u << (TM_EQ + 1)))

/*
** Test whether there is no tagmethod.
** (Because tagmethods use raw accesses, the result may be an "empty" nil.)
*/
#define notm(tm) ttisnil(tm)

#define gfasttm(g, et, e)               \
  ((et) == NULL                  ? NULL \
   : ((et)->flags & (1u << (e))) ? NULL \
                                 : luaT_gettm(et, e, (g)->tmname[e]))

#define fasttm(l, et, e) gfasttm(G(l), et, e)

#define ttypename(x) luaT_typenames_[(x) + 1]

LUAI_DDEC(const char *const luaT_typenames_[LUA_TOTALTYPES];)

LUAI_FUNC const char *luaT_objtypename(lua_State *L, const TValue *o);

LUAI_FUNC const TValue *luaT_gettm(Table *events, TMS event, TString *ename);
LUAI_FUNC const TValue *luaT_gettmbyobj(lua_State *L, const TValue *o,
                                        TMS event);
LUAI_FUNC void luaT_init(lua_State *L);

LUAI_FUNC void luaT_callTM(lua_State *L, const TValue *f, const TValue *p1,
                           const TValue *p2, const TValue *p3);
LUAI_FUNC void luaT_callTMres(lua_State *L, const TValue *f, const TValue *p1,
                              const TValue *p2, StkId p3);
LUAI_FUNC void luaT_trybinTM(lua_State *L, const TValue *p1, const TValue *p2,
                             StkId res, TMS event);
LUAI_FUNC void luaT_tryconcatTM(lua_State *L);
LUAI_FUNC void luaT_trybinassocTM(lua_State *L, const TValue *p1,
                                  const TValue *p2, int inv, StkId res,
                                  TMS event);
LUAI_FUNC void luaT_trybiniTM(lua_State *L, const TValue *p1, lua_Integer i2,
                              int inv, StkId res, TMS event);
LUAI_FUNC int luaT_callorderTM(lua_State *L, const TValue *p1, const TValue *p2,
                               TMS event);
LUAI_FUNC int luaT_callorderiTM(lua_State *L, const TValue *p1, int v2, int inv,
                                int isfloat, TMS event);

LUAI_FUNC void luaT_adjustvarargs(lua_State *L, int nfixparams,
                                  struct CallInfo *ci, const Proto *p);
LUAI_FUNC void luaT_getvarargs(lua_State *L, struct CallInfo *ci, StkId where,
                               int wanted);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifdef __LCC__
#define __FUNCTION__ __func__
#else
#ifndef __GNUC__
#define __FUNCTION__ "-"
#endif
#endif


lua_State* Lua_newstate(lua_Alloc f, void* ud, const char* _FILE, int _LINE,
                        const char* _FUNC);

#define lua_newstate(f, ud) \
  Lua_newstate(f, ud, __FILE__, __LINE__, __FUNCTION__)

void Lua_close(lua_State* L, const char* _FILE, int _LINE, const char* _FUNC);

#define lua_close(L) Lua_close(L, __FILE__, __LINE__, __FUNCTION__)

lua_State* Lua_newthread(lua_State* L, const char* _FILE, int _LINE,
                         const char* _FUNC);

#define lua_newthread(L) Lua_newthread(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_resetthread(lua_State* L, const char* _FILE, int _LINE,
                    const char* _FUNC);

#define lua_resetthread(L) Lua_resetthread(L, __FILE__, __LINE__, __FUNCTION__)

lua_CFunction Lua_atpanic(lua_State* L, lua_CFunction panicf, const char* _FILE,
                          int _LINE, const char* _FUNC);

#define lua_atpanic(L, panicf) \
  Lua_atpanic(L, panicf, __FILE__, __LINE__, __FUNCTION__)

lua_Number Lua_version(lua_State* L, const char* _FILE, int _LINE,
                       const char* _FUNC);

#define lua_version(L) Lua_version(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_absindex(lua_State* L, int idx, const char* _FILE, int _LINE,
                 const char* _FUNC);

#define lua_absindex(L, idx) \
  Lua_absindex(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_gettop(lua_State* L, const char* _FILE, int _LINE, const char* _FUNC);

#define lua_gettop(L) Lua_gettop(L, __FILE__, __LINE__, __FUNCTION__)

void Lua_settop(lua_State* L, int idx, const char* _FILE, int _LINE,
                const char* _FUNC);

#define lua_settop(L, idx) Lua_settop(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushvalue(lua_State* L, int idx, const char* _FILE, int _LINE,
                   const char* _FUNC);

#define lua_pushvalue(L, idx) \
  Lua_pushvalue(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_rotate(lua_State* L, int idx, int n, const char* _FILE, int _LINE,
                const char* _FUNC);

#define lua_rotate(L, idx, n) \
  Lua_rotate(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_copy(lua_State* L, int fromidx, int toidx, const char* _FILE,
              int _LINE, const char* _FUNC);

#define lua_copy(L, fromidx, toidx) \
  Lua_copy(L, fromidx, toidx, __FILE__, __LINE__, __FUNCTION__)

int Lua_checkstack(lua_State* L, int n, const char* _FILE, int _LINE,
                   const char* _FUNC);

#define lua_checkstack(L, n) \
  Lua_checkstack(L, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_xmove(lua_State* from, lua_State* to, int n, const char* _FILE,
               int _LINE, const char* _FUNC);

#define lua_xmove(from, to, n) \
  Lua_xmove(from, to, n, __FILE__, __LINE__, __FUNCTION__)

int Lua_isnumber(lua_State* L, int idx, const char* _FILE, int _LINE,
                 const char* _FUNC);

#define lua_isnumber(L, idx) \
  Lua_isnumber(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_isstring(lua_State* L, int idx, const char* _FILE, int _LINE,
                 const char* _FUNC);

#define lua_isstring(L, idx) \
  Lua_isstring(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_iscfunction(lua_State* L, int idx, const char* _FILE, int _LINE,
                    const char* _FUNC);

#define lua_iscfunction(L, idx) \
  Lua_iscfunction(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_isinteger(lua_State* L, int idx, const char* _FILE, int _LINE,
                  const char* _FUNC);

#define lua_isinteger(L, idx) \
  Lua_isinteger(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_isuserdata(lua_State* L, int idx, const char* _FILE, int _LINE,
                   const char* _FUNC);

#define lua_isuserdata(L, idx) \
  Lua_isuserdata(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_type(lua_State* L, int idx, const char* _FILE, int _LINE,
             const char* _FUNC);

#define lua_type(L, idx) Lua_type(L, idx, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_typename(lua_State* L, int tp, const char* _FILE, int _LINE,
                         const char* _FUNC);

#define lua_typename(L, tp) \
  Lua_typename(L, tp, __FILE__, __LINE__, __FUNCTION__)

lua_Number Lua_tonumberx(lua_State* L, int idx, int* isnum, const char* _FILE,
                         int _LINE, const char* _FUNC);

#define lua_tonumberx(L, idx, isnum) \
  Lua_tonumberx(L, idx, isnum, __FILE__, __LINE__, __FUNCTION__)

lua_Integer Lua_tointegerx(lua_State* L, int idx, int* isnum, const char* _FILE,
                           int _LINE, const char* _FUNC);

#define lua_tointegerx(L, idx, isnum) \
  Lua_tointegerx(L, idx, isnum, __FILE__, __LINE__, __FUNCTION__)

int Lua_toboolean(lua_State* L, int idx, const char* _FILE, int _LINE,
                  const char* _FUNC);

#define lua_toboolean(L, idx) \
  Lua_toboolean(L, idx, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_tolstring(lua_State* L, int idx, size_t* len, const char* _FILE,
                          int _LINE, const char* _FUNC);

#define lua_tolstring(L, idx, len) \
  Lua_tolstring(L, idx, len, __FILE__, __LINE__, __FUNCTION__)

lua_Unsigned Lua_rawlen(lua_State* L, int idx, const char* _FILE, int _LINE,
                        const char* _FUNC);

#define lua_rawlen(L, idx) Lua_rawlen(L, idx, __FILE__, __LINE__, __FUNCTION__)

lua_CFunction Lua_tocfunction(lua_State* L, int idx, const char* _FILE,
                              int _LINE, const char* _FUNC);

#define lua_tocfunction(L, idx) \
  Lua_tocfunction(L, idx, __FILE__, __LINE__, __FUNCTION__)

void* Lua_touserdata(lua_State* L, int idx, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_touserdata(L, idx) \
  Lua_touserdata(L, idx, __FILE__, __LINE__, __FUNCTION__)

lua_State* Lua_tothread(lua_State* L, int idx, const char* _FILE, int _LINE,
                        const char* _FUNC);

#define lua_tothread(L, idx) \
  Lua_tothread(L, idx, __FILE__, __LINE__, __FUNCTION__)

const void* Lua_topointer(lua_State* L, int idx, const char* _FILE, int _LINE,
                          const char* _FUNC);

#define lua_topointer(L, idx) \
  Lua_topointer(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_arith(lua_State* L, int op, const char* _FILE, int _LINE,
               const char* _FUNC);

#define lua_arith(L, op) Lua_arith(L, op, __FILE__, __LINE__, __FUNCTION__)

int Lua_rawequal(lua_State* L, int idx1, int idx2, const char* _FILE, int _LINE,
                 const char* _FUNC);

#define lua_rawequal(L, idx1, idx2) \
  Lua_rawequal(L, idx1, idx2, __FILE__, __LINE__, __FUNCTION__)

int Lua_compare(lua_State* L, int idx1, int idx2, int op, const char* _FILE,
                int _LINE, const char* _FUNC);

#define lua_compare(L, idx1, idx2, op) \
  Lua_compare(L, idx1, idx2, op, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushnil(lua_State* L, const char* _FILE, int _LINE, const char* _FUNC);

#define lua_pushnil(L) Lua_pushnil(L, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushnumber(lua_State* L, lua_Number n, const char* _FILE, int _LINE,
                    const char* _FUNC);

#define lua_pushnumber(L, n) \
  Lua_pushnumber(L, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushinteger(lua_State* L, lua_Integer n, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_pushinteger(L, n) \
  Lua_pushinteger(L, n, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_pushlstring(lua_State* L, const char* s, size_t len,
                            const char* _FILE, int _LINE, const char* _FUNC);

#define lua_pushlstring(L, s, len) \
  Lua_pushlstring(L, s, len, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_pushstring(lua_State* L, const char* s, const char* _FILE,
                           int _LINE, const char* _FUNC);

#define lua_pushstring(L, s) \
  Lua_pushstring(L, s, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushcclosure(lua_State* L, lua_CFunction fn, int n, const char* _FILE,
                      int _LINE, const char* _FUNC);

#define lua_pushcclosure(L, fn, n) \
  Lua_pushcclosure(L, fn, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushboolean(lua_State* L, int b, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_pushboolean(L, b) \
  Lua_pushboolean(L, b, __FILE__, __LINE__, __FUNCTION__)

void Lua_pushlightuserdata(lua_State* L, void* p, const char* _FILE, int _LINE,
                           const char* _FUNC);

#define lua_pushlightuserdata(L, p) \
  Lua_pushlightuserdata(L, p, __FILE__, __LINE__, __FUNCTION__)

int Lua_pushthread(lua_State* L, const char* _FILE, int _LINE,
                   const char* _FUNC);

#define lua_pushthread(L) Lua_pushthread(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_getglobal(lua_State* L, const char* name, const char* _FILE, int _LINE,
                  const char* _FUNC);

#define lua_getglobal(L, name) \
  Lua_getglobal(L, name, __FILE__, __LINE__, __FUNCTION__)

int Lua_gettable(lua_State* L, int idx, const char* _FILE, int _LINE,
                 const char* _FUNC);

#define lua_gettable(L, idx) \
  Lua_gettable(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_getfield(lua_State* L, int idx, const char* k, const char* _FILE,
                 int _LINE, const char* _FUNC);

#define lua_getfield(L, idx, k) \
  Lua_getfield(L, idx, k, __FILE__, __LINE__, __FUNCTION__)

int Lua_geti(lua_State* L, int idx, lua_Integer n, const char* _FILE, int _LINE,
             const char* _FUNC);

#define lua_geti(L, idx, n) \
  Lua_geti(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

int Lua_rawget(lua_State* L, int idx, const char* _FILE, int _LINE,
               const char* _FUNC);

#define lua_rawget(L, idx) Lua_rawget(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_rawgeti(lua_State* L, int idx, lua_Integer n, const char* _FILE,
                int _LINE, const char* _FUNC);

#define lua_rawgeti(L, idx, n) \
  Lua_rawgeti(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

int Lua_rawgetp(lua_State* L, int idx, const void* p, const char* _FILE,
                int _LINE, const char* _FUNC);

#define lua_rawgetp(L, idx, p) \
  Lua_rawgetp(L, idx, p, __FILE__, __LINE__, __FUNCTION__)

void Lua_createtable(lua_State* L, int narr, int nrec, const char* _FILE,
                     int _LINE, const char* _FUNC);

#define lua_createtable(L, narr, nrec) \
  Lua_createtable(L, narr, nrec, __FILE__, __LINE__, __FUNCTION__)

void* Lua_newuserdatauv(lua_State* L, size_t sz, int nuvalue, const char* _FILE,
                        int _LINE, const char* _FUNC);

#define lua_newuserdatauv(L, sz, nuvalue) \
  Lua_newuserdatauv(L, sz, nuvalue, __FILE__, __LINE__, __FUNCTION__)

int Lua_getmetatable(lua_State* L, int objindex, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_getmetatable(L, objindex) \
  Lua_getmetatable(L, objindex, __FILE__, __LINE__, __FUNCTION__)

int Lua_getiuservalue(lua_State* L, int idx, int n, const char* _FILE,
                      int _LINE, const char* _FUNC);

#define lua_getiuservalue(L, idx, n) \
  Lua_getiuservalue(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_setglobal(lua_State* L, const char* name, const char* _FILE, int _LINE,
                   const char* _FUNC);

#define lua_setglobal(L, name) \
  Lua_setglobal(L, name, __FILE__, __LINE__, __FUNCTION__)

void Lua_settable(lua_State* L, int idx, const char* _FILE, int _LINE,
                  const char* _FUNC);

#define lua_settable(L, idx) \
  Lua_settable(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_setfield(lua_State* L, int idx, const char* k, const char* _FILE,
                  int _LINE, const char* _FUNC);

#define lua_setfield(L, idx, k) \
  Lua_setfield(L, idx, k, __FILE__, __LINE__, __FUNCTION__)

void Lua_seti(lua_State* L, int idx, lua_Integer n, const char* _FILE,
              int _LINE, const char* _FUNC);

#define lua_seti(L, idx, n) \
  Lua_seti(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_rawset(lua_State* L, int idx, const char* _FILE, int _LINE,
                const char* _FUNC);

#define lua_rawset(L, idx) Lua_rawset(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_rawseti(lua_State* L, int idx, lua_Integer n, const char* _FILE,
                 int _LINE, const char* _FUNC);

#define lua_rawseti(L, idx, n) \
  Lua_rawseti(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_rawsetp(lua_State* L, int idx, const void* p, const char* _FILE,
                 int _LINE, const char* _FUNC);

#define lua_rawsetp(L, idx, p) \
  Lua_rawsetp(L, idx, p, __FILE__, __LINE__, __FUNCTION__)

int Lua_setmetatable(lua_State* L, int objindex, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_setmetatable(L, objindex) \
  Lua_setmetatable(L, objindex, __FILE__, __LINE__, __FUNCTION__)

int Lua_setiuservalue(lua_State* L, int idx, int n, const char* _FILE,
                      int _LINE, const char* _FUNC);

#define lua_setiuservalue(L, idx, n) \
  Lua_setiuservalue(L, idx, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_callk(lua_State* L, int nargs, int nresults, lua_KContext ctx,
               lua_KFunction k, const char* _FILE, int _LINE,
               const char* _FUNC);

#define lua_callk(L, nargs, nresults, ctx, k) \
  Lua_callk(L, nargs, nresults, ctx, k, __FILE__, __LINE__, __FUNCTION__)

int Lua_pcallk(lua_State* L, int nargs, int nresults, int errfunc,
               lua_KContext ctx, lua_KFunction k, const char* _FILE, int _LINE,
               const char* _FUNC);

#define lua_pcallk(L, nargs, nresults, errfunc, ctx, k)               \
  Lua_pcallk(L, nargs, nresults, errfunc, ctx, k, __FILE__, __LINE__, \
             __FUNCTION__)

int Lua_load(lua_State* L, lua_Reader reader, void* dt, const char* chunkname,
             const char* mode, const char* _FILE, int _LINE, const char* _FUNC);

#define lua_load(L, reader, dt, chunkname, mode) \
  Lua_load(L, reader, dt, chunkname, mode, __FILE__, __LINE__, __FUNCTION__)

int Lua_dump(lua_State* L, lua_Writer writer, void* data, int strip,
             const char* _FILE, int _LINE, const char* _FUNC);

#define lua_dump(L, writer, data, strip) \
  Lua_dump(L, writer, data, strip, __FILE__, __LINE__, __FUNCTION__)

int Lua_yieldk(lua_State* L, int nresults, lua_KContext ctx, lua_KFunction k,
               const char* _FILE, int _LINE, const char* _FUNC);

#define lua_yieldk(L, nresults, ctx, k) \
  Lua_yieldk(L, nresults, ctx, k, __FILE__, __LINE__, __FUNCTION__)

int Lua_resume(lua_State* L, lua_State* from, int narg, int* nres,
               const char* _FILE, int _LINE, const char* _FUNC);

#define lua_resume(L, from, narg, nres) \
  Lua_resume(L, from, narg, nres, __FILE__, __LINE__, __FUNCTION__)

int Lua_status(lua_State* L, const char* _FILE, int _LINE, const char* _FUNC);

#define lua_status(L) Lua_status(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_isyieldable(lua_State* L, const char* _FILE, int _LINE,
                    const char* _FUNC);

#define lua_isyieldable(L) Lua_isyieldable(L, __FILE__, __LINE__, __FUNCTION__)

void Lua_setwarnf(lua_State* L, lua_WarnFunction f, void* ud, const char* _FILE,
                  int _LINE, const char* _FUNC);

#define lua_setwarnf(L, f, ud) \
  Lua_setwarnf(L, f, ud, __FILE__, __LINE__, __FUNCTION__)

void Lua_warning(lua_State* L, const char* msg, int tocont, const char* _FILE,
                 int _LINE, const char* _FUNC);

#define lua_warning(L, msg, tocont) \
  Lua_warning(L, msg, tocont, __FILE__, __LINE__, __FUNCTION__)

int Lua_error(lua_State* L, const char* _FILE, int _LINE, const char* _FUNC);

#define lua_error(L) Lua_error(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_next(lua_State* L, int idx, const char* _FILE, int _LINE,
             const char* _FUNC);

#define lua_next(L, idx) Lua_next(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_concat(lua_State* L, int n, const char* _FILE, int _LINE,
                const char* _FUNC);

#define lua_concat(L, n) Lua_concat(L, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_len(lua_State* L, int idx, const char* _FILE, int _LINE,
             const char* _FUNC);

#define lua_len(L, idx) Lua_len(L, idx, __FILE__, __LINE__, __FUNCTION__)

size_t Lua_stringtonumber(lua_State* L, const char* s, const char* _FILE,
                          int _LINE, const char* _FUNC);

#define lua_stringtonumber(L, s) \
  Lua_stringtonumber(L, s, __FILE__, __LINE__, __FUNCTION__)

lua_Alloc Lua_getallocf(lua_State* L, void** ud, const char* _FILE, int _LINE,
                        const char* _FUNC);

#define lua_getallocf(L, ud) \
  Lua_getallocf(L, ud, __FILE__, __LINE__, __FUNCTION__)

void Lua_setallocf(lua_State* L, lua_Alloc f, void* ud, const char* _FILE,
                   int _LINE, const char* _FUNC);

#define lua_setallocf(L, f, ud) \
  Lua_setallocf(L, f, ud, __FILE__, __LINE__, __FUNCTION__)

void Lua_toclose(lua_State* L, int idx, const char* _FILE, int _LINE,
                 const char* _FUNC);

#define lua_toclose(L, idx) \
  Lua_toclose(L, idx, __FILE__, __LINE__, __FUNCTION__)

void Lua_closeslot(lua_State* L, int idx, const char* _FILE, int _LINE,
                   const char* _FUNC);

#define lua_closeslot(L, idx) \
  Lua_closeslot(L, idx, __FILE__, __LINE__, __FUNCTION__)

int Lua_getstack(lua_State* L, int level, lua_Debug* ar, const char* _FILE,
                 int _LINE, const char* _FUNC);

#define lua_getstack(L, level, ar) \
  Lua_getstack(L, level, ar, __FILE__, __LINE__, __FUNCTION__)

int Lua_getinfo(lua_State* L, const char* what, lua_Debug* ar,
                const char* _FILE, int _LINE, const char* _FUNC);

#define lua_getinfo(L, what, ar) \
  Lua_getinfo(L, what, ar, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_getlocal(lua_State* L, const lua_Debug* ar, int n,
                         const char* _FILE, int _LINE, const char* _FUNC);

#define lua_getlocal(L, ar, n) \
  Lua_getlocal(L, ar, n, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_setlocal(lua_State* L, const lua_Debug* ar, int n,
                         const char* _FILE, int _LINE, const char* _FUNC);

#define lua_setlocal(L, ar, n) \
  Lua_setlocal(L, ar, n, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_getupvalue(lua_State* L, int funcindex, int n,
                           const char* _FILE, int _LINE, const char* _FUNC);

#define lua_getupvalue(L, funcindex, n) \
  Lua_getupvalue(L, funcindex, n, __FILE__, __LINE__, __FUNCTION__)

const char* Lua_setupvalue(lua_State* L, int funcindex, int n,
                           const char* _FILE, int _LINE, const char* _FUNC);

#define lua_setupvalue(L, funcindex, n) \
  Lua_setupvalue(L, funcindex, n, __FILE__, __LINE__, __FUNCTION__)

void* Lua_upvalueid(lua_State* L, int fidx, int n, const char* _FILE, int _LINE,
                    const char* _FUNC);

#define lua_upvalueid(L, fidx, n) \
  Lua_upvalueid(L, fidx, n, __FILE__, __LINE__, __FUNCTION__)

void Lua_upvaluejoin(lua_State* L, int fidx1, int n1, int fidx2, int n2,
                     const char* _FILE, int _LINE, const char* _FUNC);

#define lua_upvaluejoin(L, fidx1, n1, fidx2, n2) \
  Lua_upvaluejoin(L, fidx1, n1, fidx2, n2, __FILE__, __LINE__, __FUNCTION__)

void Lua_sethook(lua_State* L, lua_Hook func, int mask, int count,
                 const char* _FILE, int _LINE, const char* _FUNC);

#define lua_sethook(L, func, mask, count) \
  Lua_sethook(L, func, mask, count, __FILE__, __LINE__, __FUNCTION__)

lua_Hook Lua_gethook(lua_State* L, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_gethook(L) Lua_gethook(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_gethookmask(lua_State* L, const char* _FILE, int _LINE,
                    const char* _FUNC);

#define lua_gethookmask(L) Lua_gethookmask(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_gethookcount(lua_State* L, const char* _FILE, int _LINE,
                     const char* _FUNC);

#define lua_gethookcount(L) \
  Lua_gethookcount(L, __FILE__, __LINE__, __FUNCTION__)

int Lua_setcstacklimit(lua_State* L, unsigned int limit, const char* _FILE,
                       int _LINE, const char* _FUNC);

#define lua_setcstacklimit(L, limit) \
  Lua_setcstacklimit(L, limit, __FILE__, __LINE__, __FUNCTION__)

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef luaconf_h
#define luaconf_h

#include <limits.h>
#include <stddef.h>

/*
** ===================================================================
** General Configuration File for Lua
**
** Some definitions here can be changed externally, through the compiler
** (e.g., with '-D' options): They are commented out or protected
** by '#if !defined' guards. However, several other definitions
** should be changed directly here, either because they affect the
** Lua ABI (by making the changes here, you ensure that all software
** connected to Lua, such as C libraries, will be compiled with the same
** configuration); or because they are seldom changed.
**
** Search for "@@" to find all configurable definitions.
** ===================================================================
*/

#if !defined(LUA_COBALT) && !defined(NOLUA_COBALT)
#define LUA_COBALT
#endif

/*
** {====================================================================
** System Configuration: macros to adapt (if needed) Lua to some
** particular platform, for instance restricting it to C89.
** =====================================================================
*/

/*
@@ LUA_USE_C89 controls the use of non-ISO-C89 features.
** Define it if you want Lua to avoid the use of a few C99 features
** or Windows-specific features on Windows.
*/
/* #define LUA_USE_C89 */

/*
** By default, Lua on Windows use (some) specific Windows features
*/
#if !defined(LUA_USE_C89) && defined(_WIN32) && !defined(_WIN32_WCE)
#define LUA_USE_WINDOWS /* enable goodies for regular Windows */
#endif

#if defined(LUA_USE_WINDOWS)
#define LUA_DL_DLL  /* enable support for DLL */
#define LUA_USE_C89 /* broadly, Windows is C89 */
#endif

#if defined(LUA_USE_LINUX)
#define LUA_USE_POSIX
#define LUA_USE_DLOPEN /* needs an extra library: -ldl */
#endif

#if defined(LUA_USE_MACOSX)
#define LUA_USE_POSIX
#define LUA_USE_DLOPEN /* MacOS does not need -ldl */
#endif

/*
@@ LUAI_IS32INT is true iff 'int' has (at least) 32 bits.
*/
#define LUAI_IS32INT ((UINT_MAX >> 30) >= 3)

/* }================================================================== */

/*
** {==================================================================
** Configuration for Number types. These options should not be
** set externally, because any other code connected to Lua must
** use the same configuration.
** ===================================================================
*/

/*
@@ LUA_INT_TYPE defines the type for Lua integers.
@@ LUA_FLOAT_TYPE defines the type for Lua floats.
** Lua should work fine with any mix of these options supported
** by your C compiler. The usual configurations are 64-bit integers
** and 'double' (the default), 32-bit integers and 'float' (for
** restricted platforms), and 'long'/'double' (for C compilers not
** compliant with C99, which may not have support for 'long long').
*/

/* predefined options for LUA_INT_TYPE */
#define LUA_INT_INT 1
#define LUA_INT_LONG 2
#define LUA_INT_LONGLONG 3

/* predefined options for LUA_FLOAT_TYPE */
#define LUA_FLOAT_FLOAT 1
#define LUA_FLOAT_DOUBLE 2
#define LUA_FLOAT_LONGDOUBLE 3

/* Default configuration ('long long' and 'double', for 64-bit Lua) */
#define LUA_INT_DEFAULT LUA_INT_LONGLONG
#define LUA_FLOAT_DEFAULT LUA_FLOAT_DOUBLE

/*
@@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats.
*/
#define LUA_32BITS 0

/*
@@ LUA_C89_NUMBERS ensures that Lua uses the largest types available for
** C89 ('long' and 'double'); Windows always has '__int64', so it does
** not need to use this case.
*/
#if defined(LUA_USE_C89) && !defined(LUA_USE_WINDOWS)
#define LUA_C89_NUMBERS 1
#else
#define LUA_C89_NUMBERS 0
#endif

#if LUA_32BITS /* { */
/*
** 32-bit integers and 'float'
*/
#if LUAI_IS32INT /* use 'int' if big enough */
#define LUA_INT_TYPE LUA_INT_INT
#else /* otherwise use 'long' */
#define LUA_INT_TYPE LUA_INT_LONG
#endif
#define LUA_FLOAT_TYPE LUA_FLOAT_FLOAT

#elif LUA_C89_NUMBERS /* }{ */
/*
** largest types available for C89 ('long' and 'double')
*/
#define LUA_INT_TYPE LUA_INT_LONG
#define LUA_FLOAT_TYPE LUA_FLOAT_DOUBLE

#else /* }{ */
/* use defaults */

#define LUA_INT_TYPE LUA_INT_DEFAULT
#define LUA_FLOAT_TYPE LUA_FLOAT_DEFAULT

#endif /* } */

/* }================================================================== */

/*
** {==================================================================
** Configuration for Paths.
** ===================================================================
*/

/*
** LUA_PATH_SEP is the character that separates templates in a path.
** LUA_PATH_MARK is the string that marks the substitution points in a
** template.
** LUA_EXEC_DIR in a Windows path is replaced by the executable's
** directory.
*/
#define LUA_PATH_SEP ";"
#define LUA_PATH_MARK "?"
#define LUA_EXEC_DIR "!"

#ifdef LUA_COBALT
#define LUA_SCRIPT_EXT ".cobalt"
#else
#define LUA_SCRIPT_EXT ".lua"
#endif  // LUA_COBALT

/*
@@ LUA_PATH_DEFAULT is the default path that Lua uses to look for
** Lua libraries.
@@ LUA_CPATH_DEFAULT is the default path that Lua uses to look for
** C libraries.
** CHANGE them if your machine has a non-conventional directory
** hierarchy or if you want to install your libraries in
** non-conventional directories.
*/

#define LUA_VDIR "cobalt"
#if defined(_WIN32) /* { */
/*
** In Windows, any exclamation mark ('!') in the path is replaced by the
** path of the directory of the executable file of the current process.
*/
#define LUA_LDIR "!\\lua\\"
#define LUA_CDIR "!\\"
#define LUA_SHRDIR "!\\..\\share\\lua\\" LUA_VDIR "\\"

#if !defined(LUA_PATH_DEFAULT)
#define LUA_PATH_DEFAULT                                              \
  LUA_LDIR "?" LUA_SCRIPT_EXT ";" LUA_LDIR "?\\init" LUA_SCRIPT_EXT   \
           ";" LUA_CDIR "?" LUA_SCRIPT_EXT ";" LUA_CDIR               \
           "?\\init" LUA_SCRIPT_EXT ";" LUA_SHRDIR "?" LUA_SCRIPT_EXT \
           ";" LUA_SHRDIR "?\\init" LUA_SCRIPT_EXT                    \
           ";"                                                        \
           ".\\?" LUA_SCRIPT_EXT                                      \
           ";"                                                        \
           ".\\?\\init" LUA_SCRIPT_EXT ""
#endif

#if !defined(LUA_CPATH_DEFAULT)
#define LUA_CPATH_DEFAULT                                                  \
  LUA_CDIR "?.dll;" LUA_CDIR "..\\lib\\lua\\" LUA_VDIR "\\?.dll;" LUA_CDIR \
           "loadall.dll;"                                                  \
           ".\\?.dll"
#endif

#else /* }{ */

#define LUA_ROOT "/usr/local/"

#define LUA_LDIR LUA_ROOT "share/lua/" LUA_VDIR "/"
#define LUA_CDIR LUA_ROOT "lib/lua/" LUA_VDIR "/"

#if !defined(LUA_PATH_DEFAULT)
#define LUA_PATH_DEFAULT                                           \
  LUA_LDIR "?" LUA_SCRIPT_EXT ";" LUA_LDIR "?/init" LUA_SCRIPT_EXT \
           ";" LUA_CDIR "?" LUA_SCRIPT_EXT ";" LUA_CDIR            \
           "?/init" LUA_SCRIPT_EXT                                 \
           ";"                                                     \
           "./?" LUA_SCRIPT_EXT                                    \
           ";"                                                     \
           "./?/init" LUA_SCRIPT_EXT
#endif

#if !defined(LUA_CPATH_DEFAULT)
#define LUA_CPATH_DEFAULT   \
  LUA_CDIR "?.so;" LUA_CDIR \
           "loadall.so;"    \
           "./?.so"
#endif

#endif /* } */

/*
@@ LUA_DIRSEP is the directory separator (for submodules).
** CHANGE it if your machine does not use "/" as the directory separator
** and is not Windows. (On Windows Lua automatically uses "\".)
*/
#if !defined(LUA_DIRSEP)

#if defined(_WIN32)
#define LUA_DIRSEP "\\"
#else
#define LUA_DIRSEP "/"
#endif

#endif

/* }================================================================== */

/*
** {==================================================================
** Marks for exported symbols in the C code
** ===================================================================
*/

/*
@@ LUA_API is a mark for all core API functions.
@@ LUALIB_API is a mark for all auxiliary library functions.
@@ LUAMOD_API is a mark for all standard library opening functions.
** CHANGE them if you need to define those functions in some special way.
** For instance, if you want to create one Windows DLL with the core and
** the libraries, you may want to use the following definition (define
** LUA_BUILD_AS_DLL to get it).
*/
#if defined(LUA_BUILD_AS_DLL) /* { */

#if defined(LUA_CORE) || defined(LUA_LIB) /* { */
#define LUA_API __declspec(dllexport)
#else /* }{ */
#define LUA_API __declspec(dllimport)
#endif /* } */

#else /* }{ */

#define LUA_API extern

#endif /* } */

/*
** More often than not the libs go together with the core.
*/
#define LUALIB_API LUA_API
#define LUAMOD_API LUA_API

/*
@@ LUAI_FUNC is a mark for all extern functions that are not to be
** exported to outside modules.
@@ LUAI_DDEF and LUAI_DDEC are marks for all extern (const) variables,
** none of which to be exported to outside modules (LUAI_DDEF for
** definitions and LUAI_DDEC for declarations).
** CHANGE them if you need to mark them in some special way. Elf/gcc
** (versions 3.2 and later) mark them as "hidden" to optimize access
** when Lua is compiled as a shared library. Not all elf targets support
** this attribute. Unfortunately, gcc does not offer a way to check
** whether the target offers that support, and those without support
** give a warning about it. To avoid these warnings, change to the
** default definition.
*/
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 302) && \
    defined(__ELF__) /* { */
#define LUAI_FUNC __attribute__((visibility("internal"))) extern
#else /* }{ */
/* AOT: export all internal APIs */
#define LUAI_FUNC extern
#endif /* } */

#define LUAI_DDEC(dec) LUAI_FUNC dec
#define LUAI_DDEF /* empty */

/* }================================================================== */

/*
** {==================================================================
** Compatibility with previous versions
** ===================================================================
*/

/*
@@ LUA_COMPAT_5_3 controls other macros for compatibility with Lua 5.3.
** You can define it to get all options, or change specific options
** to fit your specific needs.
*/
#if defined(LUA_COMPAT_5_3) /* { */

/*
@@ LUA_COMPAT_MATHLIB controls the presence of several deprecated
** functions in the mathematical library.
** (These functions were already officially removed in 5.3;
** nevertheless they are still available here.)
*/
#undef LUA_COMPAT_MATHLIB

/*
@@ LUA_COMPAT_APIINTCASTS controls the presence of macros for
** manipulating other integer types (lua_pushunsigned, lua_tounsigned,
** luaL_checkint, luaL_checklong, etc.)
** (These macros were also officially removed in 5.3, but they are still
** available here.)
*/
#undef LUA_COMPAT_APIINTCASTS

/*
@@ LUA_COMPAT_LT_LE controls the emulation of the '__le' metamethod
** using '__lt'.
*/
#undef LUA_COMPAT_LT_LE

/*
@@ The following macros supply trivial compatibility for some
** changes in the API. The macros themselves document how to
** change your code to avoid using them.
** (Once more, these macros were officially removed in 5.3, but they are
** still available here.)
*/
#define lua_strlen(L, i) lua_rawlen(L, (i))

#define lua_objlen(L, i) lua_rawlen(L, (i))

#define lua_equal(L, idx1, idx2) lua_compare(L, (idx1), (idx2), LUA_OPEQ)
#define lua_lessthan(L, idx1, idx2) lua_compare(L, (idx1), (idx2), LUA_OPLT)

#endif /* } */

/* }================================================================== */

/*
** {==================================================================
** Configuration for Numbers (low-level part).
** Change these definitions if no predefined LUA_FLOAT_* / LUA_INT_*
** satisfy your needs.
** ===================================================================
*/

/*
@@ LUAI_UACNUMBER is the result of a 'default argument promotion'
@@ over a floating number.
@@ l_floatatt(x) corrects float attribute 'x' to the proper float type
** by prefixing it with one of FLT/DBL/LDBL.
@@ LUA_NUMBER_FRMLEN is the length modifier for writing floats.
@@ LUA_NUMBER_FMT is the format for writing floats.
@@ lua_number2str converts a float to a string.
@@ l_mathop allows the addition of an 'l' or 'f' to all math operations.
@@ l_floor takes the floor of a float.
@@ lua_str2number converts a decimal numeral to a number.
*/

/* The following definitions are good for most cases here */

#define l_floor(x) (l_mathop(floor)(x))

#define lua_number2str(s, sz, n) \
  l_sprintf((s), sz, LUA_NUMBER_FMT, (LUAI_UACNUMBER)(n))

/*
@@ lua_numbertointeger converts a float number with an integral value
** to an integer, or returns 0 if float is not within the range of
** a lua_Integer.  (The range comparisons are tricky because of
** rounding. The tests here assume a two-complement representation,
** where MININTEGER always has an exact representation as a float;
** MAXINTEGER may not have one, and therefore its conversion to float
** may have an ill-defined value.)
*/
#define lua_numbertointeger(n, p)         \
  ((n) >= (LUA_NUMBER)(LUA_MININTEGER) && \
   (n) < -(LUA_NUMBER)(LUA_MININTEGER) && (*(p) = (LUA_INTEGER)(n), 1))

/* now the variable definitions */

#if LUA_FLOAT_TYPE == LUA_FLOAT_FLOAT /* { single float */

#define LUA_NUMBER float

#define l_floatatt(n) (FLT_##n)

#define LUAI_UACNUMBER double

#define LUA_NUMBER_FRMLEN ""
#define LUA_NUMBER_FMT "%.7g"

#define l_mathop(op) op##f

#define lua_str2number(s, p) strtof((s), (p))

#elif LUA_FLOAT_TYPE == LUA_FLOAT_LONGDOUBLE /* }{ long double */

#define LUA_NUMBER long double

#define l_floatatt(n) (LDBL_##n)

#define LUAI_UACNUMBER long double

#define LUA_NUMBER_FRMLEN "L"
#define LUA_NUMBER_FMT "%.19Lg"

#define l_mathop(op) op##l

#define lua_str2number(s, p) strtold((s), (p))

#elif LUA_FLOAT_TYPE == LUA_FLOAT_DOUBLE /* }{ double */

#define LUA_NUMBER double

#define l_floatatt(n) (DBL_##n)

#define LUAI_UACNUMBER double

#define LUA_NUMBER_FRMLEN ""
#define LUA_NUMBER_FMT "%.14g"

#define l_mathop(op) op

#define lua_str2number(s, p) strtod((s), (p))

#else /* }{ */

#error "numeric float type not defined"

#endif /* } */

/*
** Should warnings be enabled
*/
#ifndef COBALT_WARNING
#define COBALT_WARNING 0
#endif

/*
@@ LUA_UNSIGNED is the unsigned version of LUA_INTEGER.
@@ LUAI_UACINT is the result of a 'default argument promotion'
@@ over a LUA_INTEGER.
@@ LUA_INTEGER_FRMLEN is the length modifier for reading/writing integers.
@@ LUA_INTEGER_FMT is the format for writing integers.
@@ LUA_MAXINTEGER is the maximum value for a LUA_INTEGER.
@@ LUA_MININTEGER is the minimum value for a LUA_INTEGER.
@@ LUA_MAXUNSIGNED is the maximum value for a LUA_UNSIGNED.
@@ lua_integer2str converts an integer to a string.
*/

/* The following definitions are good for most cases here */

#define LUA_INTEGER_FMT "%" LUA_INTEGER_FRMLEN "d"

#define LUAI_UACINT LUA_INTEGER

#define lua_integer2str(s, sz, n) \
  l_sprintf((s), sz, LUA_INTEGER_FMT, (LUAI_UACINT)(n))

/*
** use LUAI_UACINT here to avoid problems with promotions (which
** can turn a comparison between unsigneds into a signed comparison)
*/
#define LUA_UNSIGNED unsigned LUAI_UACINT

/* now the variable definitions */

#if LUA_INT_TYPE == LUA_INT_INT /* { int */

#define LUA_INTEGER int
#define LUA_INTEGER_FRMLEN ""

#define LUA_MAXINTEGER INT_MAX
#define LUA_MININTEGER INT_MIN

#define LUA_MAXUNSIGNED UINT_MAX

#elif LUA_INT_TYPE == LUA_INT_LONG /* }{ long */

#define LUA_INTEGER long
#define LUA_INTEGER_FRMLEN "l"

#define LUA_MAXINTEGER LONG_MAX
#define LUA_MININTEGER LONG_MIN

#define LUA_MAXUNSIGNED ULONG_MAX

#elif LUA_INT_TYPE == LUA_INT_LONGLONG /* }{ long long */

/* use presence of macro LLONG_MAX as proxy for C99 compliance */
#if defined(LLONG_MAX)                 /* { */
/* use ISO C99 stuff */

#define LUA_INTEGER long long
#define LUA_INTEGER_FRMLEN "ll"

#define LUA_MAXINTEGER LLONG_MAX
#define LUA_MININTEGER LLONG_MIN

#define LUA_MAXUNSIGNED ULLONG_MAX

#elif defined(LUA_USE_WINDOWS) /* }{ */
/* in Windows, can use specific Windows types */

#define LUA_INTEGER __int64
#define LUA_INTEGER_FRMLEN "I64"

#define LUA_MAXINTEGER _I64_MAX
#define LUA_MININTEGER _I64_MIN

#define LUA_MAXUNSIGNED _UI64_MAX

#else /* }{ */

#error \
    "Compiler does not support 'long long'. Use option '-DLUA_32BITS' \
  or '-DLUA_C89_NUMBERS' (see file 'luaconf.h' for details)"

#endif /* } */

#else /* }{ */

#error "numeric integer type not defined"

#endif /* } */

/* }================================================================== */

/*
** {==================================================================
** Dependencies with C99 and other C details
** ===================================================================
*/

/*
@@ l_sprintf is equivalent to 'snprintf' or 'sprintf' in C89.
** (All uses in Lua have only one format item.)
*/
#if !defined(LUA_USE_C89)
#define l_sprintf(s, sz, f, i) snprintf(s, sz, f, i)
#else
#define l_sprintf(s, sz, f, i) ((void)(sz), sprintf(s, f, i))
#endif

/*
@@ lua_strx2number converts a hexadecimal numeral to a number.
** In C99, 'strtod' does that conversion. Otherwise, you can
** leave 'lua_strx2number' undefined and Lua will provide its own
** implementation.
*/
#if !defined(LUA_USE_C89)
#define lua_strx2number(s, p) lua_str2number(s, p)
#endif

/*
@@ lua_pointer2str converts a pointer to a readable string in a
** non-specified way.
*/
#define lua_pointer2str(buff, sz, p) l_sprintf(buff, sz, "%p", p)

/*
@@ lua_number2strx converts a float to a hexadecimal numeral.
** In C99, 'sprintf' (with format specifiers '%a'/'%A') does that.
** Otherwise, you can leave 'lua_number2strx' undefined and Lua will
** provide its own implementation.
*/
#if !defined(LUA_USE_C89)
#define lua_number2strx(L, b, sz, f, n) \
  ((void)L, l_sprintf(b, sz, f, (LUAI_UACNUMBER)(n)))
#endif

/*
** 'strtof' and 'opf' variants for math functions are not valid in
** C89. Otherwise, the macro 'HUGE_VALF' is a good proxy for testing the
** availability of these variants. ('math.h' is already included in
** all files that use these macros.)
*/
#if defined(LUA_USE_C89) || (defined(HUGE_VAL) && !defined(HUGE_VALF))
#undef l_mathop /* variants not available */
#undef lua_str2number
#define l_mathop(op) (lua_Number) op /* no variant */
#define lua_str2number(s, p) ((lua_Number)strtod((s), (p)))
#endif

/*
@@ LUA_KCONTEXT is the type of the context ('ctx') for continuation
** functions.  It must be a numerical type; Lua will use 'intptr_t' if
** available, otherwise it will use 'ptrdiff_t' (the nearest thing to
** 'intptr_t' in C89)
*/
#define LUA_KCONTEXT ptrdiff_t

#if !defined(LUA_USE_C89) && defined(__STDC_VERSION__) && \
    __STDC_VERSION__ >= 199901L
#include <stdint.h>
#if defined(INTPTR_MAX) /* even in C99 this type is optional */
#undef LUA_KCONTEXT
#define LUA_KCONTEXT intptr_t
#endif
#endif

/*
@@ lua_getlocaledecpoint gets the locale "radix character" (decimal point).
** Change that if you do not want to use C locales. (Code using this
** macro must include the header 'locale.h'.)
*/
#if !defined(lua_getlocaledecpoint)
#define lua_getlocaledecpoint() (localeconv()->decimal_point[0])
#endif

/*
** macros to improve jump prediction, used mostly for error handling
** and debug facilities. (Some macros in the Lua API use these macros.
** Define LUA_NOBUILTIN if you do not want '__builtin_expect' in your
** code.)
*/
#if !defined(luai_likely)

#if defined(__GNUC__) && !defined(LUA_NOBUILTIN)
#define luai_likely(x) (__builtin_expect(((x) != 0), 1))
#define luai_unlikely(x) (__builtin_expect(((x) != 0), 0))
#else
#define luai_likely(x) (x)
#define luai_unlikely(x) (x)
#endif

#endif

#if defined(LUA_CORE) || defined(LUA_LIB)
/* shorter names for Lua's own use */
#define l_likely(x) luai_likely(x)
#define l_unlikely(x) luai_unlikely(x)
#endif

/* }================================================================== */

/*
** {==================================================================
** Language Variations
** =====================================================================
*/

/*
@@ LUA_NOCVTN2S/LUA_NOCVTS2N control how Lua performs some
** coercions. Define LUA_NOCVTN2S to turn off automatic coercion from
** numbers to strings. Define LUA_NOCVTS2N to turn off automatic
** coercion from strings to numbers.
*/
/* #define LUA_NOCVTN2S */
/* #define LUA_NOCVTS2N */

/*
@@ LUA_USE_APICHECK turns on several consistency checks on the C API.
** Define it as a help when debugging C code.
*/
#if defined(LUA_USE_APICHECK)
#include <assert.h>
#define luai_apicheck(l, e) assert(e)
#endif

/* }================================================================== */

/*
** {==================================================================
** Macros that affect the API and must be stable (that is, must be the
** same when you compile Lua and when you compile code that links to
** Lua).
** =====================================================================
*/

/*
@@ LUAI_MAXSTACK limits the size of the Lua stack.
** CHANGE it if you need a different limit. This limit is arbitrary;
** its only purpose is to stop Lua from consuming unlimited stack
** space (and to reserve some numbers for pseudo-indices).
** (It must fit into max(size_t)/32.)
*/
#if LUAI_IS32INT
#define LUAI_MAXSTACK 1000000
#else
#define LUAI_MAXSTACK 15000
#endif

/*
@@ LUA_EXTRASPACE defines the size of a raw memory area associated with
** a Lua state with very fast access.
** CHANGE it if you need a different size.
*/
#define LUA_EXTRASPACE (sizeof(void *))

/*
@@ LUA_IDSIZE gives the maximum size for the description of the source
@@ of a function in debug information.
** CHANGE it if you want a different size.
*/
#define LUA_IDSIZE 60


/*
@@ New cobalt features and to enable or not.
*/
#define NEW_SYNTAX_ERR 1 /* default: ON */ /* new syntax error messages */
#define QUICK_FILL 0 /* defualt: OFF */ /* faster buffer filling but interactive mode is broken */
/*
@@ LUAL_BUFFERSIZE is the buffer size used by the lauxlib buffer system.
*/
#define LUAL_BUFFERSIZE ((int)(16 * sizeof(void *) * sizeof(lua_Number)))

/*
@@ LUAI_MAXALIGN defines fields that, when used in a union, ensure
** maximum alignment for the other items in that union.
*/
#define LUAI_MAXALIGN \
  lua_Number n;       \
  double u;           \
  void *s;            \
  lua_Integer i;      \
  long l

/* }================================================================== */

/* =================================================================== */

/*
** Local configuration. You can use this space to add your redefinitions
** without modifying the main part of the file.
*/

/*
@@ LUA_INDEX_BASE is the index base used by array tables.
** CHANGE it to 1 if you desire Lua compatibility.
** By default Lua uses indexes base zero.
*/
#define LUA_INDEX_BASE 1

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lualib_h
#define lualib_h


/* version suffix for environment variable names */
#define LUA_VERSUFFIX "cobalt23"

LUAMOD_API int(luaopen_base)(lua_State *L);
LUAMOD_API int(luaopen_under)(lua_State *L);

#define LUA_PREPROCESSORNAME "preprocess"
LUAMOD_API int(luaopen_preprocess)(lua_State *L);

#define LUA_ASYNCLIBNAME "async"
LUAMOD_API int(luaopen_async)(lua_State *L);

#define LUA_COLIBNAME "coroutine"
LUAMOD_API int(luaopen_coroutine)(lua_State *L);

#define LUA_TABLIBNAME "table"
LUAMOD_API int(luaopen_table)(lua_State *L);

#define LUA_IOLIBNAME "io"
LUAMOD_API int(luaopen_io)(lua_State *L);

#define LUA_GLMATHNAME "glmath"
LUAMOD_API int(luaopen_moonglmath)(lua_State *L);

#define LUA_OSLIBNAME "os"
LUAMOD_API int(luaopen_os)(lua_State *L);

#define LUA_STRLIBNAME "string"
LUAMOD_API int(luaopen_string)(lua_State *L);

#define LUA_UTF8LIBNAME "utf8"
LUAMOD_API int(luaopen_utf8)(lua_State *L);

#define LUA_BITLIBNAME "bit32"
LUAMOD_API int(luaopen_bit32)(lua_State *L);

#define LUA_MATHLIBNAME "math"
LUAMOD_API int(luaopen_math)(lua_State *L);

#define LUA_COLORLIBNAME "Color"
LUAMOD_API int(luaopen_color)(lua_State *L);

#define LUA_CORENAME "core"
LUAMOD_API int(luaopen_core)(lua_State *L);

#define LUA_DBLIBNAME "debug"
LUAMOD_API int(luaopen_debug)(lua_State *L);

#define LUA_LOADLIBNAME "package"
LUAMOD_API int(luaopen_package)(lua_State *L);

#define LUA_DEVICENAME "device"
LUAMOD_API int(luaopen_device)(lua_State *L);

#define LUA_STRUCTNAME "struct"
LUAMOD_API int(luaopen_struct)(lua_State *L);

#define LUA_BITOPNAME "bit"
LUAMOD_API int(luaopen_bit)(lua_State *L);

#define LUA_SIGNALNAME "signal"
LUAMOD_API int(luaopen_signal)(lua_State *L);

#define LUA_FILESYSTEMNAME "file"
LUAMOD_API int(luaopen_lfs)(lua_State *L);

#define LUA_SOCKETNAME "msg"
LUAMOD_API int(luaopen_chan)(lua_State *L);

#define LUA_ALLOCNAME "alloc"
LUAMOD_API int(luaopen_alloc)(lua_State *L);

#define LUA_JSONAME "json"
LUAMOD_API int(luaopen_json)(lua_State *L);

#define LUA_CRYPTNAME "crypt"
LUAMOD_API int(luaopen_crypt)(lua_State *L);

#define LUA_LPEGNAME "lpeg"
LUAMOD_API int(luaopen_lpeg)(lua_State *L);

#if defined(COBALT_FFI)
#define LUA_FFINAME "ffi"
LUAMOD_API int(luaopen_ffi)(lua_State *L);
#endif

// Bindings
#if defined(COBALT_SDL)
#define LUA_SDLNAME "sdl"
LUAMOD_API int(luaopen_moonsdl2)(lua_State *L);
#endif
#ifdef COBALT_PYTHON
#define LUA_PYTHONNAME "python"
LUAMOD_API int(luaopen_python)(lua_State *L);
#endif
#if defined(COBALT_USB)
#define LUA_USBNAME "usb"
LUAMOD_API int(luaopen_moonusb)(lua_State *L);
#endif

// Platform specific libraries
#if defined __unix__ || defined LUA_USE_POSIX || defined __APPLE__
#define LUA_UNIXNAME "unix"
LUAMOD_API int(luaopen_unix)(lua_State *L);
#elif defined _WIN32 || defined _WIN64 || defined __CYGWIN__ || \
    defined __MINGW32__ || defined LUA_USE_WINDOWS || defined LUA_USE_MINGW
#define LUA_WINNAME "win"
LUAMOD_API int(luaopen_win)(lua_State *L);
#endif
#if defined(LUA_USE_DLOPEN) || defined(LUA_DL_DLL)
#define LUA_DYNNAME "dynamic"
LUAMOD_API int(luaopen_dyn)(lua_State *L);
#endif

/* open all previous libraries */
LUALIB_API void(luaL_openlibs)(lua_State *L);

#if !defined(lua_assert)
#define lua_assert(x) ((void)0)
#endif

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lundump_h
#define lundump_h


/* data to catch conversion errors */
#define LUAC_DATA "\x19\x93\r\n\x1a\n"

#define LUAC_INT 0x5678
#define LUAC_NUM cast_num(370.5)

/*
** Encode major-minor version in one byte, one nibble for each
*/
#define MYINT(s) (s[0] - '0') /* assume one-digit numerals */
#define LUAC_VERSION \
  (MYINT(COBALT_VERSION_MAJOR) * 16 + MYINT(COBALT_VERSION_MINOR))

#define LUAC_FORMAT 0 /* this is the official format */

/* load one chunk; from lundump.c */
LUAI_FUNC LClosure* luaU_undump(lua_State* L, ZIO* Z, const char* name);

/* dump one chunk; from ldump.c */
LUAI_FUNC int luaU_dump(lua_State* L, const Proto* f, lua_Writer w, void* data,
                        int strip);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lvm_h
#define lvm_h


#define l_unlikely luai_unlikely
#define l_likely luai_likely

#if !defined(LUA_NOCVTN2S)
#define cvt2str(o) ttisnumber(o)
#else
#define cvt2str(o) 0 /* no conversion from numbers to strings */
#endif

#if !defined(LUA_NOCVTS2N)
#define cvt2num(o) ttisstring(o)
#else
#define cvt2num(o) 0 /* no conversion from strings to numbers */
#endif

/*
** You can define LUA_FLOORN2I if you want to convert floats to integers
** by flooring them (instead of raising an error if they are not
** integral values)
*/
#if !defined(LUA_FLOORN2I)
#define LUA_FLOORN2I F2Ieq
#endif

/*
** Rounding modes for float->integer coercion
*/
typedef enum {
  F2Ieq,    /* no rounding; accepts only integral values */
  F2Ifloor, /* takes the floor of the number */
  F2Iceil   /* takes the ceil of the number */
} F2Imod;

/* convert an object to a float (including string coercion) */
#define tonumber(o, n) \
  (ttisfloat(o) ? (*(n) = fltvalue(o), 1) : luaV_tonumber_(o, n))

/* convert an object to a float (without string coercion) */
#define tonumberns(o, n)                 \
  (ttisfloat(o) ? ((n) = fltvalue(o), 1) \
                : (ttisinteger(o) ? ((n) = cast_num(ivalue(o)), 1) : 0))

/* convert an object to an integer (including string coercion) */
#define tointeger(o, i)                             \
  (l_likely(ttisinteger(o)) ? (*(i) = ivalue(o), 1) \
                            : luaV_tointeger(o, i, LUA_FLOORN2I))

/* convert an object to an integer (without string coercion) */
#define tointegerns(o, i)                           \
  (l_likely(ttisinteger(o)) ? (*(i) = ivalue(o), 1) \
                            : luaV_tointegerns(o, i, LUA_FLOORN2I))

#define intop(op, v1, v2) l_castU2S(l_castS2U(v1) op l_castS2U(v2))

#define luaV_rawequalobj(t1, t2) luaV_equalobj(NULL, t1, t2)

/*
** fast track for 'gettable': if 't' is a table and 't[k]' is present,
** return 1 with 'slot' pointing to 't[k]' (position of final result).
** Otherwise, return 0 (meaning it will have to check metamethod)
** with 'slot' pointing to an empty 't[k]' (if 't' is a table) or NULL
** (otherwise). 'f' is the raw get function to use.
*/
#define luaV_fastget(L, t, k, slot, f)                                      \
  (!ttistable(t)                                                            \
       ? (slot = NULL, 0) /* not a table; 'slot' is NULL and result is 0 */ \
       : (slot = f(hvalue(t), k), /* else, do raw access */                 \
          !isempty(slot)))        /* result not empty? */

/*
** Special case of 'luaV_fastget' for integers, inlining the fast case
** of 'luaH_getint'.
*/
#define luaV_fastgeti(L, t, k, slot)                                        \
  (!ttistable(t)                                                            \
       ? (slot = NULL, 0) /* not a table; 'slot' is NULL and result is 0 */ \
       : (slot = (l_castS2U(k) - 1u < hvalue(t)->alimit)                    \
                     ? &hvalue(t)->array[k - 1]                             \
                     : luaH_getint(hvalue(t), k),                           \
          !isempty(slot))) /* result not empty? */

/*
** Finish a fast set operation (when fast get succeeds). In that case,
** 'slot' points to the place to put the value.
*/
#define luaV_finishfastset(L, t, slot, v) \
  {                                       \
    setobj2t(L, cast(TValue *, slot), v); \
    luaC_barrierback(L, gcvalue(t), v);   \
  }

LUAI_FUNC int luaV_equalobj(lua_State *L, const TValue *t1, const TValue *t2);
LUAI_FUNC int luaV_lessthan(lua_State *L, const TValue *l, const TValue *r);
LUAI_FUNC int luaV_lessequal(lua_State *L, const TValue *l, const TValue *r);
LUAI_FUNC int luaV_tonumber_(const TValue *obj, lua_Number *n);
LUAI_FUNC int luaV_tointeger(const TValue *obj, lua_Integer *p, F2Imod mode);
LUAI_FUNC int luaV_tointegerns(const TValue *obj, lua_Integer *p, F2Imod mode);
LUAI_FUNC int luaV_flttointeger(lua_Number n, lua_Integer *p, F2Imod mode);
LUAI_FUNC void luaV_finishget(lua_State *L, const TValue *t, TValue *key,
                              StkId val, const TValue *slot);
LUAI_FUNC void luaV_finishset(lua_State *L, const TValue *t, TValue *key,
                              TValue *val, const TValue *slot);
LUAI_FUNC void luaV_finishOp(lua_State *L);
LUAI_FUNC void luaV_execute(lua_State *L, CallInfo *ci);
LUAI_FUNC void luaV_concat(lua_State *L, int total);
LUAI_FUNC lua_Integer luaV_idiv(lua_State *L, lua_Integer x, lua_Integer y);
LUAI_FUNC lua_Integer luaV_mod(lua_State *L, lua_Integer x, lua_Integer y);
LUAI_FUNC lua_Number luaV_modf(lua_State *L, lua_Number x, lua_Number y);
LUAI_FUNC lua_Integer luaV_shiftl(lua_Integer x, lua_Integer y);
LUAI_FUNC void luaV_objlen(lua_State *L, StkId ra, const TValue *rb);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif




#ifndef lzio_h
#define lzio_h


#define EOZ (-1) /* end of stream */

typedef struct Zio ZIO;

#define zgetc(z) (((z)->n--) > 0 ? cast_uchar(*(z)->p++) : luaZ_fill(z))

typedef struct Mbuffer {
  char *buffer;
  size_t n;
  size_t buffsize;
} Mbuffer;

#define luaZ_initbuffer(L, buff) ((buff)->buffer = NULL, (buff)->buffsize = 0)

#define luaZ_buffer(buff) ((buff)->buffer)
#define luaZ_sizebuffer(buff) ((buff)->buffsize)
#define luaZ_bufflen(buff) ((buff)->n)

#define luaZ_buffremove(buff, i) ((buff)->n -= (i))
#define luaZ_resetbuffer(buff) ((buff)->n = 0)

#define luaZ_resizebuffer(L, buff, size)                             \
  ((buff)->buffer =                                                  \
       luaM_reallocvchar(L, (buff)->buffer, (buff)->buffsize, size), \
   (buff)->buffsize = size)

#define luaZ_freebuffer(L, buff) luaZ_resizebuffer(L, buff, 0)

LUAI_FUNC void luaZ_init(lua_State *L, ZIO *z, lua_Reader reader, void *data);
LUAI_FUNC size_t luaZ_read(ZIO *z, void *b, size_t n); /* read next n bytes */

/* --------- Private Part ------------------ */

struct Zio {
  size_t n;          /* bytes still unread */
  const char *p;     /* current position in buffer */
  lua_Reader reader; /* reader function */
  void *data;        /* additional data */
  lua_State *L;      /* Lua state (for reader) */
  #ifdef QUICK_FILL
  int eoz;           /* true if reader has no more data */
  #endif
};

LUAI_FUNC int luaZ_fill(ZIO *z);

#endif

#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif



#ifndef LUAINPYTHON_H
#define LUAINPYTHON_H

typedef struct
{
    PyObject_HEAD
    int ref;
    int refiter;
} LuaObject;

extern PyTypeObject LuaObject_Type;

#define LuaObject_Check(op) PyObject_TypeCheck(op, &LuaObject_Type)

PyObject* LuaConvert(lua_State *L, int n);

extern lua_State *LuaState;

#if PY_MAJOR_VERSION < 3
#  define PyInit_lua initlua
#endif
PyMODINIT_FUNC PyInit_lua(void);

#endif
#ifdef __cplusplus
}
#endif
#endif
